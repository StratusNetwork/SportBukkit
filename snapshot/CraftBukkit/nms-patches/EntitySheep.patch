--- a/net/minecraft/server/EntitySheep.java
+++ b/net/minecraft/server/EntitySheep.java
@@ -5,23 +5,33 @@
 import java.util.Random;
 import javax.annotation.Nullable;
 
+// CraftBukkit start
+import org.bukkit.event.entity.SheepRegrowWoolEvent;
+import org.bukkit.event.player.PlayerShearEntityEvent;
+import org.bukkit.inventory.InventoryView;
+// CraftBukkit end
+
 public class EntitySheep extends EntityAnimal {
 
-    private static final DataWatcherObject<Byte> bx = DataWatcher.a(EntitySheep.class, DataWatcherRegistry.a);
+    private static final DataWatcherObject<Byte> bw = DataWatcher.a(EntitySheep.class, DataWatcherRegistry.a);
     private final InventoryCrafting container = new InventoryCrafting(new Container() {
         public boolean a(EntityHuman entityhuman) {
             return false;
         }
+
+        // CraftBukkit start
+        @Override
+        public InventoryView getBukkitView() {
+            return null; // TODO: O.O
+        }
+        // CraftBukkit end
     }, 2, 1);
-    private static final Map<EnumColor, float[]> bz = Maps.newEnumMap(EnumColor.class);
-    private int bB;
-    private PathfinderGoalEatTile bC;
-
-    private static float[] c(EnumColor enumcolor) {
-        float[] afloat = enumcolor.f();
-        float f = 0.75F;
+    private static final Map<EnumColor, float[]> by = Maps.newEnumMap(EnumColor.class);
+    private int bA;
+    private PathfinderGoalEatTile bB;
 
-        return new float[] { afloat[0] * 0.75F, afloat[1] * 0.75F, afloat[2] * 0.75F};
+    public static float[] a(EnumColor enumcolor) {
+        return (float[]) EntitySheep.by.get(enumcolor);
     }
 
     public EntitySheep(World world) {
@@ -29,29 +39,30 @@
         this.setSize(0.9F, 1.3F);
         this.container.setItem(0, new ItemStack(Items.DYE));
         this.container.setItem(1, new ItemStack(Items.DYE));
+        this.container.resultInventory = new InventoryCraftResult(); // CraftBukkit - add result slot for event
     }
 
     protected void r() {
-        this.bC = new PathfinderGoalEatTile(this);
+        this.bB = new PathfinderGoalEatTile(this);
         this.goalSelector.a(0, new PathfinderGoalFloat(this));
         this.goalSelector.a(1, new PathfinderGoalPanic(this, 1.25D));
         this.goalSelector.a(2, new PathfinderGoalBreed(this, 1.0D));
         this.goalSelector.a(3, new PathfinderGoalTempt(this, 1.1D, Items.WHEAT, false));
         this.goalSelector.a(4, new PathfinderGoalFollowParent(this, 1.1D));
-        this.goalSelector.a(5, this.bC);
+        this.goalSelector.a(5, this.bB);
         this.goalSelector.a(6, new PathfinderGoalRandomStrollLand(this, 1.0D));
         this.goalSelector.a(7, new PathfinderGoalLookAtPlayer(this, EntityHuman.class, 6.0F));
         this.goalSelector.a(8, new PathfinderGoalRandomLookaround(this));
     }
 
     protected void M() {
-        this.bB = this.bC.f();
+        this.bA = this.bB.f();
         super.M();
     }
 
     public void n() {
         if (this.world.isClientSide) {
-            this.bB = Math.max(0, this.bB - 1);
+            this.bA = Math.max(0, this.bA - 1);
         }
 
         super.n();
@@ -65,7 +76,7 @@
 
     protected void i() {
         super.i();
-        this.datawatcher.register(EntitySheep.bx, Byte.valueOf((byte) 0));
+        this.datawatcher.register(EntitySheep.bw, Byte.valueOf((byte) 0));
     }
 
     @Nullable
@@ -131,11 +142,22 @@
 
         if (itemstack.getItem() == Items.SHEARS && !this.isSheared() && !this.isBaby()) {
             if (!this.world.isClientSide) {
+                // CraftBukkit start
+                PlayerShearEntityEvent event = new PlayerShearEntityEvent((org.bukkit.entity.Player) entityhuman.getBukkitEntity(), this.getBukkitEntity());
+                this.world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    return false;
+                }
+                // CraftBukkit end
+
                 this.setSheared(true);
                 int i = 1 + this.random.nextInt(3);
 
                 for (int j = 0; j < i; ++j) {
+                    this.forceDrops = true; // CraftBukkit
                     EntityItem entityitem = this.a(new ItemStack(Item.getItemOf(Blocks.WOOL), 1, this.getColor().getColorIndex()), 1.0F);
+                    this.forceDrops = false; // CraftBukkit
 
                     entityitem.motY += (double) (this.random.nextFloat() * 0.05F);
                     entityitem.motX += (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F);
@@ -144,7 +166,7 @@
             }
 
             itemstack.damage(1, entityhuman);
-            this.a(SoundEffects.gv, 1.0F, 1.0F);
+            this.a(SoundEffects.fu, 1.0F, 1.0F);
         }
 
         return super.a(entityhuman, enumhand);
@@ -166,43 +188,43 @@
         this.setColor(EnumColor.fromColorIndex(nbttagcompound.getByte("Color")));
     }
 
-    protected SoundEffect F() {
-        return SoundEffects.gs;
+    protected SoundEffect G() {
+        return SoundEffects.fr;
     }
 
-    protected SoundEffect d(DamageSource damagesource) {
-        return SoundEffects.gu;
+    protected SoundEffect bW() {
+        return SoundEffects.ft;
     }
 
-    protected SoundEffect cd() {
-        return SoundEffects.gt;
+    protected SoundEffect bX() {
+        return SoundEffects.fs;
     }
 
     protected void a(BlockPosition blockposition, Block block) {
-        this.a(SoundEffects.gw, 0.15F, 1.0F);
+        this.a(SoundEffects.fv, 0.15F, 1.0F);
     }
 
     public EnumColor getColor() {
-        return EnumColor.fromColorIndex(((Byte) this.datawatcher.get(EntitySheep.bx)).byteValue() & 15);
+        return EnumColor.fromColorIndex(((Byte) this.datawatcher.get(EntitySheep.bw)).byteValue() & 15);
     }
 
     public void setColor(EnumColor enumcolor) {
-        byte b0 = ((Byte) this.datawatcher.get(EntitySheep.bx)).byteValue();
+        byte b0 = ((Byte) this.datawatcher.get(EntitySheep.bw)).byteValue();
 
-        this.datawatcher.set(EntitySheep.bx, Byte.valueOf((byte) (b0 & 240 | enumcolor.getColorIndex() & 15)));
+        this.datawatcher.set(EntitySheep.bw, Byte.valueOf((byte) (b0 & 240 | enumcolor.getColorIndex() & 15)));
     }
 
     public boolean isSheared() {
-        return (((Byte) this.datawatcher.get(EntitySheep.bx)).byteValue() & 16) != 0;
+        return (((Byte) this.datawatcher.get(EntitySheep.bw)).byteValue() & 16) != 0;
     }
 
     public void setSheared(boolean flag) {
-        byte b0 = ((Byte) this.datawatcher.get(EntitySheep.bx)).byteValue();
+        byte b0 = ((Byte) this.datawatcher.get(EntitySheep.bw)).byteValue();
 
         if (flag) {
-            this.datawatcher.set(EntitySheep.bx, Byte.valueOf((byte) (b0 | 16)));
+            this.datawatcher.set(EntitySheep.bw, Byte.valueOf((byte) (b0 | 16)));
         } else {
-            this.datawatcher.set(EntitySheep.bx, Byte.valueOf((byte) (b0 & -17)));
+            this.datawatcher.set(EntitySheep.bw, Byte.valueOf((byte) (b0 & -17)));
         }
 
     }
@@ -222,6 +244,12 @@
     }
 
     public void A() {
+        // CraftBukkit start
+        SheepRegrowWoolEvent event = new SheepRegrowWoolEvent((org.bukkit.entity.Sheep) this.getBukkitEntity());
+        this.world.getServer().getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) return;
+        // CraftBukkit end
         this.setSheared(false);
         if (this.isBaby()) {
             this.setAge(60);
@@ -242,7 +270,7 @@
 
         this.container.getItem(0).setData(i);
         this.container.getItem(1).setData(j);
-        ItemStack itemstack = CraftingManager.craft(this.container, ((EntitySheep) entityanimal).world);
+        ItemStack itemstack = CraftingManager.getInstance().craft(this.container, ((EntitySheep) entityanimal).world);
         int k;
 
         if (itemstack.getItem() == Items.DYE) {
@@ -263,15 +291,21 @@
     }
 
     static {
-        EnumColor[] aenumcolor = EnumColor.values();
-        int i = aenumcolor.length;
-
-        for (int j = 0; j < i; ++j) {
-            EnumColor enumcolor = aenumcolor[j];
-
-            EntitySheep.bz.put(enumcolor, c(enumcolor));
-        }
-
-        EntitySheep.bz.put(EnumColor.WHITE, new float[] { 0.9019608F, 0.9019608F, 0.9019608F});
+        EntitySheep.by.put(EnumColor.WHITE, new float[] { 1.0F, 1.0F, 1.0F});
+        EntitySheep.by.put(EnumColor.ORANGE, new float[] { 0.85F, 0.5F, 0.2F});
+        EntitySheep.by.put(EnumColor.MAGENTA, new float[] { 0.7F, 0.3F, 0.85F});
+        EntitySheep.by.put(EnumColor.LIGHT_BLUE, new float[] { 0.4F, 0.6F, 0.85F});
+        EntitySheep.by.put(EnumColor.YELLOW, new float[] { 0.9F, 0.9F, 0.2F});
+        EntitySheep.by.put(EnumColor.LIME, new float[] { 0.5F, 0.8F, 0.1F});
+        EntitySheep.by.put(EnumColor.PINK, new float[] { 0.95F, 0.5F, 0.65F});
+        EntitySheep.by.put(EnumColor.GRAY, new float[] { 0.3F, 0.3F, 0.3F});
+        EntitySheep.by.put(EnumColor.SILVER, new float[] { 0.6F, 0.6F, 0.6F});
+        EntitySheep.by.put(EnumColor.CYAN, new float[] { 0.3F, 0.5F, 0.6F});
+        EntitySheep.by.put(EnumColor.PURPLE, new float[] { 0.5F, 0.25F, 0.7F});
+        EntitySheep.by.put(EnumColor.BLUE, new float[] { 0.2F, 0.3F, 0.7F});
+        EntitySheep.by.put(EnumColor.BROWN, new float[] { 0.4F, 0.3F, 0.2F});
+        EntitySheep.by.put(EnumColor.GREEN, new float[] { 0.4F, 0.5F, 0.2F});
+        EntitySheep.by.put(EnumColor.RED, new float[] { 0.6F, 0.2F, 0.2F});
+        EntitySheep.by.put(EnumColor.BLACK, new float[] { 0.1F, 0.1F, 0.1F});
     }
 }
