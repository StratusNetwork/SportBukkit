--- a/net/minecraft/server/BlockPosition.java
+++ b/net/minecraft/server/BlockPosition.java
@@ -8,8 +8,93 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// SportBukkit start - implement Vec3
+import org.bukkit.geometry.MutableVec3;
+import org.bukkit.geometry.MutableVec3Coarse;
+import org.bukkit.geometry.Vec3Coarse;
+import org.bukkit.geometry.Vec3;
+import org.bukkit.util.ImVector;
+
 @Immutable
-public class BlockPosition extends BaseBlockPosition {
+public class BlockPosition extends BaseBlockPosition implements Vec3Coarse<BlockPosition> {
+
+    public static BlockPosition of(int x, int y, int z) {
+        if(x == 0 && y == 0 && z == 0) return ZERO;
+        return new BlockPosition(x, y, z);
+    }
+
+    public static BlockPosition of(Vec3 that) {
+        return that instanceof BlockPosition
+                ? (BlockPosition) that
+                : new BlockPosition(that.coarseX(), that.coarseY(), that.coarseZ());
+    }
+
+    public static BlockPosition copyOf(Vec3 that) {
+        return that instanceof BlockPosition && !that.isMutable()
+                ? (BlockPosition) that
+                : new BlockPosition(that.coarseX(), that.coarseY(), that.coarseZ());
+    }
+
+    @Override
+    public BlockPosition copy() {
+        return this;
+    }
+
+    @Override
+    public MutableVec3 mutableCopy() {
+        return new MutableBlockPosition(this);
+    }
+
+    @Override
+    public Vec3 fineCopy() {
+        return ImVector.cornerOf(this);
+    }
+
+    @Override
+    public Vec3 fineOf(double x, double y, double z) {
+        return ImVector.of(x, y, z);
+    }
+
+    @Override
+    public Vec3 fineZero() {
+        return ImVector.ofZero();
+    }
+
+    @Override
+    public BlockPosition coarseOf(int x, int y, int z) {
+        return new BlockPosition(x, y, z);
+    }
+
+    @Override
+    public BlockPosition coarseZero() {
+        return ZERO;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        return this == obj || (obj instanceof Vec3 && equals((Vec3) obj));
+    }
+
+    @Override
+    public int hashCode() {
+        return coarseHashCode();
+    }
+
+    @Override
+    public int coarseX() {
+        return getX();
+    }
+
+    @Override
+    public int coarseY() {
+        return getY();
+    }
+
+    @Override
+    public int coarseZ() {
+        return getZ();
+    }
+    // SportBukkit end
 
     private static final Logger b = LogManager.getLogger();
     public static final BlockPosition ZERO = new BlockPosition(0, 0, 0);
@@ -51,11 +136,11 @@
     }
 
     public BlockPosition a(BaseBlockPosition baseblockposition) {
-        return this.a(baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ());
+        return baseblockposition.getX() == 0 && baseblockposition.getY() == 0 && baseblockposition.getZ() == 0 ? this : new BlockPosition(this.getX() + baseblockposition.getX(), this.getY() + baseblockposition.getY(), this.getZ() + baseblockposition.getZ());
     }
 
     public BlockPosition b(BaseBlockPosition baseblockposition) {
-        return this.a(-baseblockposition.getX(), -baseblockposition.getY(), -baseblockposition.getZ());
+        return baseblockposition.getX() == 0 && baseblockposition.getY() == 0 && baseblockposition.getZ() == 0 ? this : new BlockPosition(this.getX() - baseblockposition.getX(), this.getY() - baseblockposition.getY(), this.getZ() - baseblockposition.getZ());
     }
 
     public BlockPosition up() {
@@ -114,23 +199,6 @@
         return i == 0 ? this : new BlockPosition(this.getX() + enumdirection.getAdjacentX() * i, this.getY() + enumdirection.getAdjacentY() * i, this.getZ() + enumdirection.getAdjacentZ() * i);
     }
 
-    public BlockPosition a(EnumBlockRotation enumblockrotation) {
-        switch (enumblockrotation) {
-        case NONE:
-        default:
-            return this;
-
-        case CLOCKWISE_90:
-            return new BlockPosition(-this.getZ(), this.getY(), this.getX());
-
-        case CLOCKWISE_180:
-            return new BlockPosition(-this.getX(), this.getY(), -this.getZ());
-
-        case COUNTERCLOCKWISE_90:
-            return new BlockPosition(this.getZ(), this.getY(), -this.getX());
-        }
-    }
-
     public BlockPosition c(BaseBlockPosition baseblockposition) {
         return new BlockPosition(this.getY() * baseblockposition.getZ() - this.getZ() * baseblockposition.getY(), this.getZ() * baseblockposition.getX() - this.getX() * baseblockposition.getZ(), this.getX() * baseblockposition.getY() - this.getY() * baseblockposition.getX());
     }
@@ -197,22 +265,22 @@
         return this;
     }
 
-    public static Iterable<BlockPosition.MutableBlockPosition> b(BlockPosition blockposition, BlockPosition blockposition1) {
+    public static Iterable<MutableBlockPosition> b(BlockPosition blockposition, BlockPosition blockposition1) {
         return b(Math.min(blockposition.getX(), blockposition1.getX()), Math.min(blockposition.getY(), blockposition1.getY()), Math.min(blockposition.getZ(), blockposition1.getZ()), Math.max(blockposition.getX(), blockposition1.getX()), Math.max(blockposition.getY(), blockposition1.getY()), Math.max(blockposition.getZ(), blockposition1.getZ()));
     }
 
-    public static Iterable<BlockPosition.MutableBlockPosition> b(final int i, final int j, final int k, final int l, final int i1, final int j1) {
+    public static Iterable<MutableBlockPosition> b(final int i, final int j, final int k, final int l, final int i1, final int j1) {
         return new Iterable() {
-            public Iterator<BlockPosition.MutableBlockPosition> iterator() {
+            public Iterator<MutableBlockPosition> iterator() {
                 return new AbstractIterator() {
-                    private BlockPosition.MutableBlockPosition b;
+                    private MutableBlockPosition b;
 
-                    protected BlockPosition.MutableBlockPosition a() {
+                    protected MutableBlockPosition a() {
                         if (this.b == null) {
-                            this.b = new BlockPosition.MutableBlockPosition(i, j, k);
+                            this.b = new MutableBlockPosition(i, j, k);
                             return this.b;
                         } else if (this.b.b == l && this.b.c == i1 && this.b.d == j1) {
-                            return (BlockPosition.MutableBlockPosition) this.endOfData();
+                            return (MutableBlockPosition) this.endOfData();
                         } else {
                             if (this.b.b < l) {
                                 ++this.b.b;
@@ -241,29 +309,29 @@
         return this.c(baseblockposition);
     }
 
-    public static final class PooledBlockPosition extends BlockPosition.MutableBlockPosition {
+    public static final class PooledBlockPosition extends MutableBlockPosition {
 
         private boolean f;
-        private static final List<BlockPosition.PooledBlockPosition> g = Lists.newArrayList();
+        private static final List<PooledBlockPosition> g = Lists.newArrayList();
 
         private PooledBlockPosition(int i, int j, int k) {
             super(i, j, k);
         }
 
-        public static BlockPosition.PooledBlockPosition s() {
+        public static PooledBlockPosition s() {
             return e(0, 0, 0);
         }
 
-        public static BlockPosition.PooledBlockPosition d(double d0, double d1, double d2) {
+        public static PooledBlockPosition d(double d0, double d1, double d2) {
             return e(MathHelper.floor(d0), MathHelper.floor(d1), MathHelper.floor(d2));
         }
 
-        public static BlockPosition.PooledBlockPosition e(int i, int j, int k) {
-            List list = BlockPosition.PooledBlockPosition.g;
+        public static PooledBlockPosition e(int i, int j, int k) {
+            List list = PooledBlockPosition.g;
 
-            synchronized (BlockPosition.PooledBlockPosition.g) {
-                if (!BlockPosition.PooledBlockPosition.g.isEmpty()) {
-                    BlockPosition.PooledBlockPosition blockposition_pooledblockposition = (BlockPosition.PooledBlockPosition) BlockPosition.PooledBlockPosition.g.remove(BlockPosition.PooledBlockPosition.g.size() - 1);
+            synchronized (PooledBlockPosition.g) {
+                if (!PooledBlockPosition.g.isEmpty()) {
+                    PooledBlockPosition blockposition_pooledblockposition = (PooledBlockPosition) PooledBlockPosition.g.remove(PooledBlockPosition.g.size() - 1);
 
                     if (blockposition_pooledblockposition != null && blockposition_pooledblockposition.f) {
                         blockposition_pooledblockposition.f = false;
@@ -273,68 +341,116 @@
                 }
             }
 
-            return new BlockPosition.PooledBlockPosition(i, j, k);
+            return new PooledBlockPosition(i, j, k);
         }
 
         public void t() {
-            List list = BlockPosition.PooledBlockPosition.g;
+            List list = PooledBlockPosition.g;
 
-            synchronized (BlockPosition.PooledBlockPosition.g) {
-                if (BlockPosition.PooledBlockPosition.g.size() < 100) {
-                    BlockPosition.PooledBlockPosition.g.add(this);
+            synchronized (PooledBlockPosition.g) {
+                if (PooledBlockPosition.g.size() < 100) {
+                    PooledBlockPosition.g.add(this);
                 }
 
                 this.f = true;
             }
         }
 
-        public BlockPosition.PooledBlockPosition f(int i, int j, int k) {
+        public PooledBlockPosition f(int i, int j, int k) {
             if (this.f) {
                 BlockPosition.b.error("PooledMutableBlockPosition modified after it was released.", new Throwable());
                 this.f = false;
             }
 
-            return (BlockPosition.PooledBlockPosition) super.c(i, j, k);
+            return (PooledBlockPosition) super.c(i, j, k);
         }
 
-        public BlockPosition.PooledBlockPosition e(double d0, double d1, double d2) {
-            return (BlockPosition.PooledBlockPosition) super.c(d0, d1, d2);
+        public PooledBlockPosition e(double d0, double d1, double d2) {
+            return (PooledBlockPosition) super.c(d0, d1, d2);
         }
 
-        public BlockPosition.PooledBlockPosition j(BaseBlockPosition baseblockposition) {
-            return (BlockPosition.PooledBlockPosition) super.g(baseblockposition);
+        public PooledBlockPosition j(BaseBlockPosition baseblockposition) {
+            return (PooledBlockPosition) super.g(baseblockposition);
         }
 
-        public BlockPosition.PooledBlockPosition d(EnumDirection enumdirection) {
-            return (BlockPosition.PooledBlockPosition) super.c(enumdirection);
+        public PooledBlockPosition d(EnumDirection enumdirection) {
+            return (PooledBlockPosition) super.c(enumdirection);
         }
 
-        public BlockPosition.PooledBlockPosition d(EnumDirection enumdirection, int i) {
-            return (BlockPosition.PooledBlockPosition) super.c(enumdirection, i);
+        public PooledBlockPosition d(EnumDirection enumdirection, int i) {
+            return (PooledBlockPosition) super.c(enumdirection, i);
         }
 
-        public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection, int i) {
+        public MutableBlockPosition c(EnumDirection enumdirection, int i) {
             return this.d(enumdirection, i);
         }
 
-        public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection) {
+        public MutableBlockPosition c(EnumDirection enumdirection) {
             return this.d(enumdirection);
         }
 
-        public BlockPosition.MutableBlockPosition g(BaseBlockPosition baseblockposition) {
+        public MutableBlockPosition g(BaseBlockPosition baseblockposition) {
             return this.j(baseblockposition);
         }
 
-        public BlockPosition.MutableBlockPosition c(double d0, double d1, double d2) {
+        public MutableBlockPosition c(double d0, double d1, double d2) {
             return this.e(d0, d1, d2);
         }
 
-        public BlockPosition.MutableBlockPosition c(int i, int j, int k) {
+        public MutableBlockPosition c(int i, int j, int k) {
             return this.f(i, j, k);
         }
     }
 
-    public static class MutableBlockPosition extends BlockPosition {
+    // SportBukkit start - implement MutableVec3
+    public static class MutableBlockPosition extends BlockPosition implements MutableVec3Coarse<BlockPosition, MutableBlockPosition> {
+        @Override
+        public Vec3 unmodifiable() {
+            return new BlockPosition(0, 0, 0) {
+                @Override public BlockPosition copy() {
+                    return MutableBlockPosition.this.copy();
+                }
+
+                @Override public int getX() {
+                    return MutableBlockPosition.this.getX();
+                }
+
+                @Override public int getY() {
+                    return MutableBlockPosition.this.getY();
+                }
+
+                @Override public int getZ() {
+                    return MutableBlockPosition.this.getZ();
+                }
+            };
+        }
+
+        @Override
+        public MutableBlockPosition setX(int x) {
+            this.b = x;
+            return this;
+        }
+
+        @Override
+        public MutableBlockPosition setY(int y) {
+            this.c = y;
+            return this;
+        }
+
+        @Override
+        public MutableBlockPosition setZ(int z) {
+            this.d = z;
+            return this;
+        }
+
+        @Override
+        public MutableBlockPosition set(int x, int y, int z) {
+            this.b = x;
+            this.c = y;
+            this.d = z;
+            return this;
+        }
+        // SportBukkit end
 
         protected int b;
         protected int c;
@@ -355,22 +471,6 @@
             this.d = k;
         }
 
-        public BlockPosition a(double d0, double d1, double d2) {
-            return super.a(d0, d1, d2).h();
-        }
-
-        public BlockPosition a(int i, int j, int k) {
-            return super.a(i, j, k).h();
-        }
-
-        public BlockPosition shift(EnumDirection enumdirection, int i) {
-            return super.shift(enumdirection, i).h();
-        }
-
-        public BlockPosition a(EnumBlockRotation enumblockrotation) {
-            return super.a(enumblockrotation).h();
-        }
-
         public int getX() {
             return this.b;
         }
@@ -383,26 +483,26 @@
             return this.d;
         }
 
-        public BlockPosition.MutableBlockPosition c(int i, int j, int k) {
+        public MutableBlockPosition c(int i, int j, int k) {
             this.b = i;
             this.c = j;
             this.d = k;
             return this;
         }
 
-        public BlockPosition.MutableBlockPosition c(double d0, double d1, double d2) {
+        public MutableBlockPosition c(double d0, double d1, double d2) {
             return this.c(MathHelper.floor(d0), MathHelper.floor(d1), MathHelper.floor(d2));
         }
 
-        public BlockPosition.MutableBlockPosition g(BaseBlockPosition baseblockposition) {
+        public MutableBlockPosition g(BaseBlockPosition baseblockposition) {
             return this.c(baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ());
         }
 
-        public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection) {
+        public MutableBlockPosition c(EnumDirection enumdirection) {
             return this.c(enumdirection, 1);
         }
 
-        public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection, int i) {
+        public MutableBlockPosition c(EnumDirection enumdirection, int i) {
             return this.c(this.b + enumdirection.getAdjacentX() * i, this.c + enumdirection.getAdjacentY() * i, this.d + enumdirection.getAdjacentZ() * i);
         }
 
