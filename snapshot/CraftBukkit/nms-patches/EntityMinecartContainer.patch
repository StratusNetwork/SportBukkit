--- a/net/minecraft/server/EntityMinecartContainer.java
+++ b/net/minecraft/server/EntityMinecartContainer.java
@@ -3,14 +3,57 @@
 import java.util.Iterator;
 import java.util.Random;
 import javax.annotation.Nullable;
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.inventory.InventoryHolder;
+// CraftBukkit end
 
 public abstract class EntityMinecartContainer extends EntityMinecartAbstract implements ITileInventory, ILootable {
 
-    private NonNullList<ItemStack> items;
+    private final NonNullList<ItemStack> items; // SportBukkit - add final
     private boolean b;
     private MinecraftKey c;
     private long d;
 
+    // CraftBukkit start
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public InventoryHolder getOwner() {
+        org.bukkit.entity.Entity cart = getBukkitEntity();
+        if(cart instanceof InventoryHolder) return (InventoryHolder) cart;
+        return null;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        return getBukkitEntity().getLocation();
+    }
+    // CraftBukkit end
+
     public EntityMinecartContainer(World world) {
         super(world);
         this.items = NonNullList.a(36, ItemStack.a);
@@ -31,7 +74,7 @@
 
     }
 
-    public boolean x_() {
+    public boolean w_() {
         Iterator iterator = this.items.iterator();
 
         ItemStack itemstack;
@@ -93,13 +136,13 @@
     }
 
     public int getMaxStackSize() {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     @Nullable
-    public Entity b(int i) {
+    public Entity c(int i) {
         this.b = false;
-        return super.b(i);
+        return super.c(i);
     }
 
     public void die() {
@@ -134,7 +177,7 @@
 
     protected void a(NBTTagCompound nbttagcompound) {
         super.a(nbttagcompound);
-        this.items = NonNullList.a(this.getSize(), ItemStack.a);
+        java.util.Collections.fill(this.items, ItemStack.a); // SportBukkit - fill list instead of creating a new one
         if (nbttagcompound.hasKeyOfType("LootTable", 8)) {
             this.c = new MinecraftKey(nbttagcompound.getString("LootTable"));
             this.d = nbttagcompound.getLong("LootTableSeed");
@@ -180,7 +223,7 @@
         return false;
     }
 
-    public void setLock(ChestLock chestlock) {}
+    public void a(ChestLock chestlock) {}
 
     public ChestLock getLock() {
         return ChestLock.a;
@@ -188,7 +231,7 @@
 
     public void f(@Nullable EntityHuman entityhuman) {
         if (this.c != null) {
-            LootTable loottable = this.world.getLootTableRegistry().a(this.c);
+            LootTable loottable = this.world.ak().a(this.c);
 
             this.c = null;
             Random random;
@@ -202,7 +245,7 @@
             LootTableInfo.a loottableinfo_a = new LootTableInfo.a((WorldServer) this.world);
 
             if (entityhuman != null) {
-                loottableinfo_a.a(entityhuman.ds());
+                loottableinfo_a.a(entityhuman.dj());
             }
 
             loottable.a(this, random, loottableinfo_a.a());
