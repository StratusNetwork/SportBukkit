--- a/net/minecraft/server/DedicatedServer.java
+++ b/net/minecraft/server/DedicatedServer.java
@@ -10,7 +10,6 @@
 import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
 import java.util.Collections;
 import java.util.List;
 import java.util.Random;
@@ -19,11 +18,21 @@
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import java.io.PrintStream;
+import org.apache.logging.log4j.Level;
+
+import org.bukkit.craftbukkit.LoggerOutputStream;
+import org.bukkit.event.server.ServerCommandEvent;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+// CraftBukkit end
+
 public class DedicatedServer extends MinecraftServer implements IMinecraftServer {
 
     private static final Logger LOGGER = LogManager.getLogger();
     private static final Pattern l = Pattern.compile("^[a-fA-F0-9]{40}$");
-    private final List<ServerCommand> serverCommandQueue = Collections.synchronizedList(Lists.newArrayList());
+    private final List<ServerCommand> serverCommandQueue = Collections.synchronizedList(Lists.<ServerCommand>newArrayList()); // CraftBukkit - fix decompile error
     private RemoteStatusListener n;
     public final RemoteControlCommandListener remoteControlCommandListener = new RemoteControlCommandListener(this);
     private RemoteControlListener p;
@@ -33,8 +42,10 @@
     private EnumGamemode t;
     private boolean u;
 
-    public DedicatedServer(File file, DataConverterManager dataconvertermanager, YggdrasilAuthenticationService yggdrasilauthenticationservice, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache) {
-        super(file, Proxy.NO_PROXY, dataconvertermanager, yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, usercache);
+    // CraftBukkit start - Signature changed
+    public DedicatedServer(joptsimple.OptionSet options, DataConverterManager dataconvertermanager, YggdrasilAuthenticationService yggdrasilauthenticationservice, MinecraftSessionService minecraftsessionservice, GameProfileRepository gameprofilerepository, UserCache usercache) {
+        super(options, Proxy.NO_PROXY, dataconvertermanager, yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, usercache);
+        // CraftBukkit end
         Thread thread = new Thread("Server Infinisleeper") {
             {
                 this.setDaemon(true);
@@ -53,16 +64,30 @@
         };
     }
 
-    protected boolean init() throws IOException {
+    public boolean init() throws IOException {
         Thread thread = new Thread("Server console handler") {
             public void run() {
-                BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
+                // CraftBukkit start
+                if (!org.bukkit.craftbukkit.Main.useConsole) {
+                    return;
+                }
+                // CraftBukkit end
 
+                jline.console.ConsoleReader bufferedreader = reader; // CraftBukkit
                 String s;
 
                 try {
-                    while (!DedicatedServer.this.isStopped() && DedicatedServer.this.isRunning() && (s = bufferedreader.readLine()) != null) {
-                        DedicatedServer.this.issueCommand(s, DedicatedServer.this);
+                    // CraftBukkit start - JLine disabling compatibility
+                    while (!isStopped() && isRunning()) {
+                        if (org.bukkit.craftbukkit.Main.useJline) {
+                            s = bufferedreader.readLine(">", null);
+                        } else {
+                            s = bufferedreader.readLine();
+                        }
+                        if (s != null && s.trim().length() > 0) { // Trim to filter lines which are just spaces
+                            issueCommand(s, DedicatedServer.this);
+                        }
+                        // CraftBukkit end
                     }
                 } catch (IOException ioexception) {
                     DedicatedServer.LOGGER.error("Exception handling console input", ioexception);
@@ -71,17 +96,38 @@
             }
         };
 
+        // CraftBukkit start - TODO: handle command-line logging arguments
+        java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+        global.setUseParentHandlers(false);
+        for (java.util.logging.Handler handler : global.getHandlers()) {
+            global.removeHandler(handler);
+        }
+        global.addHandler(new org.bukkit.craftbukkit.util.ForwardLogHandler());
+
+        final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger());
+        for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
+            if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
+                logger.removeAppender(appender);
+            }
+        }
+
+        new Thread(new org.bukkit.craftbukkit.util.TerminalConsoleWriterThread(System.out, this.reader)).start();
+
+        System.setOut(new PrintStream(new LoggerOutputStream(logger, Level.INFO), true));
+        System.setErr(new PrintStream(new LoggerOutputStream(logger, Level.WARN), true));
+        // CraftBukkit end
+
         thread.setDaemon(true);
         thread.start();
-        DedicatedServer.LOGGER.info("Starting minecraft server version 1.12-pre6");
+        DedicatedServer.LOGGER.info("Starting minecraft server version 1.11.1");
         if (Runtime.getRuntime().maxMemory() / 1024L / 1024L < 512L) {
             DedicatedServer.LOGGER.warn("To start the server with more ram, launch it as \"java -Xmx1024M -Xms1024M -jar minecraft_server.jar\"");
         }
 
         DedicatedServer.LOGGER.info("Loading properties");
-        this.propertyManager = new PropertyManager(new File("server.properties"));
+        this.propertyManager = new PropertyManager(this.options); // CraftBukkit - CLI argument support
         this.r = new EULA(new File("eula.txt"));
-        if (!this.r.a()) {
+        if (false && !this.r.a()) { // SportBukkit - disable check
             DedicatedServer.LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
             this.r.b();
             return false;
@@ -98,7 +144,7 @@
             this.setSpawnNPCs(this.propertyManager.getBoolean("spawn-npcs", true));
             this.setPVP(this.propertyManager.getBoolean("pvp", true));
             this.setAllowFlight(this.propertyManager.getBoolean("allow-flight", false));
-            this.setResourcePack(this.propertyManager.getString("resource-pack", ""), this.aO());
+            this.setResourcePack(this.propertyManager.getString("resource-pack", ""), this.aL());
             this.setMotd(this.propertyManager.getString("motd", "A Minecraft Server"));
             this.setForceGamemode(this.propertyManager.getBoolean("force-gamemode", false));
             this.setIdleTimeout(this.propertyManager.getInt("player-idle-timeout", 0));
@@ -112,7 +158,7 @@
             int i = this.propertyManager.getInt("gamemode", EnumGamemode.SURVIVAL.getId());
 
             this.t = WorldSettings.a(i);
-            DedicatedServer.LOGGER.info("Default game type: {}", this.t);
+            DedicatedServer.LOGGER.info("Default game type: {}", new Object[] { this.t});
             InetAddress inetaddress = null;
 
             if (!this.getServerIp().isEmpty()) {
@@ -125,17 +171,24 @@
 
             DedicatedServer.LOGGER.info("Generating keypair");
             this.a(MinecraftEncryption.b());
-            DedicatedServer.LOGGER.info("Starting Minecraft server on {}:{}", this.getServerIp().isEmpty() ? "*" : this.getServerIp(), Integer.valueOf(this.P()));
+            DedicatedServer.LOGGER.info("Starting Minecraft server on {}:{}", new Object[] { this.getServerIp().isEmpty() ? "*" : this.getServerIp(), Integer.valueOf(this.P())});
 
             try {
                 this.an().a(inetaddress, this.P());
+                // SportBukkit start
+                if(this.getServerConnection().localAddress().getPort() != this.getConfiguredPort()) {
+                    DedicatedServer.LOGGER.info("Bound to port " + this.getServerConnection().localAddress().getPort());
+                }
+                // SportBukkit end
             } catch (IOException ioexception) {
                 DedicatedServer.LOGGER.warn("**** FAILED TO BIND TO PORT!");
-                DedicatedServer.LOGGER.warn("The exception was: {}", ioexception.toString());
+                DedicatedServer.LOGGER.warn("The exception was: {}", new Object[] { ioexception.toString()});
                 DedicatedServer.LOGGER.warn("Perhaps a server is already running on that port?");
                 return false;
             }
 
+            this.a((PlayerList) (new DedicatedPlayerList(this))); // CraftBukkit
+
             if (!this.getOnlineMode()) {
                 DedicatedServer.LOGGER.warn("**** SERVER IS RUNNING IN OFFLINE/INSECURE MODE!");
                 DedicatedServer.LOGGER.warn("The server will make no attempt to authenticate usernames. Beware.");
@@ -143,14 +196,14 @@
                 DedicatedServer.LOGGER.warn("To change this, set \"online-mode\" to \"true\" in the server.properties file.");
             }
 
-            if (this.aS()) {
+            if (this.aP()) {
                 this.getUserCache().c();
             }
 
             if (!NameReferencingFileConverter.a(this.propertyManager)) {
                 return false;
             } else {
-                this.a((PlayerList) (new DedicatedPlayerList(this)));
+                this.convertable = new WorldLoaderServer(server.getWorldContainer(), this.getDataConverterManager()); // CraftBukkit - moved from MinecraftServer constructor
                 long j = System.nanoTime();
 
                 if (this.S() == null) {
@@ -180,6 +233,7 @@
                     worldtype = WorldType.NORMAL;
                 }
 
+                this.ay();
                 this.getEnableCommandBlock();
                 this.q();
                 this.getSnooperEnabled();
@@ -191,18 +245,12 @@
                 TileEntitySkull.a(this.getUserCache());
                 TileEntitySkull.a(this.az());
                 UserCache.a(this.getOnlineMode());
-                DedicatedServer.LOGGER.info("Preparing level \"{}\"", this.S());
+                DedicatedServer.LOGGER.info("Preparing level \"{}\"", new Object[] { this.S()});
                 this.a(this.S(), this.S(), k, worldtype, s2);
                 long i1 = System.nanoTime() - j;
                 String s3 = String.format("%.3fs", new Object[] { Double.valueOf((double) i1 / 1.0E9D)});
 
-                DedicatedServer.LOGGER.info("Done ({})! For help, type \"help\" or \"?\"", s3);
-                if (this.propertyManager.a("announce-player-achievements")) {
-                    this.worldServer[0].getGameRules().set("announceAdvancements", this.propertyManager.getBoolean("announce-player-achievements", true) ? "true" : "false");
-                    this.propertyManager.b("announce-player-achievements");
-                    this.propertyManager.savePropertiesFile();
-                }
-
+                DedicatedServer.LOGGER.info("Done ({})! For help, type \"help\" or \"?\"", new Object[] { s3});
                 if (this.propertyManager.getBoolean("enable-query", false)) {
                     DedicatedServer.LOGGER.info("Starting GS4 status listener");
                     this.n = new RemoteStatusListener(this);
@@ -213,14 +261,26 @@
                     DedicatedServer.LOGGER.info("Starting remote control listener");
                     this.p = new RemoteControlListener(this);
                     this.p.a();
+                    this.remoteConsole = new org.bukkit.craftbukkit.command.CraftRemoteConsoleCommandSender(this.remoteControlCommandListener); // CraftBukkit
+                }
+
+                // CraftBukkit start
+                if (this.server.getBukkitSpawnRadius() > -1) {
+                    DedicatedServer.LOGGER.info("'settings.spawn-radius' in bukkit.yml has been moved to 'spawn-protection' in server.properties. I will move your config for you.");
+                    this.propertyManager.properties.remove("spawn-protection");
+                    this.propertyManager.getInt("spawn-protection", this.server.getBukkitSpawnRadius());
+                    this.server.removeBukkitSpawnRadius();
+                    this.propertyManager.savePropertiesFile();
                 }
+                // CraftBukkit end
 
-                if (this.aT() > 0L) {
+                if (this.aQ() > 0L) {
                     Thread thread1 = new Thread(new ThreadWatchdog(this));
 
                     thread1.setName("Server Watchdog");
                     thread1.setDaemon(true);
                     thread1.start();
+                    watchdogThread = thread1; // SportBukkit
                 }
 
                 return true;
@@ -228,7 +288,7 @@
         }
     }
 
-    public String aO() {
+    public String aL() {
         if (this.propertyManager.a("resource-pack-hash")) {
             if (this.propertyManager.a("resource-pack-sha1")) {
                 DedicatedServer.LOGGER.warn("resource-pack-hash is deprecated and found along side resource-pack-sha1. resource-pack-hash will be ignored.");
@@ -298,13 +358,13 @@
         return crashreport;
     }
 
-    protected void B() {
-        System.exit(0);
+    public void B() {
+        System.exit(abnormalTermination ? 1 : 0);
     }
 
-    protected void D() {
+    public void D() { // CraftBukkit - fix decompile error
         super.D();
-        this.aP();
+        // this.aM(); // SportBukkit - moved to processTasks()
     }
 
     public boolean getAllowNether() {
@@ -316,8 +376,8 @@
     }
 
     public void a(MojangStatisticsGenerator mojangstatisticsgenerator) {
-        mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(this.aQ().getHasWhitelist()));
-        mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(this.aQ().getWhitelisted().length));
+        mojangstatisticsgenerator.a("whitelist_enabled", Boolean.valueOf(this.aN().getHasWhitelist()));
+        mojangstatisticsgenerator.a("whitelist_count", Integer.valueOf(this.aN().getWhitelisted().length));
         super.a(mojangstatisticsgenerator);
     }
 
@@ -327,13 +387,31 @@
 
     public void issueCommand(String s, ICommandListener icommandlistener) {
         this.serverCommandQueue.add(new ServerCommand(s, icommandlistener));
+        interrupt(); // SportBukkit
+    }
+
+    // SportBukkit start
+    @Override
+    protected void processTasks() {
+        super.processTasks();
+        processCommands();
     }
+    // SportBukkit end
 
-    public void aP() {
+    public void processCommands() { aM(); } // SportBukkit - alias
+    public void aM() {
         while (!this.serverCommandQueue.isEmpty()) {
             ServerCommand servercommand = (ServerCommand) this.serverCommandQueue.remove(0);
 
-            this.getCommandHandler().a(servercommand.source, servercommand.command);
+            // CraftBukkit start - ServerCommand for preprocessing
+            ServerCommandEvent event = new ServerCommandEvent(console, servercommand.command);
+            server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) continue;
+            servercommand = new ServerCommand(event.getCommand(), servercommand.source);
+
+            // this.getCommandHandler().a(servercommand.source, servercommand.command); // Called in dispatchServerCommand
+            server.dispatchServerCommand(console, servercommand);
+            // CraftBukkit end
         }
 
     }
@@ -346,7 +424,7 @@
         return this.propertyManager.getBoolean("use-native-transport", true);
     }
 
-    public DedicatedPlayerList aQ() {
+    public DedicatedPlayerList aN() {
         return (DedicatedPlayerList) super.getPlayerList();
     }
 
@@ -381,14 +459,14 @@
     }
 
     public int e_() {
-        return this.P();
+        return getServerConnection().localAddress().getPort(); // SportBukkit - return dynamic port, if set, otherwise configured port
     }
 
     public String f_() {
         return this.getMotd();
     }
 
-    public void aR() {
+    public void aO() {
         ServerGUI.a(this);
         this.u = true;
     }
@@ -412,9 +490,9 @@
     public boolean a(World world, BlockPosition blockposition, EntityHuman entityhuman) {
         if (world.worldProvider.getDimensionManager().getDimensionID() != 0) {
             return false;
-        } else if (this.aQ().getOPs().isEmpty()) {
+        } else if (this.aN().getOPs().isEmpty()) {
             return false;
-        } else if (this.aQ().isOp(entityhuman.getProfile())) {
+        } else if (this.aN().isOp(entityhuman.getProfile())) {
             return false;
         } else if (this.getSpawnProtection() <= 0) {
             return false;
@@ -446,6 +524,10 @@
         return this.propertyManager.getBoolean("broadcast-console-to-ops", true);
     }
 
+    public boolean ay() {
+        return this.propertyManager.getBoolean("announce-player-achievements", true);
+    }
+
     public int aE() {
         int i = this.propertyManager.getInt("max-world-size", super.aE());
 
@@ -462,7 +544,7 @@
         return this.propertyManager.getInt("network-compression-threshold", super.aG());
     }
 
-    protected boolean aS() {
+    protected boolean aP() {
         boolean flag = false;
 
         int i;
@@ -470,7 +552,7 @@
         for (i = 0; !flag && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the user banlist, retrying in a few seconds");
-                this.aV();
+                this.aS();
             }
 
             flag = NameReferencingFileConverter.a((MinecraftServer) this);
@@ -481,7 +563,7 @@
         for (i = 0; !flag1 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the ip banlist, retrying in a few seconds");
-                this.aV();
+                this.aS();
             }
 
             flag1 = NameReferencingFileConverter.b((MinecraftServer) this);
@@ -492,7 +574,7 @@
         for (i = 0; !flag2 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the op list, retrying in a few seconds");
-                this.aV();
+                this.aS();
             }
 
             flag2 = NameReferencingFileConverter.c((MinecraftServer) this);
@@ -503,7 +585,7 @@
         for (i = 0; !flag3 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the whitelist, retrying in a few seconds");
-                this.aV();
+                this.aS();
             }
 
             flag3 = NameReferencingFileConverter.d((MinecraftServer) this);
@@ -514,7 +596,7 @@
         for (i = 0; !flag4 && i <= 2; ++i) {
             if (i > 0) {
                 DedicatedServer.LOGGER.warn("Encountered a problem while converting the player save files, retrying in a few seconds");
-                this.aV();
+                this.aS();
             }
 
             flag4 = NameReferencingFileConverter.a(this, this.propertyManager);
@@ -523,7 +605,7 @@
         return flag || flag1 || flag2 || flag3 || flag4;
     }
 
-    private void aV() {
+    private void aS() {
         try {
             Thread.sleep(5000L);
         } catch (InterruptedException interruptedexception) {
@@ -531,21 +613,75 @@
         }
     }
 
-    public long aT() {
+    public long aQ() {
         return this.propertyManager.getLong("max-tick-time", TimeUnit.MINUTES.toMillis(1L));
     }
 
     public String getPlugins() {
-        return "";
-    }
+        // CraftBukkit start - Whole method
+        StringBuilder result = new StringBuilder();
+        org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+
+        result.append(server.getName());
+        result.append(" on Bukkit ");
+        result.append(server.getBukkitVersion());
+
+        if (plugins.length > 0 && server.getQueryPlugins()) {
+            result.append(": ");
+
+            for (int i = 0; i < plugins.length; i++) {
+                if (i > 0) {
+                    result.append("; ");
+                }
+
+                result.append(plugins[i].getDescription().getName());
+                result.append(" ");
+                result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+            }
+        }
 
-    public String executeRemoteCommand(String s) {
-        this.remoteControlCommandListener.clearMessages();
-        this.b.a(this.remoteControlCommandListener, s);
-        return this.remoteControlCommandListener.getMessages();
+        return result.toString();
+        // CraftBukkit end
+    }
+
+    // CraftBukkit start - fire RemoteServerCommandEvent
+    public String executeRemoteCommand(final String s) {
+        Waitable<String> waitable = new Waitable<String>() {
+            @Override
+            protected String evaluate() {
+                remoteControlCommandListener.clearMessages();
+                // Event changes start
+                RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, s);
+                server.getPluginManager().callEvent(event);
+                if (event.isCancelled()) {
+                    return "";
+                }
+                // Event change end
+                ServerCommand serverCommand = new ServerCommand(event.getCommand(), remoteControlCommandListener);
+                server.dispatchServerCommand(remoteConsole, serverCommand);
+                return remoteControlCommandListener.getMessages();
+            }
+        };
+        addMainThreadTask(waitable);
+        try {
+            return waitable.get();
+        } catch (java.util.concurrent.ExecutionException e) {
+            throw new RuntimeException("Exception processing rcon command " + s, e.getCause());
+        } catch (InterruptedException e) {
+            Thread.currentThread().interrupt(); // Maintain interrupted state
+            throw new RuntimeException("Interrupted processing rcon command " + s, e);
+        }
+        // CraftBukkit end
     }
 
     public PlayerList getPlayerList() {
-        return this.aQ();
+        return this.aN();
+    }
+
+    // CraftBukkit start
+    @Override
+    public PropertyManager getPropertyManager() {
+        return this.propertyManager;
     }
+    // CraftBukkit end
 }
