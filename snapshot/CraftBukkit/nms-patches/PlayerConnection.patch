--- a/net/minecraft/server/PlayerConnection.java
+++ b/net/minecraft/server/PlayerConnection.java
@@ -11,10 +11,64 @@
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.Set;
+
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TextComponent;
 import org.apache.commons.lang3.StringUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import java.util.HashSet;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
+import java.util.Arrays;
+
+import org.bukkit.EntityLocation;
+import org.bukkit.Location;
+import org.bukkit.PoseFlag;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.util.BungeeChatUtils;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.LazyPlayerSet;
+import org.bukkit.craftbukkit.util.Waitable;
+import org.bukkit.entity.Player;
+import org.bukkit.event.Event;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.block.SignChangeEvent;
+import org.bukkit.event.inventory.ClickType;
+import org.bukkit.event.inventory.CraftItemEvent;
+import org.bukkit.event.inventory.InventoryAction;
+import org.bukkit.event.inventory.InventoryClickEvent;
+import org.bukkit.event.inventory.InventoryCreativeEvent;
+import org.bukkit.event.inventory.InventoryType.SlotType;
+import org.bukkit.event.player.AsyncPlayerChatEvent;
+import org.bukkit.event.player.PlayerAnimationEvent;
+import org.bukkit.event.player.PlayerAttackEntityEvent;
+import org.bukkit.event.player.PlayerUseUnknownEntityEvent;
+import org.bukkit.event.player.PlayerChatEvent;
+import org.bukkit.event.player.PlayerCommandPreprocessEvent;
+import org.bukkit.event.player.PlayerInteractAtEntityEvent;
+import org.bukkit.event.player.PlayerInteractEntityEvent;
+import org.bukkit.event.player.PlayerItemHeldEvent;
+import org.bukkit.event.player.PlayerKickEvent;
+import org.bukkit.event.player.PlayerMoveEvent;
+import org.bukkit.event.player.PlayerResourcePackStatusEvent;
+import org.bukkit.event.player.PlayerSwapHandItemsEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.player.PlayerToggleFlightEvent;
+import org.bukkit.event.player.PlayerToggleSneakEvent;
+import org.bukkit.event.player.PlayerToggleSprintEvent;
+import org.bukkit.inventory.CraftingInventory;
+import org.bukkit.inventory.EquipmentSlot;
+import org.bukkit.inventory.InventoryView;
+import org.bukkit.util.NumberConversions;
+import org.bukkit.util.Vector;
+// CraftBukkit end
+
 public class PlayerConnection implements PacketListenerPlayIn, ITickable {
 
     private static final Logger LOGGER = LogManager.getLogger();
@@ -25,7 +79,10 @@
     private int f;
     private long g;
     private long h;
-    private int chatThrottle;
+    // CraftBukkit start - multithreaded fields
+    private volatile int chatThrottle;
+    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(PlayerConnection.class, "chatThrottle");
+    // CraftBukkit end
     private int j;
     private final IntHashMap<Short> k = new IntHashMap();
     private double l;
@@ -50,16 +107,97 @@
     private int E;
     private int receivedMovePackets;
     private int processedMovePackets;
+    private boolean processedDisconnect; // CraftBukkit - Added
+
+    boolean clientOnGround; // SportBukkit - only set by client
+
+    // SportBukkit start - queue packets sent before play state
+    private final java.util.Deque<Packet<?>> initialPackets = new java.util.ArrayDeque<Packet<?>>();
+    public void activate() {
+        if(networkManager.getPacketListener() == this) return;
+        networkManager.setPacketListener(this);
+    }
+
+    public void sendInitialPackets() {
+        if(networkManager.getPacketListener() != this) return;
+        while(!initialPackets.isEmpty()) {
+            final Packet<?> packet = initialPackets.remove();
+            try {
+                sendPacket(packet);
+            } catch(RuntimeException e) {
+                LOGGER.error("Exception sending initial " + packet.getClass().getName(), e);
+            }
+        }
+    }
+    // SportBukkit end
 
     public PlayerConnection(MinecraftServer minecraftserver, NetworkManager networkmanager, EntityPlayer entityplayer) {
         this.minecraftServer = minecraftserver;
         this.networkManager = networkmanager;
-        networkmanager.setPacketListener(this);
+        // networkmanager.setPacketListener(this); SportBukkit - do this later
         this.player = entityplayer;
         entityplayer.playerConnection = this;
+
+        // CraftBukkit start - add fields and methods
+        this.server = minecraftserver.server;
     }
 
-    public void e() {
+    private final org.bukkit.craftbukkit.CraftServer server;
+    private int lastTick = MinecraftServer.currentTick;
+    private int allowedPlayerTicks = 1;
+    private int lastDropTick = MinecraftServer.currentTick;
+    private int dropCount = 0;
+    private static final int SURVIVAL_PLACE_DISTANCE_SQUARED = 6 * 6;
+    private static final int CREATIVE_PLACE_DISTANCE_SQUARED = 7 * 7;
+
+    // Get position of last block hit for BlockDamageLevel.STOPPED
+    private double lastPosX = Double.MAX_VALUE;
+    private double lastPosY = Double.MAX_VALUE;
+    private double lastPosZ = Double.MAX_VALUE;
+    private float lastPitch = Float.MAX_VALUE;
+    private float lastYaw = Float.MAX_VALUE;
+    private boolean justTeleported = false;
+    private boolean hasMoved; // Spigot
+
+    private Set<PoseFlag> lastPose = java.util.EnumSet.noneOf(PoseFlag.class); // SportBukkit
+
+    public CraftPlayer getPlayer() {
+        return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
+    }
+    private final static HashSet<Integer> invalidItems = new HashSet<Integer>(java.util.Arrays.asList(8, 9, 10, 11, 26, 34, 36, 43, 51, 52, 55, 59, 62, 63, 64, 68, 71, 74, 75, 83, 90, 92, 93, 94, 104, 105, 115, 117, 118, 119, 125, 127, 132, 140, 141, 142, 144)); // TODO: Check after every update.
+    // CraftBukkit end
+
+    // SportBukkit start - velocity prediction
+    public int sendPacketWithTimestamp(Packet<?> packet) {
+        final int timestamp = (int) createKeepAliveTimestamp();
+        sendPacket(new PacketPlayOutKeepAlive(timestamp));
+        sendPacket(packet);
+        return timestamp;
+    }
+
+    public int sendRelativeVelocity(Vector impulse) {
+        return sendPacketWithTimestamp(new PacketPlayOutExplosion(
+            0, -9999, 0, 1,
+            Collections.<BlockPosition>emptyList(),
+            new Vec3D(
+                impulse.getX(),
+                impulse.getY(),
+                impulse.getZ()
+            )
+        ));
+    }
+
+    public int sendAbsoluteVelocity(Vector velocity) {
+        return sendPacketWithTimestamp(new PacketPlayOutEntityVelocity(
+            player.getId(),
+            velocity.getX(),
+            velocity.getY(),
+            velocity.getZ()
+        ));
+    }
+    // SportBukkit end
+
+    public void F_() {
         this.syncPosition();
         this.player.playerTick();
         this.player.setLocation(this.l, this.m, this.n, this.player.yaw, this.player.pitch);
@@ -67,8 +205,8 @@
         this.processedMovePackets = this.receivedMovePackets;
         if (this.B) {
             if (++this.C > 80) {
-                PlayerConnection.LOGGER.warn("{} was kicked for floating too long!", this.player.getName());
-                this.disconnect(new ChatMessage("multiplayer.disconnect.flying", new Object[0]));
+                PlayerConnection.LOGGER.warn("{} was kicked for floating too long!", new Object[] { this.player.getName()});
+                this.disconnect("Flying is not enabled on this server");
                 return;
             }
         } else {
@@ -77,17 +215,17 @@
         }
 
         this.r = this.player.getVehicle();
-        if (this.r != this.player && this.r.bC() == this.player) {
+        if (this.r != this.player && this.r.bw() == this.player) {
             this.s = this.r.locX;
             this.t = this.r.locY;
             this.u = this.r.locZ;
             this.v = this.r.locX;
             this.w = this.r.locY;
             this.x = this.r.locZ;
-            if (this.D && this.player.getVehicle().bC() == this.player) {
+            if (this.D && this.player.getVehicle().bw() == this.player) {
                 if (++this.E > 80) {
-                    PlayerConnection.LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getName());
-                    this.disconnect(new ChatMessage("multiplayer.disconnect.flying", new Object[0]));
+                    PlayerConnection.LOGGER.warn("{} was kicked for floating a vehicle too long!", new Object[] { this.player.getName()});
+                    this.disconnect("Flying is not enabled on this server");
                     return;
                 }
             } else {
@@ -103,22 +241,28 @@
         this.minecraftServer.methodProfiler.a("keepAlive");
         if ((long) this.e - this.h > 40L) {
             this.h = (long) this.e;
-            this.g = this.d();
+            this.g = this.e();
             this.f = (int) this.g;
             this.sendPacket(new PacketPlayOutKeepAlive(this.f));
         }
 
         this.minecraftServer.methodProfiler.b();
+        // CraftBukkit start
+        for (int spam; (spam = this.chatThrottle) > 0 && !chatSpamField.compareAndSet(this, spam, spam - 1); ) ;
+        /* Use thread-safe field access instead
         if (this.chatThrottle > 0) {
             --this.chatThrottle;
         }
+        */
+        // CraftBukkit end
 
         if (this.j > 0) {
             --this.j;
         }
 
-        if (this.player.J() > 0L && this.minecraftServer.getIdleTimeout() > 0 && MinecraftServer.aw() - this.player.J() > (long) (this.minecraftServer.getIdleTimeout() * 1000 * 60)) {
-            this.disconnect(new ChatMessage("multiplayer.disconnect.idling", new Object[0]));
+        if (this.player.I() > 0L && this.minecraftServer.getIdleTimeout() > 0 && MinecraftServer.aw() - this.player.I() > (long) (this.minecraftServer.getIdleTimeout() * 1000 * 60)) {
+            this.player.resetIdleTimer(); // CraftBukkit - SPIGOT-854
+            this.disconnect("You have been idle for too long!");
         }
 
     }
@@ -136,18 +280,41 @@
         return this.networkManager;
     }
 
-    public void disconnect(final IChatBaseComponent ichatbasecomponent) {
-        this.networkManager.sendPacket(new PacketPlayOutKickDisconnect(ichatbasecomponent), new GenericFutureListener() {
-            public void operationComplete(Future<? super Void> future) throws Exception {
-                PlayerConnection.this.networkManager.close(ichatbasecomponent);
+    public void disconnect(String s) {
+        // CraftBukkit start - fire PlayerKickEvent
+        if (this.processedDisconnect) {
+            return;
+        }
+        String leaveMessage = EnumChatFormat.YELLOW + this.player.getName() + " left the game.";
+
+        PlayerKickEvent event = new PlayerKickEvent(this.server.getPlayer(this.player), s, leaveMessage);
+
+        if (this.server.getServer().isRunning()) {
+            this.server.getPluginManager().callEvent(event);
+        }
+
+        if (event.isCancelled()) {
+            // Do not kick the player
+            return;
+        }
+        // Send the possibly modified leave message
+        s = event.getReason();
+        // CraftBukkit end
+        final ChatComponentText chatcomponenttext = new ChatComponentText(s);
+
+        this.networkManager.sendPacket(new PacketPlayOutKickDisconnect(chatcomponenttext), new GenericFutureListener() {
+            public void operationComplete(Future future) throws Exception { // CraftBukkit - decompile error
+                PlayerConnection.this.networkManager.close(chatcomponenttext);
             }
         }, new GenericFutureListener[0]);
+        this.a(chatcomponenttext); // CraftBukkit - fire quit instantly
         this.networkManager.stopReading();
-        Futures.getUnchecked(this.minecraftServer.postToMainThread(new Runnable() {
+        // CraftBukkit - Don't wait
+        this.minecraftServer.postToMainThread(new Runnable() {
             public void run() {
                 PlayerConnection.this.networkManager.handleDisconnection();
             }
-        }));
+        });
     }
 
     public void a(PacketPlayInSteerVehicle packetplayinsteervehicle) {
@@ -156,7 +323,7 @@
     }
 
     private static boolean b(PacketPlayInFlying packetplayinflying) {
-        return Doubles.isFinite(packetplayinflying.a(0.0D)) && Doubles.isFinite(packetplayinflying.b(0.0D)) && Doubles.isFinite(packetplayinflying.c(0.0D)) && Floats.isFinite(packetplayinflying.b(0.0F)) && Floats.isFinite(packetplayinflying.a(0.0F)) ? Math.abs(packetplayinflying.a(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.b(0.0D)) > 3.0E7D || Math.abs(packetplayinflying.c(0.0D)) > 3.0E7D : true;
+        return Doubles.isFinite(packetplayinflying.a(0.0D)) && Doubles.isFinite(packetplayinflying.b(0.0D)) && Doubles.isFinite(packetplayinflying.c(0.0D)) && Floats.isFinite(packetplayinflying.b(0.0F)) && Floats.isFinite(packetplayinflying.a(0.0F)) ? false : Math.abs(packetplayinflying.a(0.0D)) <= 3.0E7D && Math.abs(packetplayinflying.c(0.0D)) <= 3.0E7D;
     }
 
     private static boolean b(PacketPlayInVehicleMove packetplayinvehiclemove) {
@@ -166,11 +333,11 @@
     public void a(PacketPlayInVehicleMove packetplayinvehiclemove) {
         PlayerConnectionUtils.ensureMainThread(packetplayinvehiclemove, this, this.player.x());
         if (b(packetplayinvehiclemove)) {
-            this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_vehicle_movement", new Object[0]));
+            this.disconnect("Invalid move vehicle packet received");
         } else {
             Entity entity = this.player.getVehicle();
 
-            if (entity != this.player && entity.bC() == this.player && entity == this.r) {
+            if (entity != this.player && entity.bw() == this.player && entity == this.r) {
                 WorldServer worldserver = this.player.x();
                 double d0 = entity.locX;
                 double d1 = entity.locY;
@@ -186,8 +353,35 @@
                 double d9 = entity.motX * entity.motX + entity.motY * entity.motY + entity.motZ * entity.motZ;
                 double d10 = d6 * d6 + d7 * d7 + d8 * d8;
 
-                if (d10 - d9 > 100.0D && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(entity.getName()))) {
-                    PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getName(), this.player.getName(), Double.valueOf(d6), Double.valueOf(d7), Double.valueOf(d8));
+
+                // CraftBukkit start - handle custom speeds and skipped ticks
+                this.allowedPlayerTicks += (System.currentTimeMillis() / 50) - this.lastTick;
+                this.allowedPlayerTicks = Math.max(this.allowedPlayerTicks, 1);
+                this.lastTick = (int) (System.currentTimeMillis() / 50);
+
+                ++this.receivedMovePackets;
+                int i = this.receivedMovePackets - this.processedMovePackets;
+                if (i > Math.max(this.allowedPlayerTicks, 5)) {
+                    PlayerConnection.LOGGER.debug(this.player.getName() + " is sending move packets too frequently (" + i + " packets since last tick)");
+                    i = 1;
+                }
+
+                if (d10 > 0) {
+                    allowedPlayerTicks -= 1;
+                } else {
+                    allowedPlayerTicks = 20;
+                }
+                float speed;
+                if (player.abilities.isFlying) {
+                    speed = player.abilities.flySpeed * 20f;
+                } else {
+                    speed = player.abilities.walkSpeed * 10f;
+                }
+                speed *= 2f; // TODO: Get the speed of the vehicle instead of the player
+
+                if (d10 - d9 > Math.max(100.0D, Math.pow((double) (10.0F * (float) i * speed), 2)) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(entity.getName()))) {
+                // CraftBukkit end
+                    PlayerConnection.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", new Object[] { entity.getName(), this.player.getName(), Double.valueOf(d6), Double.valueOf(d7), Double.valueOf(d8)});
                     this.networkManager.sendPacket(new PacketPlayOutVehicleMove(entity));
                     return;
                 }
@@ -212,7 +406,7 @@
 
                 if (d10 > 0.0625D) {
                     flag1 = true;
-                    PlayerConnection.LOGGER.warn("{} moved wrongly!", entity.getName());
+                    PlayerConnection.LOGGER.warn("{} moved wrongly!", new Object[] { entity.getName()});
                 }
 
                 entity.setLocation(d3, d4, d5, f, f1);
@@ -224,6 +418,75 @@
                     return;
                 }
 
+                // CraftBukkit start - fire PlayerMoveEvent
+                Player player = this.getPlayer();
+                // Spigot Start
+                if ( !hasMoved )
+                {
+                    Location curPos = player.getLocation();
+                    lastPosX = curPos.getX();
+                    lastPosY = curPos.getY();
+                    lastPosZ = curPos.getZ();
+                    lastYaw = curPos.getYaw();
+                    lastPitch = curPos.getPitch();
+                    hasMoved = true;
+                }
+                // Spigot End
+                EntityLocation from = new EntityLocation(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch, player.getVelocity(), lastPose); // Get the Player's previous Event location.
+                EntityLocation to = player.getEntityLocation(); // Start off the To location as the Players current location.
+
+                // If the packet contains movement information then we update the To location with the correct XYZ.
+                to.setX(packetplayinvehiclemove.getX());
+                to.setY(packetplayinvehiclemove.getY());
+                to.setZ(packetplayinvehiclemove.getZ());
+
+
+                // If the packet contains look information then we update the To location with the correct Yaw & Pitch.
+                to.setYaw(packetplayinvehiclemove.getYaw());
+                to.setPitch(packetplayinvehiclemove.getPitch());
+
+                // Prevent 40 event-calls for less than a single pixel of movement >.>
+                double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
+                float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+
+                if ((delta > 1f / 256 || deltaAngle > 10f) && !this.player.isFrozen()) {
+                    this.lastPosX = to.getX();
+                    this.lastPosY = to.getY();
+                    this.lastPosZ = to.getZ();
+                    this.lastYaw = to.getYaw();
+                    this.lastPitch = to.getPitch();
+                    this.lastPose = to.poseFlags();
+
+                    // Skip the first time we do this
+                    if (true) { // Spigot - don't skip any move events
+                        Location oldTo = to.clone();
+                        PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
+                        this.server.getPluginManager().callEvent(event);
+
+                        // If the event is cancelled we move the player back to their old location.
+                        if (event.isCancelled()) {
+                            teleport(from);
+                            return;
+                        }
+
+                        // If a Plugin has changed the To destination then we teleport the Player
+                        // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
+                        // We only do this if the Event was not cancelled.
+                        if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
+                            this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.UNKNOWN);
+                            return;
+                        }
+
+                        // Check to see if the Players Location has some how changed during the call of the event.
+                        // This can happen due to a plugin teleporting the player instead of using .setTo()
+                        if (!from.equals(this.getPlayer().getLocation()) && this.justTeleported) {
+                            this.justTeleported = false;
+                            return;
+                        }
+                    }
+                }
+                // CraftBukkit end
+
                 this.minecraftServer.getPlayerList().d(this.player);
                 this.player.checkMovement(this.player.locX - d0, this.player.locY - d1, this.player.locZ - d2);
                 this.D = d11 >= -0.03125D && !this.minecraftServer.getAllowFlight() && !worldserver.c(entity.getBoundingBox().g(0.0625D).b(0.0D, -0.55D, 0.0D));
@@ -239,11 +502,11 @@
         PlayerConnectionUtils.ensureMainThread(packetplayinteleportaccept, this, this.player.x());
         if (packetplayinteleportaccept.a() == this.teleportAwait) {
             this.player.setLocation(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, this.player.yaw, this.player.pitch);
-            if (this.player.L()) {
+            if (this.player.K()) {
                 this.o = this.teleportPos.x;
                 this.p = this.teleportPos.y;
                 this.q = this.teleportPos.z;
-                this.player.M();
+                this.player.L();
             }
 
             this.teleportPos = null;
@@ -251,54 +514,50 @@
 
     }
 
-    public void a(PacketPlayInRecipeDisplayed packetplayinrecipedisplayed) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinrecipedisplayed, this, this.player.x());
-        if (packetplayinrecipedisplayed.a() == PacketPlayInRecipeDisplayed.a.a) {
-            this.player.F().f(packetplayinrecipedisplayed.b());
-        } else if (packetplayinrecipedisplayed.a() == PacketPlayInRecipeDisplayed.a.b) {
-            this.player.F().a(packetplayinrecipedisplayed.c());
-            this.player.F().b(packetplayinrecipedisplayed.d());
-        }
-
-    }
-
-    public void a(PacketPlayInAdvancements packetplayinadvancements) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinadvancements, this, this.player.x());
-        if (packetplayinadvancements.b() == PacketPlayInAdvancements.Status.OPENED_TAB) {
-            MinecraftKey minecraftkey = packetplayinadvancements.c();
-            Advancement advancement = this.minecraftServer.getAdvancementData().a(minecraftkey);
-
-            if (advancement != null) {
-                this.player.getAdvancementData().a(advancement);
-            }
-        }
-
-    }
-
     public void a(PacketPlayInFlying packetplayinflying) {
         PlayerConnectionUtils.ensureMainThread(packetplayinflying, this, this.player.x());
         if (b(packetplayinflying)) {
-            this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_player_movement", new Object[0]));
+            this.disconnect("Invalid move player packet received");
         } else {
             WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
 
-            if (!this.player.viewingCredits) {
+            if (!this.player.viewingCredits && !this.player.isFrozen()) { // CraftBukkit
                 if (this.e == 0) {
                     this.syncPosition();
                 }
 
+                this.player.clientTicksSinceLastAttack++; // SportBukkit
+
+                // SportBukkit start - velocity prediction
+                this.player.handleClientTick(
+                    packetplayinflying.hasPos ? new Vector(packetplayinflying.x,
+                                                           packetplayinflying.y,
+                                                           packetplayinflying.z)
+                                              : null,
+                    packetplayinflying.a()
+                );
+                // SportBukkit end
+
                 if (this.teleportPos != null) {
                     if (this.e - this.A > 20) {
                         this.A = this.e;
                         this.a(this.teleportPos.x, this.teleportPos.y, this.teleportPos.z, this.player.yaw, this.player.pitch);
                     }
-
+                    this.allowedPlayerTicks = 20; // CraftBukkit
                 } else {
                     this.A = this.e;
                     if (this.player.isPassenger()) {
                         this.player.setLocation(this.player.locX, this.player.locY, this.player.locZ, packetplayinflying.a(this.player.yaw), packetplayinflying.b(this.player.pitch));
                         this.minecraftServer.getPlayerList().d(this.player);
+                        this.allowedPlayerTicks = 20; // CraftBukkit
                     } else {
+                        // CraftBukkit - Make sure the move is valid but then reset it for plugins to modify
+                        double prevX = player.locX;
+                        double prevY = player.locY;
+                        double prevZ = player.locZ;
+                        float prevYaw = player.yaw;
+                        float prevPitch = player.pitch;
+                        // CraftBukkit end
                         double d0 = this.player.locX;
                         double d1 = this.player.locY;
                         double d2 = this.player.locZ;
@@ -323,16 +582,34 @@
                             ++this.receivedMovePackets;
                             int i = this.receivedMovePackets - this.processedMovePackets;
 
-                            if (i > 5) {
-                                PlayerConnection.LOGGER.debug("{} is sending move packets too frequently ({} packets since last tick)", this.player.getName(), Integer.valueOf(i));
+                            // CraftBukkit start - handle custom speeds and skipped ticks
+                            this.allowedPlayerTicks += (System.currentTimeMillis() / 50) - this.lastTick;
+                            this.allowedPlayerTicks = Math.max(this.allowedPlayerTicks, 1);
+                            this.lastTick = (int) (System.currentTimeMillis() / 50);
+
+                            if (i > Math.max(this.allowedPlayerTicks, 5)) {
+                                PlayerConnection.LOGGER.debug("{} is sending move packets too frequently ({} packets since last tick)", new Object[] { this.player.getName(), Integer.valueOf(i)});
                                 i = 1;
                             }
 
-                            if (!this.player.L() && (!this.player.x().getGameRules().getBoolean("disableElytraMovementCheck") || !this.player.cN())) {
-                                float f2 = this.player.cN() ? 300.0F : 100.0F;
+                            if (packetplayinflying.hasLook || d11 > 0) {
+                                allowedPlayerTicks -= 1;
+                            } else {
+                                allowedPlayerTicks = 20;
+                            }
+                            float speed;
+                            if (player.abilities.isFlying) {
+                                speed = player.abilities.flySpeed * 20f;
+                            } else {
+                                speed = player.abilities.walkSpeed * 10f;
+                            }
+
+                            if (!this.player.K() && (!this.player.x().getGameRules().getBoolean("disableElytraMovementCheck") || !this.player.cH())) {
+                                float f2 = this.player.cH() ? 300.0F : 100.0F;
 
-                                if (d11 - d10 > (double) (f2 * (float) i) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(this.player.getName()))) {
-                                    PlayerConnection.LOGGER.warn("{} moved too quickly! {},{},{}", this.player.getName(), Double.valueOf(d7), Double.valueOf(d8), Double.valueOf(d9));
+                                if (d11 - d10 > Math.max(f2, Math.pow((double) (10.0F * (float) i * speed), 2)) && (!this.minecraftServer.R() || !this.minecraftServer.Q().equals(this.player.getName()))) {
+                                // CraftBukkit end
+                                    PlayerConnection.LOGGER.warn("{} moved too quickly! {},{},{}", new Object[] { this.player.getName(), Double.valueOf(d7), Double.valueOf(d8), Double.valueOf(d9)});
                                     this.a(this.player.locX, this.player.locY, this.player.locZ, this.player.yaw, this.player.pitch);
                                     return;
                                 }
@@ -344,7 +621,7 @@
                             d8 = d5 - this.p;
                             d9 = d6 - this.q;
                             if (this.player.onGround && !packetplayinflying.a() && d8 > 0.0D) {
-                                this.player.cs();
+                                this.player.cm();
                             }
 
                             this.player.move(EnumMoveType.PLAYER, d7, d8, d9);
@@ -361,9 +638,9 @@
                             d11 = d7 * d7 + d8 * d8 + d9 * d9;
                             boolean flag1 = false;
 
-                            if (!this.player.L() && d11 > 0.0625D && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative() && this.player.playerInteractManager.getGameMode() != EnumGamemode.SPECTATOR) {
+                            if (!this.player.K() && d11 > 0.0625D && !this.player.isSleeping() && !this.player.playerInteractManager.isCreative() && this.player.playerInteractManager.getGameMode() != EnumGamemode.SPECTATOR) {
                                 flag1 = true;
-                                PlayerConnection.LOGGER.warn("{} moved wrongly!", this.player.getName());
+                                PlayerConnection.LOGGER.warn("{} moved wrongly!", new Object[] { this.player.getName()});
                             }
 
                             this.player.setLocation(d4, d5, d6, f, f1);
@@ -377,11 +654,88 @@
                                 }
                             }
 
+                            // CraftBukkit start - fire PlayerMoveEvent
+                            // Rest to old location first
+                            this.player.setLocation(prevX, prevY, prevZ, prevYaw, prevPitch);
+
+                            Player player = this.getPlayer();
+                        EntityLocation from = new EntityLocation(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch, player.getVelocity(), lastPose); // Get the Players previous Event location.
+                        EntityLocation to = player.getEntityLocation(); // Start off the To location as the Players current location.
+
+                            // If the packet contains movement information then we update the To location with the correct XYZ.
+                            if (packetplayinflying.hasPos) {
+                                to.setX(packetplayinflying.x);
+                                to.setY(packetplayinflying.y);
+                                to.setZ(packetplayinflying.z);
+                            }
+
+                            // If the packet contains look information then we update the To location with the correct Yaw & Pitch.
+                            if (packetplayinflying.hasLook) {
+                                to.setYaw(packetplayinflying.yaw);
+                                to.setPitch(packetplayinflying.pitch);
+                            }
+
+                            // Prevent 40 event-calls for less than a single pixel of movement >.>
+                            double delta = Math.pow(this.lastPosX - to.getX(), 2) + Math.pow(this.lastPosY - to.getY(), 2) + Math.pow(this.lastPosZ - to.getZ(), 2);
+                            float deltaAngle = Math.abs(this.lastYaw - to.getYaw()) + Math.abs(this.lastPitch - to.getPitch());
+
+                        // SportBukkit - Fix invalid positions kicking players
+                        if (Double.isNaN(packetplayinflying.x) || Double.isNaN(packetplayinflying.y) || Double.isNaN(packetplayinflying.z) || (packetplayinflying.hasLook && (Double.isNaN(packetplayinflying.yaw) || Double.isNaN(packetplayinflying.pitch)))) {
+                            player.teleport(to, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+                            return;
+                        }
+
+                            if ((delta > 1f / 256 || deltaAngle > 10f) && !this.player.isFrozen()) {
+                                this.lastPosX = to.getX();
+                                this.lastPosY = to.getY();
+                                this.lastPosZ = to.getZ();
+                                this.lastYaw = to.getYaw();
+                                this.lastPitch = to.getPitch();
+                            this.lastPose = to.poseFlags();
+
+                                // Skip the first time we do this
+                                if (from.getX() != Double.MAX_VALUE) {
+                                    Location oldTo = to.clone();
+                                    PlayerMoveEvent event = new PlayerMoveEvent(player, from, to);
+                                    this.server.getPluginManager().callEvent(event);
+
+                                    // If the event is cancelled we move the player back to their old location.
+                                    if (event.isCancelled()) {
+                                        teleport(from);
+                                        return;
+                                    }
+
+                                    // If a Plugin has changed the To destination then we teleport the Player
+                                    // there to avoid any 'Moved wrongly' or 'Moved too quickly' errors.
+                                    // We only do this if the Event was not cancelled.
+                                    if (!oldTo.equals(event.getTo()) && !event.isCancelled()) {
+                                        this.player.getBukkitEntity().teleport(event.getTo(), PlayerTeleportEvent.TeleportCause.UNKNOWN);
+                                        return;
+                                    }
+
+                                    // Check to see if the Players Location has some how changed during the call of the event.
+                                    // This can happen due to a plugin teleporting the player instead of using .setTo()
+                                    if (!from.equals(this.getPlayer().getLocation()) && this.justTeleported) {
+                                        this.justTeleported = false;
+                                        return;
+                                    }
+                                }
+                            }
+                            this.player.setLocation(d4, d5, d6, f, f1); // Copied from above
+                            // CraftBukkit end
+
                             this.B = d12 >= -0.03125D;
                             this.B &= !this.minecraftServer.getAllowFlight() && !this.player.abilities.canFly;
-                            this.B &= !this.player.hasEffect(MobEffects.LEVITATION) && !this.player.cN() && !worldserver.c(this.player.getBoundingBox().g(0.0625D).b(0.0D, -0.55D, 0.0D));
+                            this.B &= !this.player.hasEffect(MobEffects.LEVITATION) && !this.player.cH() && !worldserver.c(this.player.getBoundingBox().g(0.0625D).b(0.0D, -0.55D, 0.0D));
                             this.player.onGround = packetplayinflying.a();
                             this.minecraftServer.getPlayerList().d(this.player);
+                            // SportBukkit start
+                            if(clientOnGround != this.player.onGround) {
+                                clientOnGround = this.player.onGround;
+                                org.bukkit.event.player.PlayerOnGroundEvent onGroundEvent = new org.bukkit.event.player.PlayerOnGroundEvent(player, this.player.onGround);
+                                this.server.getPluginManager().callEvent(onGroundEvent);
+                            }
+                            // SportBukkit end
                             this.player.a(this.player.locY - d3, packetplayinflying.a());
                             this.o = this.player.locX;
                             this.p = this.player.locY;
@@ -394,10 +748,87 @@
     }
 
     public void a(double d0, double d1, double d2, float f, float f1) {
-        this.a(d0, d1, d2, f, f1, Collections.emptySet());
+        this.a(d0, d1, d2, f, f1, Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
     }
 
     public void a(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
+        // SportBukkit start - add cause parameter
+        this.teleportRelative(d0, d1, d2, f, f1, set, PlayerTeleportEvent.TeleportCause.UNKNOWN);
+    }
+
+    public boolean teleportRelative(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set, PlayerTeleportEvent.TeleportCause cause) {
+        // SportBukkit end
+        // CraftBukkit start - Delegate to teleport(Location)
+        Player player = this.getPlayer();
+        Location from = player.getLocation();
+
+        double x = d0;
+        double y = d1;
+        double z = d2;
+        float yaw = f;
+        float pitch = f1;
+        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X)) {
+            x += from.getX();
+        }
+        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y)) {
+            y += from.getY();
+        }
+        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Z)) {
+            z += from.getZ();
+        }
+        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y_ROT)) {
+            yaw += from.getYaw();
+        }
+        if (set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X_ROT)) {
+            pitch += from.getPitch();
+        }
+
+
+        Location to = new Location(this.getPlayer().getWorld(), x, y, z, yaw, pitch);
+        PlayerTeleportEvent event = new PlayerTeleportEvent(player, from.clone(), to.clone(), cause);
+        this.server.getPluginManager().callEvent(event);
+
+        if (event.isCancelled() || !to.equals(event.getTo())) {
+            set.clear(); // Can't relative teleport
+            to = event.isCancelled() ? event.getFrom() : event.getTo();
+            d0 = to.getX();
+            d1 = to.getY();
+            d2 = to.getZ();
+            f = to.getYaw();
+            f1 = to.getPitch();
+        }
+
+        this.internalTeleport(d0, d1, d2, f, f1, set);
+        return !event.isCancelled(); // SportBukkit - add return value
+    }
+
+    public void teleport(Location dest) {
+        internalTeleport(dest.getX(), dest.getY(), dest.getZ(), dest.getYaw(), dest.getPitch(), Collections.<PacketPlayOutPosition.EnumPlayerTeleportFlags>emptySet());
+    }
+
+    private void internalTeleport(double d0, double d1, double d2, float f, float f1, Set<PacketPlayOutPosition.EnumPlayerTeleportFlags> set) {
+        // CraftBukkit start
+        if (Float.isNaN(f)) {
+            f = 0;
+        }
+        if (Float.isNaN(f1)) {
+            f1 = 0;
+        }
+
+        if(Double.isNaN(d0)) {
+            d0 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X) ? 0 : this.o;
+        }
+
+        if(Double.isNaN(d1)) {
+            d1 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y) ? 0 : this.p;
+        }
+
+        if(Double.isNaN(d2)) {
+            d2 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Z) ? 0 : this.q;
+        }
+
+        this.justTeleported = true;
+        // CraftBukkit end
         double d3 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.X) ? this.player.locX : 0.0D;
         double d4 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Y) ? this.player.locY : 0.0D;
         double d5 = set.contains(PacketPlayOutPosition.EnumPlayerTeleportFlags.Z) ? this.player.locZ : 0.0D;
@@ -414,6 +845,14 @@
             f3 = f1 + this.player.pitch;
         }
 
+        // CraftBukkit start - update last location
+        this.lastPosX = this.teleportPos.x;
+        this.lastPosY = this.teleportPos.y;
+        this.lastPosZ = this.teleportPos.z;
+        this.lastYaw = f2;
+        this.lastPitch = f3;
+        // CraftBukkit end
+
         if (++this.teleportAwait == Integer.MAX_VALUE) {
             this.teleportAwait = 0;
         }
@@ -425,6 +864,7 @@
 
     public void a(PacketPlayInBlockDig packetplayinblockdig) {
         PlayerConnectionUtils.ensureMainThread(packetplayinblockdig, this, this.player.x());
+        if (this.player.isFrozen()) return; // CraftBukkit
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         BlockPosition blockposition = packetplayinblockdig.a();
 
@@ -434,7 +874,15 @@
             if (!this.player.isSpectator()) {
                 ItemStack itemstack = this.player.b(EnumHand.OFF_HAND);
 
-                this.player.a(EnumHand.OFF_HAND, this.player.b(EnumHand.MAIN_HAND));
+                // CraftBukkit start
+                PlayerSwapHandItemsEvent swapItemsEvent = new PlayerSwapHandItemsEvent(getPlayer(), CraftItemStack.asBukkitCopy(itemstack), CraftItemStack.asBukkitCopy(this.player.b(EnumHand.MAIN_HAND)));
+                this.server.getPluginManager().callEvent(swapItemsEvent);
+                if (swapItemsEvent.isCancelled()) {
+                    return;
+                }
+                itemstack = CraftItemStack.asNMSCopy(swapItemsEvent.getMainHandItem());
+                this.player.a(EnumHand.OFF_HAND, CraftItemStack.asNMSCopy(swapItemsEvent.getOffHandItem()));
+                // CraftBukkit end
                 this.player.a(EnumHand.MAIN_HAND, itemstack);
             }
 
@@ -442,6 +890,21 @@
 
         case DROP_ITEM:
             if (!this.player.isSpectator()) {
+                // limit how quickly items can be dropped
+                // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
+                if (this.lastDropTick != MinecraftServer.currentTick) {
+                    this.dropCount = 0;
+                    this.lastDropTick = MinecraftServer.currentTick;
+                } else {
+                    // Else we increment the drop count and check the amount.
+                    this.dropCount++;
+                    if (this.dropCount >= 20) {
+                        LOGGER.warn(this.player.getName() + " dropped their items too quickly!");
+                        this.disconnect("You dropped your items too quickly (Hacking?)");
+                        return;
+                    }
+                }
+                // CraftBukkit end
                 this.player.a(false);
             }
 
@@ -475,7 +938,15 @@
                     if (!this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
                         this.player.playerInteractManager.a(blockposition, packetplayinblockdig.b());
                     } else {
+                        // CraftBukkit start - fire PlayerInteractEvent
+                        CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, packetplayinblockdig.b(), this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
                         this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(worldserver, blockposition));
+                        // Update any tile entity data for this block
+                        TileEntity tileentity = worldserver.getTileEntity(blockposition);
+                        if (tileentity != null) {
+                            this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+                        }
+                        // CraftBukkit end
                     }
                 } else {
                     if (packetplayinblockdig.c() == PacketPlayInBlockDig.EnumPlayerDigType.STOP_DESTROY_BLOCK) {
@@ -495,10 +966,12 @@
         default:
             throw new IllegalArgumentException("Invalid player action");
         }
+        // CraftBukkit end
     }
 
     public void a(PacketPlayInUseItem packetplayinuseitem) {
         PlayerConnectionUtils.ensureMainThread(packetplayinuseitem, this, this.player.x());
+        if (this.player.isFrozen()) return; // CraftBukkit
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         EnumHand enumhand = packetplayinuseitem.c();
         ItemStack itemstack = this.player.b(enumhand);
@@ -510,8 +983,15 @@
             ChatMessage chatmessage = new ChatMessage("build.tooHigh", new Object[] { Integer.valueOf(this.minecraftServer.getMaxBuildHeight())});
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
-            this.player.playerConnection.sendPacket(new PacketPlayOutChat(chatmessage, ChatMessageType.GAME_INFO));
+            this.player.playerConnection.sendPacket(new PacketPlayOutChat(chatmessage, (byte) 2));
         } else if (this.teleportPos == null && this.player.d((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) < 64.0D && !this.minecraftServer.a(worldserver, blockposition, this.player) && worldserver.getWorldBorder().a(blockposition)) {
+            // CraftBukkit start - Check if we can actually do something over this large a distance
+            Location eyeLoc = this.getPlayer().getEyeLocation();
+            double reachDistance = NumberConversions.square(eyeLoc.getX() - blockposition.getX()) + NumberConversions.square(eyeLoc.getY() - blockposition.getY()) + NumberConversions.square(eyeLoc.getZ() - blockposition.getZ());
+            if (reachDistance > (this.getPlayer().getGameMode() == org.bukkit.GameMode.CREATIVE ? CREATIVE_PLACE_DISTANCE_SQUARED : SURVIVAL_PLACE_DISTANCE_SQUARED)) {
+                return;
+            }
+            // CraftBukkit end
             this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand, blockposition, enumdirection, packetplayinuseitem.d(), packetplayinuseitem.e(), packetplayinuseitem.f());
         }
 
@@ -521,13 +1001,52 @@
 
     public void a(PacketPlayInBlockPlace packetplayinblockplace) {
         PlayerConnectionUtils.ensureMainThread(packetplayinblockplace, this, this.player.x());
+        if (this.player.isFrozen()) return; // CraftBukkit
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         EnumHand enumhand = packetplayinblockplace.a();
         ItemStack itemstack = this.player.b(enumhand);
 
         this.player.resetIdleTimer();
         if (!itemstack.isEmpty()) {
-            this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand);
+            // CraftBukkit start
+            // Raytrace to look for 'rogue armswings'
+            float f1 = this.player.pitch;
+            float f2 = this.player.yaw;
+            double d0 = this.player.locX;
+            double d1 = this.player.locY + (double) this.player.getHeadHeight();
+            double d2 = this.player.locZ;
+            Vec3D vec3d = new Vec3D(d0, d1, d2);
+
+            float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
+            float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
+            float f5 = -MathHelper.cos(-f1 * 0.017453292F);
+            float f6 = MathHelper.sin(-f1 * 0.017453292F);
+            float f7 = f4 * f5;
+            float f8 = f3 * f5;
+            double d3 = player.playerInteractManager.getGameMode()== EnumGamemode.CREATIVE ? 5.0D : 4.5D;
+            Vec3D vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
+            MovingObjectPosition movingobjectposition = this.player.world.rayTrace(vec3d, vec3d1, false);
+
+            boolean cancelled;
+            if (movingobjectposition == null || movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
+                org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.RIGHT_CLICK_AIR, itemstack, enumhand);
+                cancelled = event.useItemInHand() == Event.Result.DENY;
+            } else {
+                if (player.playerInteractManager.firedInteract) {
+                    player.playerInteractManager.firedInteract = false;
+                    cancelled = player.playerInteractManager.interactResult;
+                } else {
+                    org.bukkit.event.player.PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(player, Action.RIGHT_CLICK_BLOCK, movingobjectposition.a(), movingobjectposition.direction, itemstack, true, enumhand);
+                    cancelled = event.useItemInHand() == Event.Result.DENY;
+                }
+            }
+
+            if (cancelled) {
+                this.player.getBukkitEntity().updateInventory(); // SPIGOT-2524
+            } else {
+                this.player.playerInteractManager.a(this.player, worldserver, itemstack, enumhand);
+            }
+            // CraftBukkit end
         }
     }
 
@@ -538,8 +1057,8 @@
             WorldServer[] aworldserver = this.minecraftServer.worldServer;
             int i = aworldserver.length;
 
-            for (int j = 0; j < i; ++j) {
-                WorldServer worldserver = aworldserver[j];
+            // CraftBukkit - use the worlds array list
+            for (WorldServer worldserver : minecraftServer.worlds) {
 
                 if (worldserver != null) {
                     entity = packetplayinspectate.a(worldserver);
@@ -552,6 +1071,8 @@
             if (entity != null) {
                 this.player.setSpectatorTarget(this.player);
                 this.player.stopRiding();
+
+                /* CraftBukkit start - replace with bukkit handling for multi-world
                 if (entity.world == this.player.world) {
                     this.player.enderTeleportTo(entity.locX, entity.locY, entity.locZ);
                 } else {
@@ -577,16 +1098,26 @@
                     this.minecraftServer.getPlayerList().b(this.player, worldserver2);
                     this.minecraftServer.getPlayerList().updateClient(this.player);
                 }
+                */
+                this.player.getBukkitEntity().teleport(entity.getBukkitEntity(), PlayerTeleportEvent.TeleportCause.SPECTATE);
+                // CraftBukkit end
             }
         }
 
     }
 
-    public void a(PacketPlayInResourcePackStatus packetplayinresourcepackstatus) {}
+    // CraftBukkit start
+    public void a(PacketPlayInResourcePackStatus packetplayinresourcepackstatus) {
+        PlayerConnectionUtils.ensureMainThread(packetplayinresourcepackstatus, this, this.player.x());
+        final PlayerResourcePackStatusEvent.Status status = PlayerResourcePackStatusEvent.Status.values()[packetplayinresourcepackstatus.status.ordinal()];
+        this.getPlayer().setResourcePackStatus(status);
+        this.server.getPluginManager().callEvent(new PlayerResourcePackStatusEvent(getPlayer(), status));
+    }
+    // CraftBukkit end
 
     public void a(PacketPlayInBoatMove packetplayinboatmove) {
         PlayerConnectionUtils.ensureMainThread(packetplayinboatmove, this, this.player.x());
-        Entity entity = this.player.bH();
+        Entity entity = this.player.bB();
 
         if (entity instanceof EntityBoat) {
             ((EntityBoat) entity).a(packetplayinboatmove.a(), packetplayinboatmove.b());
@@ -595,14 +1126,29 @@
     }
 
     public void a(IChatBaseComponent ichatbasecomponent) {
-        PlayerConnection.LOGGER.info("{} lost connection: {}", this.player.getName(), ichatbasecomponent);
+        // CraftBukkit start - Rarely it would send a disconnect line twice
+        if (this.processedDisconnect) {
+            return;
+        } else {
+            this.processedDisconnect = true;
+        }
+        // CraftBukkit end
+        PlayerConnection.LOGGER.info("{} lost connection: {}", new Object[] { this.player.getName(), ichatbasecomponent.toPlainText()});// CraftBukkit - Don't toString().
+        // CraftBukkit start - Replace vanilla quit message handling with our own.
+        /*
         this.minecraftServer.aD();
         ChatMessage chatmessage = new ChatMessage("multiplayer.player.left", new Object[] { this.player.getScoreboardDisplayName()});
 
         chatmessage.getChatModifier().setColor(EnumChatFormat.YELLOW);
         this.minecraftServer.getPlayerList().sendMessage(chatmessage);
-        this.player.s();
-        this.minecraftServer.getPlayerList().disconnect(this.player);
+        */
+
+        this.player.t();
+        String quitMessage = this.minecraftServer.getPlayerList().disconnect(this.player);
+        if ((quitMessage != null) && (quitMessage.length() > 0)) {
+            this.minecraftServer.getPlayerList().sendMessage(CraftChatMessage.fromString(quitMessage));
+        }
+        // CraftBukkit end
         if (this.minecraftServer.R() && this.player.getName().equals(this.minecraftServer.Q())) {
             PlayerConnection.LOGGER.info("Stopping singleplayer server as player logged out");
             this.minecraftServer.safeShutdown();
@@ -611,11 +1157,20 @@
     }
 
     public void sendPacket(final Packet<?> packet) {
+        // SportBukkit - queue packets sent before play state
+        if(packet == null) return;
+        if(!equals(networkManager.getPacketListener())) {
+            initialPackets.add(packet);
+            return;
+        }
+        // SportBukkit end
+        Packet replacedPacket = packet; // SportBukkit
+
         if (packet instanceof PacketPlayOutChat) {
             PacketPlayOutChat packetplayoutchat = (PacketPlayOutChat) packet;
             EntityHuman.EnumChatVisibility entityhuman_enumchatvisibility = this.player.getChatFlags();
 
-            if (entityhuman_enumchatvisibility == EntityHuman.EnumChatVisibility.HIDDEN && packetplayoutchat.c() != ChatMessageType.GAME_INFO) {
+            if (entityhuman_enumchatvisibility == EntityHuman.EnumChatVisibility.HIDDEN && packetplayoutchat.c() != 2) {
                 return;
             }
 
@@ -624,8 +1179,92 @@
             }
         }
 
+        // CraftBukkit start
+        if (packet == null) {
+            return;
+        } else if (packet instanceof PacketPlayOutSpawnPosition) {
+            PacketPlayOutSpawnPosition packet6 = (PacketPlayOutSpawnPosition) packet;
+            this.player.compassTarget = new Location(this.getPlayer().getWorld(), packet6.position.getX(), packet6.position.getY(), packet6.position.getZ());
+        }
+
+        if (packet instanceof PacketPlayOutScoreboardTeam) {
+            // Translate fake names in team info packets
+            Player viewer = this.getPlayer();
+            if (viewer != null) {
+                PacketPlayOutScoreboardTeam oldPacket = (PacketPlayOutScoreboardTeam) packet;
+
+                if (oldPacket.playerNames().size() == 1) {
+                    // Handle single player team change more efficiently
+                    String realName = oldPacket.playerNames().iterator().next();
+                    String fakeName;
+                    Player player = this.server.getPlayer(realName);
+
+                    if (player != null && (fakeName = player.getFakeName(viewer)) != null) {
+                        replacedPacket = oldPacket.replacePlayerNames(Arrays.asList(fakeName));
+                    }
+
+                } else if (oldPacket.playerNames().size() > 1) {
+                    ArrayList<String> newNames = null;
+
+                    for (String realName : oldPacket.playerNames()) {
+                        String fakeName;
+                        Player player = this.server.getPlayer(realName);
+
+                        if (player != null && (fakeName = player.getFakeName(viewer)) != null) {
+                            if (newNames == null) {
+                                // Once we've found a fake name, create the new name list
+                                // and copy the names we've already looped over. If there
+                                // are no fake names, no lists are created and the packet
+                                // is not replaced.
+                                newNames = new ArrayList<String>(oldPacket.playerNames().size());
+                                for (String priorRealName : oldPacket.playerNames()) {
+                                    if (priorRealName == realName) break;
+                                    newNames.add(priorRealName);
+                                }
+                            }
+
+                            newNames.add(fakeName);
+                        } else if (newNames != null) {
+                            newNames.add(realName);
+                        }
+                    }
+
+                    if (newNames != null) {
+                        replacedPacket = oldPacket.replacePlayerNames(newNames);
+                    }
+                }
+            }
+
+        } else if(packet instanceof PacketPlayOutEntityMetadata) {
+            // Override invisibility flag for players with canSeeInvisibles -> true
+            if(this.getPlayer().canSeeInvisibles()) {
+                PacketPlayOutEntityMetadata metadataPacket = (PacketPlayOutEntityMetadata) packet;
+                Object entity = this.player.world.entitiesById.get(metadataPacket.a);
+                if(entity instanceof EntityLiving && !(entity instanceof EntityArmorStand)) { // Don't show non-living ents or armor stands
+                    for(int i = 0; i < metadataPacket.b.size(); i++) {
+                        DataWatcher.Item flagsItem = (DataWatcher.Item) metadataPacket.b.get(i);
+                        if(Entity.FLAGS.equals(flagsItem.a()) && flagsItem.b() instanceof Byte) { // Flags at metadata index 0
+                            byte entityFlags = (Byte) flagsItem.b();
+                            if((entityFlags & 0x20) != 0) { // Invisible flag
+                                PacketPlayOutEntityMetadata replacedMetadataPacket = new PacketPlayOutEntityMetadata();
+                                replacedMetadataPacket.a = metadataPacket.a;
+                                replacedMetadataPacket.b = new ArrayList(metadataPacket.b);
+                                final DataWatcher.Item replacementItem = new DataWatcher.Item(flagsItem.entityClass, flagsItem.a(), (byte) (entityFlags & ~0x20));
+                                replacementItem.a(flagsItem.c());
+                                replacedMetadataPacket.b.set(i, replacementItem); // Clear invisibility
+
+                                replacedPacket = replacedMetadataPacket;
+                            }
+                            break;
+                        }
+                    }
+                }
+            }
+        }
+        // CraftBukkit end
+
         try {
-            this.networkManager.sendPacket(packet);
+            this.networkManager.sendPacket(replacedPacket); // SportBukkit
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Sending packet");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Packet being sent");
@@ -645,17 +1284,32 @@
 
     public void a(PacketPlayInHeldItemSlot packetplayinhelditemslot) {
         PlayerConnectionUtils.ensureMainThread(packetplayinhelditemslot, this, this.player.x());
+        if (this.player.isFrozen()) return; // CraftBukkit
         if (packetplayinhelditemslot.a() >= 0 && packetplayinhelditemslot.a() < PlayerInventory.getHotbarSize()) {
+            PlayerItemHeldEvent event = new PlayerItemHeldEvent(this.getPlayer(), this.player.inventory.itemInHandIndex, packetplayinhelditemslot.a());
+            this.server.getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                this.sendPacket(new PacketPlayOutHeldItemSlot(this.player.inventory.itemInHandIndex));
+                this.player.resetIdleTimer();
+                return;
+            }
+            // CraftBukkit end
             this.player.inventory.itemInHandIndex = packetplayinhelditemslot.a();
             this.player.resetIdleTimer();
         } else {
-            PlayerConnection.LOGGER.warn("{} tried to set an invalid carried item", this.player.getName());
+            PlayerConnection.LOGGER.warn("{} tried to set an invalid carried item", new Object[] { this.player.getName()});
+            this.disconnect("Nope!"); // CraftBukkit
         }
     }
 
     public void a(PacketPlayInChat packetplayinchat) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinchat, this, this.player.x());
-        if (this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN) {
+        // CraftBukkit start - async chat
+        boolean isSync = packetplayinchat.a().startsWith("/");
+        if (packetplayinchat.a().startsWith("/")) {
+            PlayerConnectionUtils.ensureMainThread(packetplayinchat, this, this.player.x());
+        }
+        // CraftBukkit end
+        if (this.player.dead || this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN) { // CraftBukkit - dead men tell no tales
             ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
 
             chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
@@ -668,39 +1322,251 @@
 
             for (int i = 0; i < s.length(); ++i) {
                 if (!SharedConstants.isAllowedChatCharacter(s.charAt(i))) {
-                    this.disconnect(new ChatMessage("multiplayer.disconnect.illegal_characters", new Object[0]));
+                    // CraftBukkit start - threadsafety
+                    if (!isSync) {
+                        Waitable waitable = new Waitable() {
+                            @Override
+                            protected Object evaluate() {
+                                PlayerConnection.this.disconnect("Illegal characters in chat");
+                                return null;
+                            }
+                        };
+
+                        this.minecraftServer.addMainThreadTask(waitable); // SportBukkit
+
+                        try {
+                            waitable.get();
+                        } catch (InterruptedException e) {
+                            Thread.currentThread().interrupt();
+                        } catch (ExecutionException e) {
+                            throw new RuntimeException(e);
+                        }
+                    } else {
+                        this.disconnect("Illegal characters in chat");
+                    }
+                    // CraftBukkit end
                     return;
                 }
             }
 
-            if (s.startsWith("/")) {
-                this.handleCommand(s);
+            // CraftBukkit start
+            if (isSync) {
+                try {
+                    this.minecraftServer.server.playerCommandState = true;
+                    this.handleCommand(s);
+                } finally {
+                    this.minecraftServer.server.playerCommandState = false;
+                }
+            } else if (s.isEmpty()) {
+                LOGGER.warn(this.player.getName() + " tried to send an empty message");
+            } else if (getPlayer().isConversing()) {
+                getPlayer().acceptConversationInput(s);
+            } else if (this.player.getChatFlags() == EntityHuman.EnumChatVisibility.SYSTEM) { // Re-add "Command Only" flag check
+                ChatMessage chatmessage = new ChatMessage("chat.cannotSend", new Object[0]);
+
+                chatmessage.getChatModifier().setColor(EnumChatFormat.RED);
+                this.sendPacket(new PacketPlayOutChat(chatmessage));
+            } else if (true) {
+                this.chat(s, true);
+                // CraftBukkit end - the below is for reference. :)
             } else {
                 ChatMessage chatmessage1 = new ChatMessage("chat.type.text", new Object[] { this.player.getScoreboardDisplayName(), s});
 
                 this.minecraftServer.getPlayerList().sendMessage(chatmessage1, false);
             }
 
-            this.chatThrottle += 20;
-            if (this.chatThrottle > 200 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) {
-                this.disconnect(new ChatMessage("disconnect.spam", new Object[0]));
+            // CraftBukkit start - replaced with thread safe throttle
+            // this.chatThrottle += 20;
+            if (chatSpamField.addAndGet(this, 20) > 200 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) {
+                if (!isSync) {
+                    Waitable waitable = new Waitable() {
+                        @Override
+                        protected Object evaluate() {
+                            PlayerConnection.this.disconnect("disconnect.spam");
+                            return null;
+                        }
+                    };
+
+                    this.minecraftServer.addMainThreadTask(waitable); // SportBukkit
+
+                    try {
+                        waitable.get();
+                    } catch (InterruptedException e) {
+                        Thread.currentThread().interrupt();
+                    } catch (ExecutionException e) {
+                        throw new RuntimeException(e);
+                    }
+                } else {
+                    this.disconnect("disconnect.spam");
+                }
+                // CraftBukkit end
             }
 
         }
     }
 
-    private void handleCommand(String s) {
-        this.minecraftServer.getCommandHandler().a(this.player, s);
+    // CraftBukkit start - add method
+    public void chat(String s, boolean async) {
+        if (s.isEmpty() || this.player.getChatFlags() == EntityHuman.EnumChatVisibility.HIDDEN) {
+            return;
+        }
+
+        if (!async && s.startsWith("/")) {
+            this.handleCommand(s);
+        } else if (this.player.getChatFlags() == EntityHuman.EnumChatVisibility.SYSTEM) {
+            // Do nothing, this is coming from a plugin
+        } else {
+            Player player = this.getPlayer();
+            AsyncPlayerChatEvent event = new AsyncPlayerChatEvent(async, player, s, new LazyPlayerSet(minecraftServer));
+            this.server.getPluginManager().callEvent(event);
+
+            if (PlayerChatEvent.getHandlerList().getRegisteredListeners().length != 0) {
+                // Evil plugins still listening to deprecated event
+                final PlayerChatEvent queueEvent = new PlayerChatEvent(player, event.getMessage(), event.getFormat(), event.getRecipients());
+                queueEvent.setCancelled(event.isCancelled());
+                Waitable waitable = new Waitable() {
+                    @Override
+                    protected Object evaluate() {
+                        org.bukkit.Bukkit.getPluginManager().callEvent(queueEvent);
+
+                        if (queueEvent.isCancelled()) {
+                            return null;
+                        }
+
+                        String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
+                        PlayerConnection.this.minecraftServer.console.sendMessage(message);
+                        if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
+                            for (Object player : PlayerConnection.this.minecraftServer.getPlayerList().players) {
+                                ((EntityPlayer) player).sendMessage(CraftChatMessage.fromString(message));
+                            }
+                        } else {
+                            for (Player player : queueEvent.getRecipients()) {
+                                player.sendMessage(message);
+                            }
+                        }
+                        return null;
+                    }};
+                if (async) {
+                    minecraftServer.addMainThreadTask(waitable); // SportBukkit
+                } else {
+                    waitable.run();
+                }
+                try {
+                    waitable.get();
+                } catch (InterruptedException e) {
+                    Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
+                } catch (ExecutionException e) {
+                    throw new RuntimeException("Exception processing chat event", e.getCause());
+                }
+            } else {
+                if (event.isCancelled()) {
+                    return;
+                }
+
+                s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
+                minecraftServer.console.sendMessage(s);
+                if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
+                    for (Object recipient : minecraftServer.getPlayerList().players) {
+                        ((EntityPlayer) recipient).sendMessage(CraftChatMessage.fromString(s));
+                    }
+                } else {
+                    for (Player recipient : event.getRecipients()) {
+                        recipient.sendMessage(s);
+                    }
+                }
+            }
+        }
+    }
+    // CraftBukkit end
+
+   private void handleCommand(String s) {
+       // CraftBukkit start - whole method
+        this.LOGGER.info(this.player.getName() + " issued server command: " + s);
+
+        CraftPlayer player = this.getPlayer();
+
+        PlayerCommandPreprocessEvent event = new PlayerCommandPreprocessEvent(player, s, new LazyPlayerSet(minecraftServer));
+        this.server.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) {
+            return;
+        }
+
+        try {
+            if (this.server.dispatchCommand(event.getPlayer(), event.getMessage().substring(1))) {
+                return;
+            }
+        } catch (org.bukkit.command.CommandException ex) {
+            player.sendMessage(org.bukkit.ChatColor.RED + "An internal error occurred while attempting to perform this command");
+            java.util.logging.Logger.getLogger(PlayerConnection.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
+            return;
+        }
+        // this.minecraftServer.getCommandHandler().a(this.player, s);
+        // CraftBukkit end
     }
 
     public void a(PacketPlayInArmAnimation packetplayinarmanimation) {
         PlayerConnectionUtils.ensureMainThread(packetplayinarmanimation, this, this.player.x());
+        if (this.player.isFrozen()) return; // CraftBukkit
         this.player.resetIdleTimer();
+        // CraftBukkit start - Raytrace to look for 'rogue armswings'
+        float f1 = this.player.pitch;
+        float f2 = this.player.yaw;
+        double d0 = this.player.locX;
+        double d1 = this.player.locY + (double) this.player.getHeadHeight();
+        double d2 = this.player.locZ;
+        Vec3D vec3d = new Vec3D(d0, d1, d2);
+
+        float f3 = MathHelper.cos(-f2 * 0.017453292F - 3.1415927F);
+        float f4 = MathHelper.sin(-f2 * 0.017453292F - 3.1415927F);
+        float f5 = -MathHelper.cos(-f1 * 0.017453292F);
+        float f6 = MathHelper.sin(-f1 * 0.017453292F);
+        float f7 = f4 * f5;
+        float f8 = f3 * f5;
+        double d3 = player.playerInteractManager.getGameMode()== EnumGamemode.CREATIVE ? 5.0D : 4.5D;
+        Vec3D vec3d1 = vec3d.add((double) f7 * d3, (double) f6 * d3, (double) f8 * d3);
+        MovingObjectPosition movingobjectposition = this.player.world.rayTrace(vec3d, vec3d1, false);
+
+        if (movingobjectposition == null || movingobjectposition.type != MovingObjectPosition.EnumMovingObjectType.BLOCK) {
+            CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_AIR, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
+        }
+
+        // Arm swing animation
+        PlayerAnimationEvent event = new PlayerAnimationEvent(this.getPlayer());
+        this.server.getPluginManager().callEvent(event);
+
+        if (event.isCancelled()) return;
+        // CraftBukkit end
         this.player.a(packetplayinarmanimation.a());
     }
 
     public void a(PacketPlayInEntityAction packetplayinentityaction) {
         PlayerConnectionUtils.ensureMainThread(packetplayinentityaction, this, this.player.x());
+        // CraftBukkit start
+        if (this.player.dead) return;
+        switch (packetplayinentityaction.b()) {
+            case START_SNEAKING:
+            case STOP_SNEAKING:
+                PlayerToggleSneakEvent event = new PlayerToggleSneakEvent(this.getPlayer(), packetplayinentityaction.b() == PacketPlayInEntityAction.EnumPlayerAction.START_SNEAKING);
+                this.server.getPluginManager().callEvent(event);
+                CraftEventFactory.callPlayerPoseFlagEvent(this.getPlayer(), PoseFlag.SNEAKING, event.isSneaking(), event);
+
+                if (event.isCancelled()) {
+                    return;
+                }
+                break;
+            case START_SPRINTING:
+            case STOP_SPRINTING:
+                PlayerToggleSprintEvent e2 = new PlayerToggleSprintEvent(this.getPlayer(), packetplayinentityaction.b() == PacketPlayInEntityAction.EnumPlayerAction.START_SPRINTING);
+                this.server.getPluginManager().callEvent(e2);
+                CraftEventFactory.callPlayerPoseFlagEvent(this.getPlayer(), PoseFlag.SPRINTING, e2.isSprinting(), e2);
+
+                if (e2.isCancelled()) {
+                    return;
+                }
+                break;
+        }
+        // CraftBukkit end
         this.player.resetIdleTimer();
         IJumpable ijumpable;
 
@@ -729,38 +1595,38 @@
             break;
 
         case START_RIDING_JUMP:
-            if (this.player.bH() instanceof IJumpable) {
-                ijumpable = (IJumpable) this.player.bH();
+            if (this.player.bB() instanceof IJumpable) {
+                ijumpable = (IJumpable) this.player.bB();
                 int i = packetplayinentityaction.c();
 
                 if (ijumpable.a() && i > 0) {
-                    ijumpable.b_(i);
+                    ijumpable.b(i);
                 }
             }
             break;
 
         case STOP_RIDING_JUMP:
-            if (this.player.bH() instanceof IJumpable) {
-                ijumpable = (IJumpable) this.player.bH();
-                ijumpable.r_();
+            if (this.player.bB() instanceof IJumpable) {
+                ijumpable = (IJumpable) this.player.bB();
+                ijumpable.q_();
             }
             break;
 
         case OPEN_INVENTORY:
-            if (this.player.bH() instanceof EntityHorseAbstract) {
-                ((EntityHorseAbstract) this.player.bH()).c((EntityHuman) this.player);
+            if (this.player.bB() instanceof EntityHorseAbstract) {
+                ((EntityHorseAbstract) this.player.bB()).f((EntityHuman) this.player);
             }
             break;
 
         case START_FALL_FLYING:
-            if (!this.player.onGround && this.player.motY < 0.0D && !this.player.cN() && !this.player.isInWater()) {
+            if (!this.player.onGround && this.player.motY < 0.0D && !this.player.cH() && !this.player.isInWater()) {
                 ItemStack itemstack = this.player.getEquipment(EnumItemSlot.CHEST);
 
                 if (itemstack.getItem() == Items.cS && ItemElytra.d(itemstack)) {
-                    this.player.N();
+                    this.player.M();
                 }
             } else {
-                this.player.O();
+                this.player.N();
             }
             break;
 
@@ -772,6 +1638,7 @@
 
     public void a(PacketPlayInUseEntity packetplayinuseentity) {
         PlayerConnectionUtils.ensureMainThread(packetplayinuseentity, this, this.player.x());
+        if (this.player.isFrozen()) return; // CraftBukkit
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         Entity entity = packetplayinuseentity.a((World) worldserver);
 
@@ -787,24 +1654,87 @@
             if (this.player.h(entity) < d0) {
                 EnumHand enumhand;
 
+                ItemStack itemInHand = this.player.b(packetplayinuseentity.b() == null ? EnumHand.MAIN_HAND : packetplayinuseentity.b()); // CraftBukkit
+
+                if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT
+                        || packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
+                    // CraftBukkit start
+                    boolean triggerLeashUpdate = itemInHand != null && itemInHand.getItem() == Items.LEAD && entity instanceof EntityInsentient;
+                    Item origItem = this.player.inventory.getItemInHand() == null ? null : this.player.inventory.getItemInHand().getItem();
+                    PlayerInteractEntityEvent event;
+                    if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
+                        event = new PlayerInteractEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), (packetplayinuseentity.b() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
+                    } else {
+                        Vec3D target = packetplayinuseentity.c();
+                        event = new PlayerInteractAtEntityEvent((Player) this.getPlayer(), entity.getBukkitEntity(), new org.bukkit.util.Vector(target.x, target.y, target.z), (packetplayinuseentity.b() == EnumHand.OFF_HAND) ? EquipmentSlot.OFF_HAND : EquipmentSlot.HAND);
+                    }
+                    this.server.getPluginManager().callEvent(event);
+
+                    if (triggerLeashUpdate && (event.isCancelled() || this.player.inventory.getItemInHand() == null || this.player.inventory.getItemInHand().getItem() != Items.LEAD)) {
+                        // Refresh the current leash state
+                        this.sendPacket(new PacketPlayOutAttachEntity(entity, ((EntityInsentient) entity).getLeashHolder()));
+                    }
+
+                    if (event.isCancelled() || this.player.inventory.getItemInHand() == null || this.player.inventory.getItemInHand().getItem() != origItem) {
+                        // Refresh the current entity metadata
+                        this.sendPacket(new PacketPlayOutEntityMetadata(entity.getId(), entity.datawatcher, true));
+                    }
+
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
+                }
+
                 if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT) {
                     enumhand = packetplayinuseentity.b();
                     this.player.a(entity, enumhand);
+                    // CraftBukkit start
+                    if (!itemInHand.isEmpty() && itemInHand.getCount() <= -1) {
+                        this.player.updateInventory(this.player.activeContainer);
+                    }
+                    // CraftBukkit end
                 } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
                     enumhand = packetplayinuseentity.b();
                     entity.a(this.player, packetplayinuseentity.c(), enumhand);
+                    // CraftBukkit start
+                    if (!itemInHand.isEmpty() && itemInHand.getCount() <= -1) {
+                        this.player.updateInventory(this.player.activeContainer);
+                    }
+                    // CraftBukkit end
                 } else if (packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK) {
-                    if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb || entity instanceof EntityArrow || entity == this.player) {
-                        this.disconnect(new ChatMessage("multiplayer.disconnect.invalid_entity_attacked", new Object[0]));
+                    if (entity instanceof EntityItem || entity instanceof EntityExperienceOrb || entity instanceof EntityArrow || (entity == this.player && !player.isSpectator())) { // CraftBukkit
+                        this.disconnect("Attempting to attack an invalid entity");
                         this.minecraftServer.warning("Player " + this.player.getName() + " tried to attack an invalid entity");
                         return;
                     }
 
+                    // CraftBukkit start
+                    PlayerAttackEntityEvent event = new PlayerAttackEntityEvent(this.getPlayer(), entity.getBukkitEntity());
+                    this.server.getPluginManager().callEvent(event);
+                    if(event.isCancelled()) return;
+                    // CraftBukkit end
+
                     this.player.attack(entity);
+
+                    // CraftBukkit start
+                    if (!itemInHand.isEmpty() && itemInHand.getCount() <= -1) {
+                        this.player.updateInventory(this.player.activeContainer);
+                    }
+                    // CraftBukkit end
                 }
             }
         }
-
+        // SportBukkit start - fire event
+        else {
+            this.server.getPluginManager().callEvent(new PlayerUseUnknownEntityEvent(
+                this.getPlayer(),
+                packetplayinuseentity.getEntityId(),
+                packetplayinuseentity.a() == PacketPlayInUseEntity.EnumEntityUseAction.ATTACK,
+                packetplayinuseentity.b() == EnumHand.MAIN_HAND ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND
+            ));
+        }
+        // SportBukkit end
     }
 
     public void a(PacketPlayInClientCommand packetplayinclientcommand) {
@@ -816,8 +1746,8 @@
         case PERFORM_RESPAWN:
             if (this.player.viewingCredits) {
                 this.player.viewingCredits = false;
-                this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, true);
-                CriterionTriggers.u.a(this.player, DimensionManager.THE_END, DimensionManager.OVERWORLD);
+                // this.player = this.minecraftServer.getPlayerList().moveToWorld(this.player, 0, true);
+                this.minecraftServer.getPlayerList().changeDimension(this.player, 0, PlayerTeleportEvent.TeleportCause.END_PORTAL); // CraftBukkit - reroute logic through custom portal management
             } else {
                 if (this.player.getHealth() > 0.0F) {
                     return;
@@ -833,20 +1763,31 @@
 
         case REQUEST_STATS:
             this.player.getStatisticManager().a(this.player);
+            break;
+
+        case OPEN_INVENTORY_ACHIEVEMENT:
+            this.player.b((Statistic) AchievementList.f);
         }
 
     }
 
     public void a(PacketPlayInCloseWindow packetplayinclosewindow) {
         PlayerConnectionUtils.ensureMainThread(packetplayinclosewindow, this, this.player.x());
-        this.player.r();
+
+        if (this.player.isFrozen()) return; // CraftBukkit
+        CraftEventFactory.handleInventoryCloseEvent(this.player); // CraftBukkit
+
+        this.player.s();
     }
 
     public void a(PacketPlayInWindowClick packetplayinwindowclick) {
         PlayerConnectionUtils.ensureMainThread(packetplayinwindowclick, this, this.player.x());
+        if (this.player.isFrozen()) return; // CraftBukkit
+        if(packetplayinwindowclick.b() >= 0 && this.player.activeContainer.getSlot(packetplayinwindowclick.b()) == null) return; // SportBukkit - ignore packets with invalid slot
         this.player.resetIdleTimer();
         if (this.player.activeContainer.windowId == packetplayinwindowclick.a() && this.player.activeContainer.c(this.player)) {
-            if (this.player.isSpectator()) {
+            boolean cancelled = this.player.isSpectator(); // CraftBukkit - see below if
+            if (false/*this.player.isSpectator()*/) { // CraftBukkit
                 NonNullList nonnulllist = NonNullList.a();
 
                 for (int i = 0; i < this.player.activeContainer.c.size(); ++i) {
@@ -855,8 +1796,281 @@
 
                 this.player.a(this.player.activeContainer, nonnulllist);
             } else {
-                ItemStack itemstack = this.player.activeContainer.a(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
+                // CraftBukkit start - Call InventoryClickEvent
+                if (packetplayinwindowclick.b() < -1 && packetplayinwindowclick.b() != -999) {
+                    return;
+                }
 
+                InventoryView inventory = this.player.activeContainer.getBukkitView();
+                SlotType type = CraftInventoryView.getSlotType(inventory, packetplayinwindowclick.b());
+
+                InventoryClickEvent event;
+                ClickType click = ClickType.UNKNOWN;
+                InventoryAction action = InventoryAction.UNKNOWN;
+
+                ItemStack itemstack = ItemStack.a;
+
+                switch (packetplayinwindowclick.f()) {
+                    case PICKUP:
+                        if (packetplayinwindowclick.c() == 0) {
+                            click = ClickType.LEFT;
+                        } else if (packetplayinwindowclick.c() == 1) {
+                            click = ClickType.RIGHT;
+                        }
+                        if (packetplayinwindowclick.c() == 0 || packetplayinwindowclick.c() == 1) {
+                            action = InventoryAction.NOTHING; // Don't want to repeat ourselves
+                            if (packetplayinwindowclick.b() == -999) {
+                                if (!player.inventory.getCarried().isEmpty()) {
+                                    action = packetplayinwindowclick.c() == 0 ? InventoryAction.DROP_ALL_CURSOR : InventoryAction.DROP_ONE_CURSOR;
+                                }
+                            } else if (packetplayinwindowclick.b() < 0)  {
+                                action = InventoryAction.NOTHING;
+                            } else {
+                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
+                                if (slot != null) {
+                                    ItemStack clickedItem = slot.getItem();
+                                    ItemStack cursor = player.inventory.getCarried();
+                                    if (clickedItem.isEmpty()) {
+                                        if (!cursor.isEmpty()) {
+                                            action = packetplayinwindowclick.c() == 0 ? InventoryAction.PLACE_ALL : InventoryAction.PLACE_ONE;
+                                        }
+                                    } else if (slot.isAllowed(player)) {
+                                        if (cursor.isEmpty()) {
+                                            action = packetplayinwindowclick.c() == 0 ? InventoryAction.PICKUP_ALL : InventoryAction.PICKUP_HALF;
+                                        } else if (slot.isAllowed(cursor)) {
+                                            if (clickedItem.doMaterialsMatch(cursor) && ItemStack.equals(clickedItem, cursor)) {
+                                                int toPlace = packetplayinwindowclick.c() == 0 ? cursor.getCount() : 1;
+                                                toPlace = Math.min(toPlace, clickedItem.getMaxStackSize() - clickedItem.getCount());
+                                                toPlace = Math.min(toPlace, slot.inventory.getMaxStackSize() - clickedItem.getCount());
+                                                if (toPlace == 1) {
+                                                    action = InventoryAction.PLACE_ONE;
+                                                } else if (toPlace == cursor.getCount()) {
+                                                    action = InventoryAction.PLACE_ALL;
+                                                } else if (toPlace < 0) {
+                                                    action = toPlace != -1 ? InventoryAction.PICKUP_SOME : InventoryAction.PICKUP_ONE; // this happens with oversized stacks
+                                                } else if (toPlace != 0) {
+                                                    action = InventoryAction.PLACE_SOME;
+                                                }
+                                            } else if (cursor.getCount() <= slot.getMaxStackSize()) {
+                                                action = InventoryAction.SWAP_WITH_CURSOR;
+                                            }
+                                        } else if (cursor.getItem() == clickedItem.getItem() && (!cursor.usesData() || cursor.getData() == clickedItem.getData()) && ItemStack.equals(cursor, clickedItem)) {
+                                            if (clickedItem.getCount() >= 0) {
+                                                if (clickedItem.getCount() + cursor.getCount() <= cursor.getMaxStackSize()) {
+                                                    // As of 1.5, this is result slots only
+                                                    action = InventoryAction.PICKUP_ALL;
+                                                }
+                                            }
+                                        }
+                                    }
+                                }
+                            }
+                        }
+                        break;
+                    // TODO check on updates
+                    case QUICK_MOVE:
+                        if (packetplayinwindowclick.c() == 0) {
+                            click = ClickType.SHIFT_LEFT;
+                        } else if (packetplayinwindowclick.c() == 1) {
+                            click = ClickType.SHIFT_RIGHT;
+                        }
+                        if (packetplayinwindowclick.c() == 0 || packetplayinwindowclick.c() == 1) {
+                            if (packetplayinwindowclick.b() < 0) {
+                                action = InventoryAction.NOTHING;
+                            } else {
+                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
+                                if (slot != null && slot.isAllowed(this.player) && slot.hasItem()) {
+                                    action = InventoryAction.MOVE_TO_OTHER_INVENTORY;
+                                } else {
+                                    action = InventoryAction.NOTHING;
+                                }
+                            }
+                        }
+                        break;
+                    case SWAP:
+                        if (packetplayinwindowclick.c() >= 0 && packetplayinwindowclick.c() < 9) {
+                            click = ClickType.NUMBER_KEY;
+                            Slot clickedSlot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
+                            if (clickedSlot.isAllowed(player)) {
+                                ItemStack hotbar = this.player.inventory.getItem(packetplayinwindowclick.c());
+                                boolean canCleanSwap = hotbar.isEmpty() || (clickedSlot.inventory == player.inventory && clickedSlot.isAllowed(hotbar)); // the slot will accept the hotbar item
+                                if (clickedSlot.hasItem()) {
+                                    if (canCleanSwap) {
+                                        action = InventoryAction.HOTBAR_SWAP;
+                                    } else {
+                                        int firstEmptySlot = player.inventory.getFirstEmptySlotIndex();
+                                        if (firstEmptySlot > -1) {
+                                            action = InventoryAction.HOTBAR_MOVE_AND_READD;
+                                        } else {
+                                            action = InventoryAction.NOTHING; // This is not sane! Mojang: You should test for other slots of same type
+                                        }
+                                    }
+                                } else if (!clickedSlot.hasItem() && !hotbar.isEmpty() && clickedSlot.isAllowed(hotbar)) {
+                                    action = InventoryAction.HOTBAR_SWAP;
+                                } else {
+                                    action = InventoryAction.NOTHING;
+                                }
+                            } else {
+                                action = InventoryAction.NOTHING;
+                            }
+                        }
+                        break;
+                    case CLONE:
+                        if (packetplayinwindowclick.c() == 2) {
+                            click = ClickType.MIDDLE;
+                            if (packetplayinwindowclick.b() == -999) {
+                                action = InventoryAction.NOTHING;
+                            } else {
+                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
+                                if (slot != null && slot.hasItem() && player.abilities.canInstantlyBuild && player.inventory.getCarried().isEmpty()) {
+                                    action = InventoryAction.CLONE_STACK;
+                                } else {
+                                    action = InventoryAction.NOTHING;
+                                }
+                            }
+                        } else {
+                            click = ClickType.UNKNOWN;
+                            action = InventoryAction.UNKNOWN;
+                        }
+                        break;
+                    case THROW:
+                        if (packetplayinwindowclick.b() >= 0) {
+                            if (packetplayinwindowclick.c() == 0) {
+                                click = ClickType.DROP;
+                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
+                                if (slot != null && slot.hasItem() && slot.isAllowed(player) && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item.getItemOf(Blocks.AIR)) {
+                                    action = InventoryAction.DROP_ONE_SLOT;
+                                } else {
+                                    action = InventoryAction.NOTHING;
+                                }
+                            } else if (packetplayinwindowclick.c() == 1) {
+                                click = ClickType.CONTROL_DROP;
+                                Slot slot = this.player.activeContainer.getSlot(packetplayinwindowclick.b());
+                                if (slot != null && slot.hasItem() && slot.isAllowed(player) && !slot.getItem().isEmpty() && slot.getItem().getItem() != Item.getItemOf(Blocks.AIR)) {
+                                    action = InventoryAction.DROP_ALL_SLOT;
+                                } else {
+                                    action = InventoryAction.NOTHING;
+                                }
+                            }
+                        } else {
+                            // Sane default (because this happens when they are holding nothing. Don't ask why.)
+                            click = ClickType.LEFT;
+                            if (packetplayinwindowclick.c() == 1) {
+                                click = ClickType.RIGHT;
+                            }
+                            action = InventoryAction.NOTHING;
+                        }
+                        break;
+                    case QUICK_CRAFT:
+                        itemstack = this.player.activeContainer.a(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
+                        break;
+                    case PICKUP_ALL:
+                        click = ClickType.DOUBLE_CLICK;
+                        action = InventoryAction.NOTHING;
+                        if (packetplayinwindowclick.b() >= 0 && !this.player.inventory.getCarried().isEmpty()) {
+                            ItemStack cursor = this.player.inventory.getCarried();
+                            action = InventoryAction.NOTHING;
+                            // Quick check for if we have any of the item
+                            if (inventory.getTopInventory().contains(org.bukkit.Material.getMaterial(Item.getId(cursor.getItem()))) || inventory.getBottomInventory().contains(org.bukkit.Material.getMaterial(Item.getId(cursor.getItem())))) {
+                                action = InventoryAction.COLLECT_TO_CURSOR;
+                            }
+                        }
+                        break;
+                    default:
+                        break;
+                }
+
+                if (packetplayinwindowclick.f() != InventoryClickType.QUICK_CRAFT) {
+                    if (click == ClickType.NUMBER_KEY) {
+                        event = new InventoryClickEvent(inventory, type, packetplayinwindowclick.b(), click, action, packetplayinwindowclick.c());
+                    } else {
+                        event = new InventoryClickEvent(inventory, type, packetplayinwindowclick.b(), click, action);
+                    }
+
+                    org.bukkit.inventory.Inventory top = inventory.getTopInventory();
+                    if (packetplayinwindowclick.b() == 0 && top instanceof CraftingInventory) {
+                        org.bukkit.inventory.Recipe recipe = ((CraftingInventory) top).getRecipe();
+                        if (recipe != null) {
+                            if (click == ClickType.NUMBER_KEY) {
+                                event = new CraftItemEvent(recipe, inventory, type, packetplayinwindowclick.b(), click, action, packetplayinwindowclick.c());
+                            } else {
+                                event = new CraftItemEvent(recipe, inventory, type, packetplayinwindowclick.b(), click, action);
+                            }
+                        }
+                    }
+
+                    event.setCancelled(cancelled);
+                    Container oldContainer = this.player.activeContainer; // SPIGOT-1224
+                    server.getPluginManager().callEvent(event);
+                    if (this.player.activeContainer != oldContainer) {
+                        return;
+                    }
+
+                    switch (event.getResult()) {
+                        case ALLOW:
+                        case DEFAULT:
+                            itemstack = this.player.activeContainer.a(packetplayinwindowclick.b(), packetplayinwindowclick.c(), packetplayinwindowclick.f(), this.player);
+                            break;
+                        case DENY:
+                            /* Needs enum constructor in InventoryAction
+                            if (action.modifiesOtherSlots()) {
+
+                            } else {
+                                if (action.modifiesCursor()) {
+                                    this.player.playerConnection.sendPacket(new Packet103SetSlot(-1, -1, this.player.inventory.getCarried()));
+                                }
+                                if (action.modifiesClicked()) {
+                                    this.player.playerConnection.sendPacket(new Packet103SetSlot(this.player.activeContainer.windowId, packet102windowclick.slot, this.player.activeContainer.getSlot(packet102windowclick.slot).getItem()));
+                                }
+                            }*/
+                            switch (action) {
+                                // Modified other slots
+                                case PICKUP_ALL:
+                                case MOVE_TO_OTHER_INVENTORY:
+                                case HOTBAR_MOVE_AND_READD:
+                                case HOTBAR_SWAP:
+                                case COLLECT_TO_CURSOR:
+                                case UNKNOWN:
+                                    this.player.updateInventory(this.player.activeContainer);
+                                    break;
+                                // Modified cursor and clicked
+                                case PICKUP_SOME:
+                                case PICKUP_HALF:
+                                case PICKUP_ONE:
+                                case PLACE_ALL:
+                                case PLACE_SOME:
+                                case PLACE_ONE:
+                                case SWAP_WITH_CURSOR:
+                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, this.player.inventory.getCarried()));
+                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.activeContainer.windowId, packetplayinwindowclick.b(), this.player.activeContainer.getSlot(packetplayinwindowclick.b()).getItem()));
+                                    break;
+                                // Modified clicked only
+                                case DROP_ALL_SLOT:
+                                case DROP_ONE_SLOT:
+                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.activeContainer.windowId, packetplayinwindowclick.b(), this.player.activeContainer.getSlot(packetplayinwindowclick.b()).getItem()));
+                                    break;
+                                // Modified cursor only
+                                case DROP_ALL_CURSOR:
+                                case DROP_ONE_CURSOR:
+                                case CLONE_STACK:
+                                    this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, this.player.inventory.getCarried()));
+                                    break;
+                                // Nothing
+                                case NOTHING:
+                                    break;
+                            }
+                    }
+
+                    server.getPluginManager().callEvent(new org.bukkit.event.inventory.InventoryClickedEvent(inventory, type, packetplayinwindowclick.b(), packetplayinwindowclick.c() != 0, packetplayinwindowclick.f() == InventoryClickType.QUICK_MOVE));
+                    if(event.getResult() == org.bukkit.event.Event.Result.DENY) return;
+
+                    if (event instanceof CraftItemEvent) {
+                        // Need to update the inventory on crafting to
+                        // correctly support custom recipes
+                        player.updateInventory(player.activeContainer);
+                    }
+                }
+                // CraftBukkit end
                 if (ItemStack.matches(packetplayinwindowclick.e(), itemstack)) {
                     this.player.playerConnection.sendPacket(new PacketPlayOutTransaction(packetplayinwindowclick.a(), packetplayinwindowclick.d(), true));
                     this.player.f = true;
@@ -883,81 +2097,9 @@
 
     }
 
-    public void a(PacketPlayInAutoRecipe packetplayinautorecipe) {
-        PlayerConnectionUtils.ensureMainThread(packetplayinautorecipe, this, this.player.x());
-        this.player.resetIdleTimer();
-        if (this.player.activeContainer.windowId == packetplayinautorecipe.a() && this.player.activeContainer.c(this.player)) {
-            this.player.playerConnection.sendPacket(new PacketPlayOutTransaction(packetplayinautorecipe.a(), packetplayinautorecipe.b(), true));
-            Iterator iterator;
-            PacketPlayInAutoRecipe.a packetplayinautorecipe_a;
-            ItemStack itemstack;
-            int i;
-
-            if (!packetplayinautorecipe.d().isEmpty()) {
-                iterator = packetplayinautorecipe.d().iterator();
-
-                while (iterator.hasNext()) {
-                    packetplayinautorecipe_a = (PacketPlayInAutoRecipe.a) iterator.next();
-                    itemstack = this.player.activeContainer.getSlot(packetplayinautorecipe_a.b).getItem();
-                    if (this.a(packetplayinautorecipe_a.a, itemstack)) {
-                        i = packetplayinautorecipe_a.a.getCount();
-                        if (packetplayinautorecipe_a.c == -1) {
-                            this.player.drop(packetplayinautorecipe_a.a, true);
-                        } else {
-                            ItemStack itemstack1 = this.player.inventory.getItem(packetplayinautorecipe_a.c);
-
-                            if (itemstack1.isEmpty()) {
-                                this.player.inventory.setItem(packetplayinautorecipe_a.c, packetplayinautorecipe_a.a);
-                            } else {
-                                itemstack1.add(i);
-                            }
-                        }
-
-                        if (itemstack.getCount() == i) {
-                            this.player.activeContainer.setItem(packetplayinautorecipe_a.b, ItemStack.a);
-                        } else {
-                            itemstack.subtract(i);
-                        }
-                    }
-                }
-            }
-
-            if (!packetplayinautorecipe.c().isEmpty()) {
-                iterator = packetplayinautorecipe.c().iterator();
-
-                while (iterator.hasNext()) {
-                    packetplayinautorecipe_a = (PacketPlayInAutoRecipe.a) iterator.next();
-                    itemstack = this.player.inventory.getItem(packetplayinautorecipe_a.c);
-                    if (this.a(packetplayinautorecipe_a.a, itemstack)) {
-                        i = packetplayinautorecipe_a.a.getCount();
-                        if (itemstack.getCount() == i) {
-                            this.player.inventory.splitWithoutUpdate(packetplayinautorecipe_a.c);
-                        } else {
-                            itemstack.subtract(i);
-                        }
-
-                        this.player.activeContainer.b(packetplayinautorecipe_a.b, packetplayinautorecipe_a.a);
-                    }
-                }
-            }
-
-            this.player.activeContainer.b();
-        }
-    }
-
-    private boolean a(ItemStack itemstack, ItemStack itemstack1) {
-        ItemStack itemstack2 = itemstack1.cloneItemStack();
-
-        if (itemstack2.getCount() < itemstack.getCount()) {
-            return false;
-        } else {
-            itemstack2.setCount(itemstack.getCount());
-            return ItemStack.matches(itemstack, itemstack2);
-        }
-    }
-
     public void a(PacketPlayInEnchantItem packetplayinenchantitem) {
         PlayerConnectionUtils.ensureMainThread(packetplayinenchantitem, this, this.player.x());
+        if (this.player.isFrozen()) return; // CraftBukkit
         this.player.resetIdleTimer();
         if (this.player.activeContainer.windowId == packetplayinenchantitem.a() && this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
             this.player.activeContainer.a(this.player, packetplayinenchantitem.b());
@@ -991,7 +2133,46 @@
             }
 
             boolean flag1 = packetplayinsetcreativeslot.a() >= 1 && packetplayinsetcreativeslot.a() <= 45;
-            boolean flag2 = itemstack.isEmpty() || itemstack.getData() >= 0 && itemstack.getCount() <= 64 && !itemstack.isEmpty();
+            // CraftBukkit - Add invalidItems check
+            boolean flag2 = itemstack.isEmpty() || itemstack.getData() >= 0 && itemstack.getCount() <= 64 && !itemstack.isEmpty() && !invalidItems.contains(Item.getId(itemstack.getItem()));
+            if (flag || (flag1 && !ItemStack.matches(this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.a()).getItem(), packetplayinsetcreativeslot.getItemStack()))) { // Insist on valid slot
+                // CraftBukkit start - Call click event
+                org.bukkit.entity.HumanEntity player = this.player.getBukkitEntity();
+                InventoryView inventory = new CraftInventoryView(player, player.getInventory(), this.player.defaultContainer);
+                org.bukkit.inventory.ItemStack item = CraftItemStack.asBukkitCopy(packetplayinsetcreativeslot.getItemStack());
+
+                SlotType type = SlotType.QUICKBAR;
+                if (flag) {
+                    type = SlotType.OUTSIDE;
+                } else if (packetplayinsetcreativeslot.a() < 36) {
+                    if (packetplayinsetcreativeslot.a() >= 5 && packetplayinsetcreativeslot.a() < 9) {
+                        type = SlotType.ARMOR;
+                    } else {
+                        type = SlotType.CONTAINER;
+                    }
+                }
+                InventoryCreativeEvent event = new InventoryCreativeEvent(inventory, type, flag ? -999 : packetplayinsetcreativeslot.a(), item);
+                server.getPluginManager().callEvent(event);
+
+                itemstack = CraftItemStack.asNMSCopy(event.getCursor());
+
+                switch (event.getResult()) {
+                case ALLOW:
+                    // Plugin cleared the id / stacksize checks
+                    flag2 = true;
+                    break;
+                case DEFAULT:
+                    break;
+                case DENY:
+                    // Reset the slot
+                    if (packetplayinsetcreativeslot.a() >= 0) {
+                        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(this.player.defaultContainer.windowId, packetplayinsetcreativeslot.a(), this.player.defaultContainer.getSlot(packetplayinsetcreativeslot.a()).getItem()));
+                        this.player.playerConnection.sendPacket(new PacketPlayOutSetSlot(-1, -1, ItemStack.a));
+                    }
+                    return;
+                }
+            }
+            // CraftBukkit end
 
             if (flag1 && flag2) {
                 if (itemstack.isEmpty()) {
@@ -1015,6 +2196,7 @@
 
     public void a(PacketPlayInTransaction packetplayintransaction) {
         PlayerConnectionUtils.ensureMainThread(packetplayintransaction, this, this.player.x());
+        if (this.player.isFrozen()) return; // CraftBukkit
         Short oshort = (Short) this.k.get(this.player.activeContainer.windowId);
 
         if (oshort != null && packetplayintransaction.b() == oshort.shortValue() && this.player.activeContainer.windowId == packetplayintransaction.a() && !this.player.activeContainer.c(this.player) && !this.player.isSpectator()) {
@@ -1025,6 +2207,7 @@
 
     public void a(PacketPlayInUpdateSign packetplayinupdatesign) {
         PlayerConnectionUtils.ensureMainThread(packetplayinupdatesign, this, this.player.x());
+        if (this.player.isFrozen()) return; // CraftBukkit
         this.player.resetIdleTimer();
         WorldServer worldserver = this.minecraftServer.getWorldServer(this.player.dimension);
         BlockPosition blockposition = packetplayinupdatesign.a();
@@ -1041,14 +2224,32 @@
 
             if (!tileentitysign.a() || tileentitysign.e() != this.player) {
                 this.minecraftServer.warning("Player " + this.player.getName() + " just tried to change non-editable sign");
+                this.sendPacket(tileentity.getUpdatePacket()); // CraftBukkit
                 return;
             }
 
             String[] astring = packetplayinupdatesign.b();
 
+            // CraftBukkit start
+            Player player = this.server.getPlayer(this.player);
+            int x = packetplayinupdatesign.a().getX();
+            int y = packetplayinupdatesign.a().getY();
+            int z = packetplayinupdatesign.a().getZ();
+            BaseComponent[] lines = new BaseComponent[4];
+
             for (int i = 0; i < astring.length; ++i) {
-                tileentitysign.lines[i] = new ChatComponentText(EnumChatFormat.a(astring[i]));
+                lines[i] = new TextComponent(EnumChatFormat.a(astring[i]));
             }
+            SignChangeEvent event = new SignChangeEvent((org.bukkit.craftbukkit.block.CraftBlock) player.getWorld().getBlockAt(x, y, z), this.server.getPlayer(this.player), lines);
+            this.server.getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+                for(int i = 0; i < tileentitysign.lines.length; i++) {
+                    tileentitysign.lines[i] = BungeeChatUtils.toNms(event.line(i));
+                }
+                tileentitysign.isEditable = false;
+             }
+            // CraftBukkit end
 
             tileentitysign.update();
             worldserver.notify(blockposition, iblockdata, iblockdata, 3);
@@ -1057,25 +2258,44 @@
     }
 
     public void a(PacketPlayInKeepAlive packetplayinkeepalive) {
+        this.player.handleKeepAlive(packetplayinkeepalive.a());
         if (packetplayinkeepalive.a() == this.f) {
-            int i = (int) (this.d() - this.g);
+            int i = (int) (this.e() - this.g);
 
             this.player.ping = (this.player.ping * 3 + i) / 4;
         }
 
     }
 
-    private long d() {
+    public long createKeepAliveTimestamp() { return this.e(); } // SportBukkit - alias for following method
+    private long e() {
         return System.nanoTime() / 1000000L;
     }
 
     public void a(PacketPlayInAbilities packetplayinabilities) {
         PlayerConnectionUtils.ensureMainThread(packetplayinabilities, this, this.player.x());
-        this.player.abilities.isFlying = packetplayinabilities.isFlying() && this.player.abilities.canFly;
+        // CraftBukkit start
+        if (this.player.abilities.canFly && this.player.abilities.isFlying != packetplayinabilities.isFlying()) {
+            PlayerToggleFlightEvent event = new PlayerToggleFlightEvent(this.server.getPlayer(this.player), packetplayinabilities.isFlying());
+            this.server.getPluginManager().callEvent(event);
+            CraftEventFactory.callPlayerPoseFlagEvent(this.getPlayer(), PoseFlag.FLYING, event.isFlying(), event);
+            if (!event.isCancelled()) {
+                this.player.abilities.isFlying = packetplayinabilities.isFlying(); // Actually set the player's flying status
+            } else {
+                this.player.updateAbilities(); // Tell the player their ability was reverted
+            }
+        }
+        // CraftBukkit end
     }
 
     public void a(PacketPlayInTabComplete packetplayintabcomplete) {
         PlayerConnectionUtils.ensureMainThread(packetplayintabcomplete, this, this.player.x());
+        // CraftBukkit start
+        if (chatSpamField.addAndGet(this, 10) > 500 && !this.minecraftServer.getPlayerList().isOp(this.player.getProfile())) {
+            this.disconnect("disconnect.spam");
+            return;
+        }
+        // CraftBukkit end
         ArrayList arraylist = Lists.newArrayList();
         Iterator iterator = this.minecraftServer.tabCompleteCommand(this.player, packetplayintabcomplete.a(), packetplayintabcomplete.b(), packetplayintabcomplete.c()).iterator();
 
@@ -1119,10 +2339,13 @@
                 }
 
                 if (itemstack.getItem() == Items.WRITABLE_BOOK && itemstack.getItem() == itemstack1.getItem()) {
+                    itemstack1 = new ItemStack(Items.WRITABLE_BOOK); // CraftBukkit
                     itemstack1.a("pages", (NBTBase) itemstack.getTag().getList("pages", 8));
+                    CraftEventFactory.handleEditBookEvent(player, itemstack1); // CraftBukkit
                 }
             } catch (Exception exception) {
                 PlayerConnection.LOGGER.error("Couldn\'t handle book info", exception);
+                this.disconnect("Invalid book data!"); // CraftBukkit
             }
         } else {
             String s1;
@@ -1161,10 +2384,11 @@
                         }
 
                         itemstack2.a("pages", (NBTBase) nbttaglist);
-                        this.player.setSlot(EnumItemSlot.MAINHAND, itemstack2);
+                        CraftEventFactory.handleEditBookEvent(player, itemstack2); // CraftBukkit
                     }
                 } catch (Exception exception1) {
                     PlayerConnection.LOGGER.error("Couldn\'t sign book", exception1);
+                    this.disconnect("Invalid book data!"); // CraftBukkit
                 }
             } else if ("MC|TrSel".equals(s)) {
                 try {
@@ -1176,6 +2400,7 @@
                     }
                 } catch (Exception exception2) {
                     PlayerConnection.LOGGER.error("Couldn\'t select trade", exception2);
+                    this.disconnect("Invalid trade data!"); // CraftBukkit
                 }
             } else {
                 TileEntity tileentity;
@@ -1186,7 +2411,7 @@
                         return;
                     }
 
-                    if (!this.player.isCreativeAndOp()) {
+                    if (!this.player.dk()) {
                         this.player.sendMessage(new ChatMessage("advMode.notAllowed", new Object[0]));
                         return;
                     }
@@ -1225,6 +2450,7 @@
                         }
                     } catch (Exception exception3) {
                         PlayerConnection.LOGGER.error("Couldn\'t set command block", exception3);
+                        this.disconnect("Invalid command data!"); // CraftBukkit
                     }
                 } else if ("MC|AutoCmd".equals(s)) {
                     if (!this.minecraftServer.getEnableCommandBlock()) {
@@ -1232,7 +2458,7 @@
                         return;
                     }
 
-                    if (!this.player.isCreativeAndOp()) {
+                    if (!this.player.dk()) {
                         this.player.sendMessage(new ChatMessage("advMode.notAllowed", new Object[0]));
                         return;
                     }
@@ -1292,6 +2518,7 @@
                         }
                     } catch (Exception exception4) {
                         PlayerConnection.LOGGER.error("Couldn\'t set command block", exception4);
+                        this.disconnect("Invalid command data!"); // CraftBukkit
                     }
                 } else {
                     int k;
@@ -1315,6 +2542,7 @@
                                 }
                             } catch (Exception exception5) {
                                 PlayerConnection.LOGGER.error("Couldn\'t set beacon", exception5);
+                                this.disconnect("Invalid beacon data!"); // CraftBukkit
                             }
                         }
                     } else if ("MC|ItemName".equals(s)) {
@@ -1324,7 +2552,7 @@
                             if (packetplayincustompayload.b() != null && packetplayincustompayload.b().readableBytes() >= 1) {
                                 String s4 = SharedConstants.a(packetplayincustompayload.b().e(32767));
 
-                                if (s4.length() <= 35) {
+                                if (s4.length() <= 30) {
                                     containeranvil.a(s4);
                                 }
                             } else {
@@ -1332,7 +2560,7 @@
                             }
                         }
                     } else if ("MC|Struct".equals(s)) {
-                        if (!this.player.isCreativeAndOp()) {
+                        if (!this.player.dk()) {
                             return;
                         }
 
@@ -1368,10 +2596,13 @@
                                 tileentitystructure.b(EnumBlockRotation.valueOf(s6));
                                 tileentitystructure.b(packetdataserializer.e(128));
                                 tileentitystructure.a(packetdataserializer.readBoolean());
+                                if(packetdataserializer.protocolVersion >= 201) { // SportBukkit - legacy proto translation
                                 tileentitystructure.e(packetdataserializer.readBoolean());
                                 tileentitystructure.f(packetdataserializer.readBoolean());
+                                if(packetdataserializer.protocolVersion >= 202) { // SportBukkit
                                 tileentitystructure.a(MathHelper.a(packetdataserializer.readFloat(), 0.0F, 1.0F));
                                 tileentitystructure.a(packetdataserializer.h());
+                                }} // SportBukkit
                                 String s7 = tileentitystructure.a();
 
                                 if (b1 == 2) {
@@ -1401,6 +2632,7 @@
                             }
                         } catch (Exception exception6) {
                             PlayerConnection.LOGGER.error("Couldn\'t set structure block", exception6);
+                            this.disconnect("Invalid structure data!"); // CraftBukkit
                         }
                     } else if ("MC|PickItem".equals(s)) {
                         packetdataserializer = packetplayincustompayload.b();
@@ -1415,9 +2647,31 @@
                             PlayerConnection.LOGGER.error("Couldn\'t pick item", exception7);
                         }
                     }
+                    // CraftBukkit start
+                    else if (packetplayincustompayload.a().equals("REGISTER")) {
+                        String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
+                        for (String channel : channels.split("\0")) {
+                            getPlayer().addChannel(channel);
+                        }
+                    } else if (packetplayincustompayload.a().equals("UNREGISTER")) {
+                        String channels = packetplayincustompayload.b().toString(com.google.common.base.Charsets.UTF_8);
+                        for (String channel : channels.split("\0")) {
+                            getPlayer().removeChannel(channel);
+                        }
+                    } else {
+                        byte[] data = new byte[packetplayincustompayload.b().readableBytes()];
+                        packetplayincustompayload.b().readBytes(data);
+                        server.getMessenger().dispatchIncomingMessage(player.getBukkitEntity(), packetplayincustompayload.a(), data);
+                    }
+                    // CraftBukkit end
                 }
             }
         }
 
     }
+
+    // CraftBukkit start - Add "isDisconnected" method
+    public final boolean isDisconnected() {
+        return !this.player.joining && !this.networkManager.isConnected();
+    }
 }
