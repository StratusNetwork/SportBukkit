--- a/net/minecraft/server/EntitySlime.java
+++ b/net/minecraft/server/EntitySlime.java
@@ -1,14 +1,17 @@
 package net.minecraft.server;
 
 import javax.annotation.Nullable;
+// CraftBukkit start
+import org.bukkit.event.entity.SlimeSplitEvent;
+// CraftBukkit end
 
 public class EntitySlime extends EntityInsentient implements IMonster {
 
-    private static final DataWatcherObject<Integer> bv = DataWatcher.a(EntitySlime.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Integer> bu = DataWatcher.a(EntitySlime.class, DataWatcherRegistry.b);
     public float a;
     public float b;
     public float c;
-    private boolean bw;
+    private boolean bv;
 
     public EntitySlime(World world) {
         super(world);
@@ -26,11 +29,11 @@
 
     protected void i() {
         super.i();
-        this.datawatcher.register(EntitySlime.bv, Integer.valueOf(1));
+        this.datawatcher.register(EntitySlime.bu, Integer.valueOf(1));
     }
 
     public void setSize(int i, boolean flag) {
-        this.datawatcher.set(EntitySlime.bv, Integer.valueOf(i));
+        this.datawatcher.set(EntitySlime.bu, Integer.valueOf(i));
         this.setSize(0.51000005F * (float) i, 0.51000005F * (float) i);
         this.setPosition(this.locX, this.locY, this.locZ);
         this.getAttributeInstance(GenericAttributes.maxHealth).setValue((double) (i * i));
@@ -43,7 +46,7 @@
     }
 
     public int getSize() {
-        return ((Integer) this.datawatcher.get(EntitySlime.bv)).intValue();
+        return ((Integer) this.datawatcher.get(EntitySlime.bu)).intValue();
     }
 
     public static void c(DataConverterManager dataconvertermanager) {
@@ -53,7 +56,7 @@
     public void b(NBTTagCompound nbttagcompound) {
         super.b(nbttagcompound);
         nbttagcompound.setInt("Size", this.getSize() - 1);
-        nbttagcompound.setBoolean("wasOnGround", this.bw);
+        nbttagcompound.setBoolean("wasOnGround", this.bv);
     }
 
     public void a(NBTTagCompound nbttagcompound) {
@@ -65,26 +68,26 @@
         }
 
         this.setSize(i + 1, false);
-        this.bw = nbttagcompound.getBoolean("wasOnGround");
+        this.bv = nbttagcompound.getBoolean("wasOnGround");
     }
 
-    public boolean dk() {
+    public boolean di() {
         return this.getSize() <= 1;
     }
 
-    protected EnumParticle p() {
+    protected EnumParticle o() {
         return EnumParticle.SLIME;
     }
 
-    public void B_() {
+    public void A_() {
         if (!this.world.isClientSide && this.world.getDifficulty() == EnumDifficulty.PEACEFUL && this.getSize() > 0) {
             this.dead = true;
         }
 
         this.b += (this.a - this.b) * 0.5F;
         this.c = this.b;
-        super.B_();
-        if (this.onGround && !this.bw) {
+        super.A_();
+        if (this.onGround && !this.bv) {
             int i = this.getSize();
 
             for (int j = 0; j < i * 8; ++j) {
@@ -93,44 +96,44 @@
                 float f2 = MathHelper.sin(f) * (float) i * 0.5F * f1;
                 float f3 = MathHelper.cos(f) * (float) i * 0.5F * f1;
                 World world = this.world;
-                EnumParticle enumparticle = this.p();
+                EnumParticle enumparticle = this.o();
                 double d0 = this.locX + (double) f2;
                 double d1 = this.locZ + (double) f3;
 
                 world.addParticle(enumparticle, d0, this.getBoundingBox().b, d1, 0.0D, 0.0D, 0.0D, new int[0]);
             }
 
-            this.a(this.dh(), this.co(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
+            this.a(this.df(), this.ci(), ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F) / 0.8F);
             this.a = -0.5F;
-        } else if (!this.onGround && this.bw) {
+        } else if (!this.onGround && this.bv) {
             this.a = 1.0F;
         }
 
-        this.bw = this.onGround;
-        this.de();
+        this.bv = this.onGround;
+        this.dc();
     }
 
-    protected void de() {
+    protected void dc() {
         this.a *= 0.6F;
     }
 
-    protected int dd() {
+    protected int db() {
         return this.random.nextInt(20) + 10;
     }
 
-    protected EntitySlime dc() {
+    protected EntitySlime da() {
         return new EntitySlime(this.world);
     }
 
     public void a(DataWatcherObject<?> datawatcherobject) {
-        if (EntitySlime.bv.equals(datawatcherobject)) {
+        if (EntitySlime.bu.equals(datawatcherobject)) {
             int i = this.getSize();
 
             this.setSize(0.51000005F * (float) i, 0.51000005F * (float) i);
             this.yaw = this.aP;
             this.aN = this.aP;
             if (this.isInWater() && this.random.nextInt(20) == 0) {
-                this.ar();
+                this.al();
             }
         }
 
@@ -143,22 +146,34 @@
         if (!this.world.isClientSide && i > 1 && this.getHealth() <= 0.0F) {
             int j = 2 + this.random.nextInt(3);
 
+            // CraftBukkit start
+            SlimeSplitEvent event = new SlimeSplitEvent((org.bukkit.entity.Slime) this.getBukkitEntity(), j);
+            this.world.getServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled() && event.getCount() > 0) {
+                j = event.getCount();
+            } else {
+                super.die();
+                return;
+            }
+            // CraftBukkit end
+
             for (int k = 0; k < j; ++k) {
                 float f = ((float) (k % 2) - 0.5F) * (float) i / 4.0F;
                 float f1 = ((float) (k / 2) - 0.5F) * (float) i / 4.0F;
-                EntitySlime entityslime = this.dc();
+                EntitySlime entityslime = this.da();
 
                 if (this.hasCustomName()) {
                     entityslime.setCustomName(this.getCustomName());
                 }
 
                 if (this.isPersistent()) {
-                    entityslime.cU();
+                    entityslime.cS();
                 }
 
                 entityslime.setSize(i / 2, true);
                 entityslime.setPositionRotation(this.locX + (double) f, this.locY + 0.5D, this.locZ + (double) f1, this.random.nextFloat() * 360.0F, 0.0F);
-                this.world.addEntity(entityslime);
+                this.world.addEntity(entityslime, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.SLIME_SPLIT); // CraftBukkit - SpawnReason
             }
         }
 
@@ -167,14 +182,14 @@
 
     public void collide(Entity entity) {
         super.collide(entity);
-        if (entity instanceof EntityIronGolem && this.df()) {
+        if (entity instanceof EntityIronGolem && this.dd()) {
             this.e((EntityLiving) entity);
         }
 
     }
 
     public void d(EntityHuman entityhuman) {
-        if (this.df()) {
+        if (this.dd()) {
             this.e((EntityLiving) entityhuman);
         }
 
@@ -183,8 +198,8 @@
     protected void e(EntityLiving entityliving) {
         int i = this.getSize();
 
-        if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.damageEntity(DamageSource.mobAttack(this), (float) this.dg())) {
-            this.a(SoundEffects.gY, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+        if (this.hasLineOfSight(entityliving) && this.h(entityliving) < 0.6D * (double) i * 0.6D * (double) i && entityliving.damageEntity(DamageSource.mobAttack(this), (float) this.de())) {
+            this.a(SoundEffects.fX, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             this.a((EntityLiving) this, (Entity) entityliving);
         }
 
@@ -194,24 +209,24 @@
         return 0.625F * this.length;
     }
 
-    protected boolean df() {
-        return !this.dk();
+    protected boolean dd() {
+        return !this.di();
     }
 
-    protected int dg() {
+    protected int de() {
         return this.getSize();
     }
 
-    protected SoundEffect d(DamageSource damagesource) {
-        return this.dk() ? SoundEffects.hm : SoundEffects.hd;
+    protected SoundEffect bW() {
+        return this.di() ? SoundEffects.gl : SoundEffects.gc;
     }
 
-    protected SoundEffect cd() {
-        return this.dk() ? SoundEffects.hl : SoundEffects.ha;
+    protected SoundEffect bX() {
+        return this.di() ? SoundEffects.gk : SoundEffects.fZ;
     }
 
-    protected SoundEffect dh() {
-        return this.dk() ? SoundEffects.ho : SoundEffects.hg;
+    protected SoundEffect df() {
+        return this.di() ? SoundEffects.gn : SoundEffects.gf;
     }
 
     protected Item getLoot() {
@@ -223,7 +238,7 @@
         return this.getSize() == 1 ? LootTables.ah : LootTables.a;
     }
 
-    public boolean P() {
+    public boolean cM() {
         BlockPosition blockposition = new BlockPosition(MathHelper.floor(this.locX), 0, MathHelper.floor(this.locZ));
         Chunk chunk = this.world.getChunkAtWorldCoords(blockposition);
 
@@ -233,12 +248,12 @@
             if (this.world.getDifficulty() != EnumDifficulty.PEACEFUL) {
                 BiomeBase biomebase = this.world.getBiome(blockposition);
 
-                if (biomebase == Biomes.h && this.locY > 50.0D && this.locY < 70.0D && this.random.nextFloat() < 0.5F && this.random.nextFloat() < this.world.G() && this.world.getLightLevel(new BlockPosition(this)) <= this.random.nextInt(8)) {
-                    return super.P();
+                if (biomebase == Biomes.h && this.locY > 50.0D && this.locY < 70.0D && this.random.nextFloat() < 0.5F && this.random.nextFloat() < this.world.E() && this.world.getLightLevel(new BlockPosition(this)) <= this.random.nextInt(8)) {
+                    return super.cM();
                 }
 
                 if (this.random.nextInt(10) == 0 && chunk.a(987234911L).nextInt(10) == 0 && this.locY < 40.0D) {
-                    return super.P();
+                    return super.cM();
                 }
             }
 
@@ -246,7 +261,7 @@
         }
     }
 
-    protected float co() {
+    protected float ci() {
         return 0.4F * (float) this.getSize();
     }
 
@@ -254,11 +269,11 @@
         return 0;
     }
 
-    protected boolean dl() {
+    protected boolean dj() {
         return this.getSize() > 0;
     }
 
-    protected void cs() {
+    protected void cm() {
         this.motY = 0.41999998688697815D;
         this.impulse = true;
     }
@@ -277,8 +292,8 @@
         return super.prepare(difficultydamagescaler, groupdataentity);
     }
 
-    protected SoundEffect di() {
-        return this.dk() ? SoundEffects.hn : SoundEffects.he;
+    protected SoundEffect dg() {
+        return this.di() ? SoundEffects.gm : SoundEffects.gd;
     }
 
     static class PathfinderGoalSlimeIdle extends PathfinderGoal {
@@ -310,7 +325,7 @@
         }
 
         public boolean a() {
-            return this.a.isInWater() || this.a.au();
+            return this.a.isInWater() || this.a.ao();
         }
 
         public void e() {
@@ -334,7 +349,7 @@
         }
 
         public boolean a() {
-            return this.a.getGoalTarget() == null && (this.a.onGround || this.a.isInWater() || this.a.au() || this.a.hasEffect(MobEffects.LEVITATION));
+            return this.a.getGoalTarget() == null && (this.a.onGround || this.a.isInWater() || this.a.ao() || this.a.hasEffect(MobEffects.LEVITATION));
         }
 
         public void e() {
@@ -376,7 +391,7 @@
 
         public void e() {
             this.a.a((Entity) this.a.getGoalTarget(), 10.0F, 10.0F);
-            ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(this.a.yaw, this.a.df());
+            ((EntitySlime.ControllerMoveSlime) this.a.getControllerMove()).a(this.a.yaw, this.a.dd());
         }
     }
 
@@ -403,33 +418,33 @@
             this.h = ControllerMove.Operation.MOVE_TO;
         }
 
-        public void a() {
+        public void c() {
             this.a.yaw = this.a(this.a.yaw, this.i, 90.0F);
             this.a.aP = this.a.yaw;
             this.a.aN = this.a.yaw;
             if (this.h != ControllerMove.Operation.MOVE_TO) {
-                this.a.p(0.0F);
+                this.a.o(0.0F);
             } else {
                 this.h = ControllerMove.Operation.WAIT;
                 if (this.a.onGround) {
-                    this.a.m((float) (this.e * this.a.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue()));
+                    this.a.l((float) (this.e * this.a.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue()));
                     if (this.j-- <= 0) {
-                        this.j = this.k.dd();
+                        this.j = this.k.db();
                         if (this.l) {
                             this.j /= 3;
                         }
 
                         this.k.getControllerJump().a();
-                        if (this.k.dl()) {
-                            this.k.a(this.k.di(), this.k.co(), ((this.k.getRandom().nextFloat() - this.k.getRandom().nextFloat()) * 0.2F + 1.0F) * 0.8F);
+                        if (this.k.dj()) {
+                            this.k.a(this.k.dg(), this.k.ci(), ((this.k.getRandom().nextFloat() - this.k.getRandom().nextFloat()) * 0.2F + 1.0F) * 0.8F);
                         }
                     } else {
                         this.k.be = 0.0F;
-                        this.k.bg = 0.0F;
-                        this.a.m(0.0F);
+                        this.k.bf = 0.0F;
+                        this.a.l(0.0F);
                     }
                 } else {
-                    this.a.m((float) (this.e * this.a.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue()));
+                    this.a.l((float) (this.e * this.a.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).getValue()));
                 }
 
             }
