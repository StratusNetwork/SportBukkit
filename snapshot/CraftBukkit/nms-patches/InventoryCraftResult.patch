--- a/net/minecraft/server/InventoryCraftResult.java
+++ b/net/minecraft/server/InventoryCraftResult.java
@@ -1,12 +1,43 @@
 package net.minecraft.server;
 
 import java.util.Iterator;
-import javax.annotation.Nullable;
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+// CraftBukkit end
 
 public class InventoryCraftResult implements IInventory {
 
     private final NonNullList<ItemStack> items;
-    private IRecipe b;
+
+    // CraftBukkit start
+    private int maxStack = MAX_STACK;
+
+    public java.util.List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public org.bukkit.inventory.InventoryHolder getOwner() {
+        return null; // Result slots don't get an owner
+    }
+
+    // Don't need a transaction; the InventoryCrafting keeps track of it for us
+    public void onOpen(CraftHumanEntity who) {}
+    public void onClose(CraftHumanEntity who) {}
+    public java.util.List<HumanEntity> getViewers() {
+        return new java.util.ArrayList<HumanEntity>();
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+
+    @Override
+    public Location getLocation() {
+        return null;
+    }
+    // CraftBukkit end
 
     public InventoryCraftResult() {
         this.items = NonNullList.a(1, ItemStack.a);
@@ -16,7 +47,7 @@
         return 1;
     }
 
-    public boolean x_() {
+    public boolean w_() {
         Iterator iterator = this.items.iterator();
 
         ItemStack itemstack;
@@ -61,7 +92,7 @@
     }
 
     public int getMaxStackSize() {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     public void update() {}
@@ -91,13 +122,4 @@
     public void clear() {
         this.items.clear();
     }
-
-    public void a(@Nullable IRecipe irecipe) {
-        this.b = irecipe;
-    }
-
-    @Nullable
-    public IRecipe i() {
-        return this.b;
-    }
 }
