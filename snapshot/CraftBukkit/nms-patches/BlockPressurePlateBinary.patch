--- a/net/minecraft/server/BlockPressurePlateBinary.java
+++ b/net/minecraft/server/BlockPressurePlateBinary.java
@@ -3,14 +3,17 @@
 import java.util.Iterator;
 import java.util.List;
 
+import org.bukkit.event.entity.EntityInteractEvent; // CraftBukkit
+
 public class BlockPressurePlateBinary extends BlockPressurePlateAbstract {
 
     public static final BlockStateBoolean POWERED = BlockStateBoolean.of("powered");
     private final BlockPressurePlateBinary.EnumMobType e;
+    public java.util.Map<Entity, Boolean> entitiesOnPlate = new java.util.WeakHashMap<Entity, Boolean>(); // SportBukkit
 
     protected BlockPressurePlateBinary(Material material, BlockPressurePlateBinary.EnumMobType blockpressureplatebinary_enummobtype) {
         super(material);
-        this.w(this.blockStateList.getBlockData().set(BlockPressurePlateBinary.POWERED, Boolean.valueOf(false)));
+        this.y(this.blockStateList.getBlockData().set(BlockPressurePlateBinary.POWERED, Boolean.valueOf(false)));
         this.e = blockpressureplatebinary_enummobtype;
     }
 
@@ -24,18 +27,18 @@
 
     protected void b(World world, BlockPosition blockposition) {
         if (this.material == Material.WOOD) {
-            world.a((EntityHuman) null, blockposition, SoundEffects.jd, SoundCategory.BLOCKS, 0.3F, 0.8F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.ic, SoundCategory.BLOCKS, 0.3F, 0.8F);
         } else {
-            world.a((EntityHuman) null, blockposition, SoundEffects.hP, SoundCategory.BLOCKS, 0.3F, 0.6F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.gO, SoundCategory.BLOCKS, 0.3F, 0.6F);
         }
 
     }
 
     protected void c(World world, BlockPosition blockposition) {
         if (this.material == Material.WOOD) {
-            world.a((EntityHuman) null, blockposition, SoundEffects.jc, SoundCategory.BLOCKS, 0.3F, 0.7F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.ib, SoundCategory.BLOCKS, 0.3F, 0.7F);
         } else {
-            world.a((EntityHuman) null, blockposition, SoundEffects.hO, SoundCategory.BLOCKS, 0.3F, 0.5F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.gN, SoundCategory.BLOCKS, 0.3F, 0.5F);
         }
 
     }
@@ -57,12 +60,50 @@
             return 0;
         }
 
+        this.entitiesOnPlate.keySet().retainAll(list); // SportBukkit - forget entities that have stepped off the plate
+
         if (!list.isEmpty()) {
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
                 Entity entity = (Entity) iterator.next();
 
+                // CraftBukkit start - Call interact event when turning on a pressure plate
+                {
+                    org.bukkit.World bworld = world.getWorld();
+                    org.bukkit.plugin.PluginManager manager = world.getServer().getPluginManager();
+                    org.bukkit.event.Cancellable cancellable;
+
+                    if(entity == null || entity.isIgnoreBlockTrigger()) continue;;
+
+                    // SportBukkit - if entity was already on the plate, re-use their previous result
+                    final Boolean result = this.entitiesOnPlate.get(entity);
+                    if(result != null) {
+                        if(result) {
+                            // interaction was allowed
+                            return 15;
+                        } else {
+                            // interaction was cancelled
+                            continue;
+                        }
+                    }
+
+                    if (entity instanceof EntityHuman) {
+                        cancellable = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerInteractEvent((EntityHuman) entity, org.bukkit.event.block.Action.PHYSICAL, blockposition, null, null, null);
+                    } else {
+                        cancellable = new EntityInteractEvent(entity.getBukkitEntity(), bworld.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()));
+                        manager.callEvent((EntityInteractEvent) cancellable);
+                    }
+
+                    // SportBukkit - save event result as long as the entity stays on the plate
+                    this.entitiesOnPlate.put(entity, !cancellable.isCancelled());
+
+                    // We only want to block turning the plate on if all events are cancelled
+                    if (cancellable.isCancelled())
+                        continue;
+                }
+                // CraftBukkit end
+
                 if (!entity.isIgnoreBlockTrigger()) {
                     return 15;
                 }
