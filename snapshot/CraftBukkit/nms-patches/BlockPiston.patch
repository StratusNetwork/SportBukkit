--- a/net/minecraft/server/BlockPiston.java
+++ b/net/minecraft/server/BlockPiston.java
@@ -5,6 +5,18 @@
 import java.util.List;
 import javax.annotation.Nullable;
 
+// CraftBukkit start
+import java.util.AbstractList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.ListIterator;
+
+import com.google.common.collect.ImmutableList;
+import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.event.block.BlockPistonRetractEvent;
+import org.bukkit.event.block.BlockPistonExtendEvent;
+// CraftBukkit end
+
 public class BlockPiston extends BlockDirectional {
 
     public static final BlockStateBoolean EXTENDED = BlockStateBoolean.of("extended");
@@ -18,14 +30,14 @@
 
     public BlockPiston(boolean flag) {
         super(Material.PISTON);
-        this.w(this.blockStateList.getBlockData().set(BlockPiston.FACING, EnumDirection.NORTH).set(BlockPiston.EXTENDED, Boolean.valueOf(false)));
+        this.y(this.blockStateList.getBlockData().set(BlockPiston.FACING, EnumDirection.NORTH).set(BlockPiston.EXTENDED, Boolean.valueOf(false)));
         this.sticky = flag;
         this.a(SoundEffectType.d);
         this.c(0.5F);
         this.a(CreativeModeTab.d);
     }
 
-    public boolean t(IBlockData iblockdata) {
+    public boolean u(IBlockData iblockdata) {
         return !((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue();
     }
 
@@ -61,7 +73,7 @@
     }
 
     public void a(IBlockData iblockdata, World world, BlockPosition blockposition, AxisAlignedBB axisalignedbb, List<AxisAlignedBB> list, @Nullable Entity entity, boolean flag) {
-        a(blockposition, axisalignedbb, list, iblockdata.e(world, blockposition));
+        a(blockposition, axisalignedbb, list, iblockdata.d(world, blockposition));
     }
 
     public boolean b(IBlockData iblockdata) {
@@ -103,6 +115,18 @@
                 world.playBlockAction(blockposition, this, 0, enumdirection.a());
             }
         } else if (!flag && ((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
+            // CraftBukkit start
+            if (!this.sticky) {
+                org.bukkit.block.Block block = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+                BlockPistonRetractEvent event = new BlockPistonRetractEvent(block, ImmutableList.<org.bukkit.block.Block>of(), CraftBlock.notchToBlockFace(enumdirection));
+                world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    return;
+                }
+            }
+            // PAIL: checkME - what happened to setTypeAndData?
+            // CraftBukkit end
             world.playBlockAction(blockposition, this, 1, enumdirection.a());
         }
 
@@ -159,21 +183,32 @@
         }
 
         if (i == 0) {
+            // SportBukkit start
+            org.bukkit.event.block.BlockPistonEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPistonEvent(world, blockposition, enumdirection, true);
+            if(event != null && event.isCancelled()) return false;
+            // SportBukkit end
+
             if (!this.a(world, blockposition, enumdirection, true)) {
                 return false;
             }
 
             world.setTypeAndData(blockposition, iblockdata.set(BlockPiston.EXTENDED, Boolean.valueOf(true)), 3);
-            world.a((EntityHuman) null, blockposition, SoundEffects.fu, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.25F + 0.6F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.ev, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.25F + 0.6F);
         } else if (i == 1) {
             TileEntity tileentity = world.getTileEntity(blockposition.shift(enumdirection));
 
             if (tileentity instanceof TileEntityPiston) {
-                ((TileEntityPiston) tileentity).j();
+                ((TileEntityPiston) tileentity).i();
             }
 
             world.setTypeAndData(blockposition, Blocks.PISTON_EXTENSION.getBlockData().set(BlockPistonMoving.FACING, enumdirection).set(BlockPistonMoving.TYPE, this.sticky ? BlockPistonExtension.EnumPistonType.STICKY : BlockPistonExtension.EnumPistonType.DEFAULT), 3);
             world.setTileEntity(blockposition, BlockPistonMoving.a(this.fromLegacyData(j), enumdirection, false, true));
+
+            // SportBukkit start
+            org.bukkit.event.block.BlockPistonEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callBlockPistonEvent(world, blockposition, enumdirection, false);
+            if(event != null && event.isCancelled()) return false;
+            // SportBukkit end
+
             if (this.sticky) {
                 BlockPosition blockposition1 = blockposition.a(enumdirection.getAdjacentX() * 2, enumdirection.getAdjacentY() * 2, enumdirection.getAdjacentZ() * 2);
                 IBlockData iblockdata1 = world.getType(blockposition1);
@@ -186,21 +221,21 @@
                     if (tileentity1 instanceof TileEntityPiston) {
                         TileEntityPiston tileentitypiston = (TileEntityPiston) tileentity1;
 
-                        if (tileentitypiston.h() == enumdirection && tileentitypiston.f()) {
-                            tileentitypiston.j();
+                        if (tileentitypiston.f() == enumdirection && tileentitypiston.e()) {
+                            tileentitypiston.i();
                             flag1 = true;
                         }
                     }
                 }
 
-                if (!flag1 && iblockdata1.getMaterial() != Material.AIR && a(iblockdata1, world, blockposition1, enumdirection.opposite(), false, enumdirection) && (iblockdata1.o() == EnumPistonReaction.NORMAL || block == Blocks.PISTON || block == Blocks.STICKY_PISTON)) {
+                if (!flag1 && a(iblockdata1, world, blockposition1, enumdirection.opposite(), false) && (iblockdata1.p() == EnumPistonReaction.NORMAL || block == Blocks.PISTON || block == Blocks.STICKY_PISTON)) { // CraftBukkit - remove 'block.getMaterial() != Material.AIR' condition
                     this.a(world, blockposition, enumdirection, false);
                 }
             } else {
                 world.setAir(blockposition.shift(enumdirection));
             }
 
-            world.a((EntityHuman) null, blockposition, SoundEffects.ft, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.15F + 0.6F);
+            world.a((EntityHuman) null, blockposition, SoundEffects.eu, SoundCategory.BLOCKS, 0.5F, world.random.nextFloat() * 0.15F + 0.6F);
         }
 
         return true;
@@ -211,13 +246,13 @@
     }
 
     @Nullable
-    public static EnumDirection b(int i) {
+    public static EnumDirection e(int i) {
         int j = i & 7;
 
         return j > 5 ? null : EnumDirection.fromType1(j);
     }
 
-    public static boolean a(IBlockData iblockdata, World world, BlockPosition blockposition, EnumDirection enumdirection, boolean flag, EnumDirection enumdirection1) {
+    public static boolean a(IBlockData iblockdata, World world, BlockPosition blockposition, EnumDirection enumdirection, boolean flag) {
         Block block = iblockdata.getBlock();
 
         if (block == Blocks.OBSIDIAN) {
@@ -231,15 +266,12 @@
                         return false;
                     }
 
-                    switch (iblockdata.o()) {
-                    case BLOCK:
+                    if (iblockdata.p() == EnumPistonReaction.BLOCK) {
                         return false;
+                    }
 
-                    case DESTROY:
+                    if (iblockdata.p() == EnumPistonReaction.DESTROY) {
                         return flag;
-
-                    case PUSH_ONLY:
-                        return enumdirection == enumdirection1;
                     }
                 } else if (((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue()) {
                     return false;
@@ -270,13 +302,57 @@
             for (int i = 0; i < list.size(); ++i) {
                 BlockPosition blockposition1 = (BlockPosition) list.get(i);
 
-                arraylist.add(world.getType(blockposition1).c(world, blockposition1));
+                arraylist.add(world.getType(blockposition1).b((IBlockAccess) world, blockposition1));
             }
 
             List list1 = pistonextendschecker.getBrokenBlocks();
             int j = list.size() + list1.size();
             IBlockData[] aiblockdata = new IBlockData[j];
             EnumDirection enumdirection1 = flag ? enumdirection : enumdirection.opposite();
+            /* SportBukkit start - move this earlier so we can actually cancel the event
+            // CraftBukkit start
+            final org.bukkit.block.Block bblock = world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+
+            final List<BlockPosition> moved = pistonextendschecker.getMovedBlocks();
+            final List<BlockPosition> broken = pistonextendschecker.getBrokenBlocks();
+
+            List<org.bukkit.block.Block> blocks = new AbstractList<org.bukkit.block.Block>() {
+
+                @Override
+                public int size() {
+                    return moved.size() + broken.size();
+                }
+
+                @Override
+                public org.bukkit.block.Block get(int index) {
+                    if (index >= size() || index < 0) {
+                        throw new ArrayIndexOutOfBoundsException(index);
+                    }
+                    BlockPosition pos = (BlockPosition) (index < moved.size() ? moved.get(index) : broken.get(index - moved.size()));
+                    return bblock.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
+                }
+            };
+            org.bukkit.event.block.BlockPistonEvent event;
+            if (flag) {
+                event = new BlockPistonExtendEvent(bblock, blocks, CraftBlock.notchToBlockFace(enumdirection1));
+            } else {
+                event = new BlockPistonRetractEvent(bblock, blocks, CraftBlock.notchToBlockFace(enumdirection1));
+            }
+            world.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                for (BlockPosition b : broken) {
+                    world.notify(b, Blocks.AIR.getBlockData(), world.getType(b), 3);
+                }
+                for (BlockPosition b : moved) {
+                    world.notify(b, Blocks.AIR.getBlockData(), world.getType(b), 3);
+                    b = b.shift(enumdirection1);
+                    world.notify(b, Blocks.AIR.getBlockData(), world.getType(b), 3);
+                }
+                return false;
+            }
+            // CraftBukkit end
+            SportBukkit end */
 
             int k;
             BlockPosition blockposition2;
@@ -333,7 +409,7 @@
     }
 
     public IBlockData fromLegacyData(int i) {
-        return this.getBlockData().set(BlockPiston.FACING, b(i)).set(BlockPiston.EXTENDED, Boolean.valueOf((i & 8) > 0));
+        return this.getBlockData().set(BlockPiston.FACING, e(i)).set(BlockPiston.EXTENDED, Boolean.valueOf((i & 8) > 0));
     }
 
     public int toLegacyData(IBlockData iblockdata) {
@@ -358,9 +434,4 @@
     protected BlockStateList getStateList() {
         return new BlockStateList(this, new IBlockState[] { BlockPiston.FACING, BlockPiston.EXTENDED});
     }
-
-    public EnumBlockFaceShape a(IBlockAccess iblockaccess, IBlockData iblockdata, BlockPosition blockposition, EnumDirection enumdirection) {
-        iblockdata = this.updateState(iblockdata, iblockaccess, blockposition);
-        return iblockdata.get(BlockPiston.FACING) != enumdirection.opposite() && ((Boolean) iblockdata.get(BlockPiston.EXTENDED)).booleanValue() ? EnumBlockFaceShape.UNDEFINED : EnumBlockFaceShape.SOLID;
-    }
 }
