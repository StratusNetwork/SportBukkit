--- a/net/minecraft/server/InventoryCrafting.java
+++ b/net/minecraft/server/InventoryCrafting.java
@@ -1,17 +1,72 @@
 package net.minecraft.server;
 
 import java.util.Iterator;
+// CraftBukkit start
+import java.util.List;
+import org.bukkit.Location;
+
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.InventoryType;
+// CraftBukkit end
 
 public class InventoryCrafting implements IInventory {
 
     private final NonNullList<ItemStack> items;
     private final int b;
     private final int c;
-    public final Container container;
+    private final Container d;
+
+    // CraftBukkit start - add fields
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    public IRecipe currentRecipe;
+    public IInventory resultInventory;
+    private EntityHuman owner;
+    private int maxStack = MAX_STACK;
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public InventoryType getInvType() {
+        return items.size() == 4 ? InventoryType.CRAFTING : InventoryType.WORKBENCH;
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public org.bukkit.inventory.InventoryHolder getOwner() {
+        return (owner == null) ? null : owner.getBukkitEntity();
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+        resultInventory.setMaxStackSize(size);
+    }
+
+    @Override
+    public Location getLocation() {
+        return owner.getBukkitEntity().getLocation();
+    }
+
+    public InventoryCrafting(Container container, int i, int j, EntityHuman player) {
+        this(container, i, j);
+        this.owner = player;
+    }
+    // CraftBukkit end
 
     public InventoryCrafting(Container container, int i, int j) {
         this.items = NonNullList.a(i * j, ItemStack.a);
-        this.container = container;
+        this.d = container;
         this.b = i;
         this.c = j;
     }
@@ -20,7 +75,7 @@
         return this.items.size();
     }
 
-    public boolean x_() {
+    public boolean w_() {
         Iterator iterator = this.items.iterator();
 
         ItemStack itemstack;
@@ -64,7 +119,7 @@
         ItemStack itemstack = ContainerUtil.a(this.items, i, j);
 
         if (!itemstack.isEmpty()) {
-            this.container.a((IInventory) this);
+            this.d.a((IInventory) this);
         }
 
         return itemstack;
@@ -72,7 +127,7 @@
 
     public void setItem(int i, ItemStack itemstack) {
         this.items.set(i, itemstack);
-        this.container.a((IInventory) this);
+        this.d.a((IInventory) this);
     }
 
     public int getMaxStackSize() {
