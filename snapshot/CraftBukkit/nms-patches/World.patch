--- a/net/minecraft/server/World.java
+++ b/net/minecraft/server/World.java
@@ -1,7 +1,7 @@
 package net.minecraft.server;
 
 import com.google.common.base.Function;
-import com.google.common.base.MoreObjects;
+import com.google.common.base.Objects;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
@@ -13,6 +13,22 @@
 import java.util.UUID;
 import javax.annotation.Nullable;
 
+// CraftBukkit start
+import com.google.common.collect.Maps;
+import java.util.Map;
+import org.bukkit.Bukkit;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.CraftLogging;
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.event.block.BlockCanBuildEvent;
+import org.bukkit.event.block.BlockPhysicsEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason;
+import org.bukkit.generator.ChunkGenerator;
+// CraftBukkit end
+
 public abstract class World implements IBlockAccess {
 
     private int a = 63;
@@ -26,15 +42,15 @@
     public final List<EntityHuman> players = Lists.newArrayList();
     public final List<Entity> j = Lists.newArrayList();
     protected final IntHashMap<Entity> entitiesById = new IntHashMap();
-    private final long K = 16777215L;
-    private int L;
+    private final long I = 16777215L;
+    private int J;
     protected int l = (new Random()).nextInt();
     protected final int m = 1013904223;
     protected float n;
     protected float o;
     protected float p;
     protected float q;
-    private int M;
+    private int K;
     public final Random random = new Random();
     public WorldProvider worldProvider;
     protected NavigationListener t = new NavigationListener();
@@ -46,31 +62,103 @@
     public PersistentCollection worldMaps;
     protected PersistentVillage villages;
     protected LootTableRegistry B;
-    protected AdvancementDataWorld C;
-    protected CustomFunctionData D;
     public final MethodProfiler methodProfiler;
-    private final Calendar N;
+    private final Calendar L;
     public Scoreboard scoreboard;
     public final boolean isClientSide;
     public boolean allowMonsters;
     public boolean allowAnimals;
-    private boolean O;
-    private final WorldBorder P;
-    int[] J;
+    private boolean M;
+    private final WorldBorder N;
+    int[] H;
+
+    // CraftBukkit start Added the following
+    private final CraftWorld world;
+    public boolean pvpMode;
+    public boolean keepSpawnInMemory = true;
+    public ChunkGenerator generator;
+
+    public boolean captureBlockStates = false;
+    public boolean captureTreeGeneration = false;
+    public ArrayList<BlockState> capturedBlockStates= new ArrayList<BlockState>(){
+        @Override
+        public boolean add( BlockState blockState ) {
+            Iterator<BlockState> blockStateIterator = this.iterator();
+            while( blockStateIterator.hasNext() ) {
+                BlockState blockState1 = blockStateIterator.next();
+                if ( blockState1.getLocation().equals( blockState.getLocation() ) ) {
+                    return false;
+                }
+            }
+
+            return super.add( blockState );
+        }
+    };
+    public long ticksPerAnimalSpawns;
+    public long ticksPerMonsterSpawns;
+    public boolean populating;
+    private int tickPosition;
+
+    public CraftWorld getWorld() {
+        return this.world;
+    }
+
+    public CraftServer getServer() {
+        return (CraftServer) Bukkit.getServer();
+    }
 
-    protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag) {
+    public Chunk getChunkIfLoaded(int x, int z) {
+        return ((ChunkProviderServer) this.chunkProvider).getChunkIfLoaded(x, z);
+    }
+
+    protected World(IDataManager idatamanager, WorldData worlddata, WorldProvider worldprovider, MethodProfiler methodprofiler, boolean flag, ChunkGenerator gen, org.bukkit.World.Environment env) {
+        this.generator = gen;
+        this.world = new CraftWorld((WorldServer) this, gen, env);
+        this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
+        this.ticksPerMonsterSpawns = this.getServer().getTicksPerMonsterSpawns(); // CraftBukkit
+        // CraftBukkit end
         this.u = Lists.newArrayList(new IWorldAccess[] { this.t});
-        this.N = Calendar.getInstance();
+        this.L = Calendar.getInstance();
         this.scoreboard = new Scoreboard();
         this.allowMonsters = true;
         this.allowAnimals = true;
-        this.J = new int['\u8000'];
+        this.H = new int['\u8000'];
         this.dataManager = idatamanager;
         this.methodProfiler = methodprofiler;
         this.worldData = worlddata;
         this.worldProvider = worldprovider;
         this.isClientSide = flag;
-        this.P = worldprovider.getWorldBorder();
+        this.N = worldprovider.getWorldBorder();
+        // CraftBukkit start
+        getWorldBorder().world = (WorldServer) this;
+        // From PlayerList.setPlayerFileData
+        getWorldBorder().a(new IWorldBorderListener() {
+            public void a(WorldBorder worldborder, double d0) {
+                getServer().getHandle().sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_SIZE), worldborder.world);
+            }
+
+            public void a(WorldBorder worldborder, double d0, double d1, long i) {
+                getServer().getHandle().sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.LERP_SIZE), worldborder.world);
+            }
+
+            public void a(WorldBorder worldborder, double d0, double d1) {
+                getServer().getHandle().sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_CENTER), worldborder.world);
+            }
+
+            public void a(WorldBorder worldborder, int i) {
+                getServer().getHandle().sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_WARNING_TIME), worldborder.world);
+            }
+
+            public void b(WorldBorder worldborder, int i) {
+                getServer().getHandle().sendAll(new PacketPlayOutWorldBorder(worldborder, PacketPlayOutWorldBorder.EnumWorldBorderAction.SET_WARNING_BLOCKS), worldborder.world);
+            }
+
+            public void b(WorldBorder worldborder, double d0) {}
+
+            public void c(WorldBorder worldborder, double d0) {}
+        });
+        this.getServer().addWorld(this.world);
+        // CraftBukkit end
     }
 
     public World b() {
@@ -121,7 +209,7 @@
     public IBlockData c(BlockPosition blockposition) {
         BlockPosition blockposition1;
 
-        for (blockposition1 = new BlockPosition(blockposition.getX(), this.getSeaLevel(), blockposition.getZ()); !this.isEmpty(blockposition1.up()); blockposition1 = blockposition1.up()) {
+        for (blockposition1 = new BlockPosition(blockposition.getX(), this.K(), blockposition.getZ()); !this.isEmpty(blockposition1.up()); blockposition1 = blockposition1.up()) {
             ;
         }
 
@@ -208,6 +296,27 @@
     }
 
     public boolean setTypeAndData(BlockPosition blockposition, IBlockData iblockdata, int i) {
+        // CraftBukkit start - tree generation
+        if (this.captureTreeGeneration) {
+            BlockState blockstate = null;
+            Iterator<BlockState> it = capturedBlockStates.iterator();
+            while (it.hasNext()) {
+                BlockState previous = it.next();
+                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
+                    blockstate = previous;
+                    it.remove();
+                    break;
+                }
+            }
+            if (blockstate == null) {
+                blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
+            }
+            blockstate.setTypeId(CraftMagicNumbers.getId(iblockdata.getBlock()));
+            blockstate.setRawData((byte) iblockdata.getBlock().toLegacyData(iblockdata));
+            this.capturedBlockStates.add(blockstate);
+            return true;
+        }
+        // CraftBukkit end
         if (this.E(blockposition)) {
             return false;
         } else if (!this.isClientSide && this.worldData.getType() == WorldType.DEBUG_ALL_BLOCK_STATES) {
@@ -215,9 +324,23 @@
         } else {
             Chunk chunk = this.getChunkAtWorldCoords(blockposition);
             Block block = iblockdata.getBlock();
+
+            // CraftBukkit start - capture blockstates
+            BlockState blockstate = null;
+            if (this.captureBlockStates) {
+                blockstate = org.bukkit.craftbukkit.block.CraftBlockState.getBlockState(this, blockposition.getX(), blockposition.getY(), blockposition.getZ(), i);
+                this.capturedBlockStates.add(blockstate);
+            }
+            // CraftBukkit end
+
             IBlockData iblockdata1 = chunk.a(blockposition, iblockdata);
 
             if (iblockdata1 == null) {
+                // CraftBukkit start - remove blockstate if failed
+                if (this.captureBlockStates) {
+                    this.capturedBlockStates.remove(blockstate);
+                }
+                // CraftBukkit end
                 return false;
             } else {
                 if (iblockdata.c() != iblockdata1.c() || iblockdata.d() != iblockdata1.d()) {
@@ -226,24 +349,59 @@
                     this.methodProfiler.b();
                 }
 
+                /*
                 if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && chunk.isReady()) {
                     this.notify(blockposition, iblockdata1, iblockdata, i);
                 }
 
                 if (!this.isClientSide && (i & 1) != 0) {
                     this.update(blockposition, iblockdata1.getBlock(), true);
-                    if (iblockdata.n()) {
+                    if (iblockdata.o()) {
                         this.updateAdjacentComparators(blockposition, block);
                     }
                 } else if (!this.isClientSide && (i & 16) == 0) {
                     this.c(blockposition, block);
                 }
+                */
+
+                // CraftBukkit start
+                if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
+                    // Modularize client and physic updates
+                    notifyAndUpdatePhysics(blockposition, chunk, iblockdata1, iblockdata, i);
+                }
+                // CraftBukkit end
 
                 return true;
             }
         }
     }
 
+    // CraftBukkit start - Split off from above in order to directly send client and physic updates
+    public void notifyAndUpdatePhysics(BlockPosition blockposition, Chunk chunk, IBlockData oldBlock, IBlockData newBlock, int i) {
+        if ((i & 2) != 0 && (!this.isClientSide || (i & 4) == 0) && (chunk == null || chunk.isReady())) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
+            this.notify(blockposition, oldBlock, newBlock, i);
+        }
+
+        if (!this.isClientSide && (i & 1) != 0) {
+            this.update(blockposition, oldBlock.getBlock(), true);
+            if (newBlock.o()) {
+                this.updateAdjacentComparators(blockposition, newBlock.getBlock());
+            }
+        } else if (!this.isClientSide && (i & 16) == 0) {
+            this.c(blockposition, newBlock.getBlock());
+        }
+    }
+    // CraftBukkit end
+
+    // SportBukkit start - add method that just does the physics
+    public void updatePhysicsAndRedstone(BlockPosition blockposition, IBlockData oldBlock, IBlockData newBlock) {
+        this.update(blockposition, oldBlock.getBlock(), true);
+        if (newBlock.getBlock().isComplexRedstone(newBlock)) { // Do it this way to avoid the obfuscation
+            this.updateAdjacentComparators(blockposition, newBlock.getBlock());
+        }
+    }
+    // SportBukkit end
+
     public boolean setAir(BlockPosition blockposition) {
         return this.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 3);
     }
@@ -277,6 +435,11 @@
 
     public void update(BlockPosition blockposition, Block block, boolean flag) {
         if (this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES) {
+            // CraftBukkit start
+            if (populating) {
+                return;
+            }
+            // CraftBukkit end
             this.applyPhysics(blockposition, block, flag);
         }
 
@@ -360,11 +523,23 @@
 
     }
 
+    public void applySelfPhysics(BlockPosition target, Block cause, BlockPosition source) { a(target, cause, source); } // SportBukkit - method alias
     public void a(BlockPosition blockposition, final Block block, BlockPosition blockposition1) {
         if (!this.isClientSide) {
             IBlockData iblockdata = this.getType(blockposition);
 
             try {
+                // CraftBukkit start
+                CraftWorld world = ((WorldServer) this).getWorld();
+                if (world != null) {
+                    BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftMagicNumbers.getId(block));
+                    this.getServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                }
+                // CraftBukkit end
                 iblockdata.doPhysics(this, blockposition, block, blockposition1);
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.a(throwable, "Exception while updating neighbours");
@@ -429,10 +604,10 @@
     }
 
     public boolean i(BlockPosition blockposition) {
-        if (blockposition.getY() >= this.getSeaLevel()) {
+        if (blockposition.getY() >= this.K()) {
             return this.h(blockposition);
         } else {
-            BlockPosition blockposition1 = new BlockPosition(blockposition.getX(), this.getSeaLevel(), blockposition.getZ());
+            BlockPosition blockposition1 = new BlockPosition(blockposition.getX(), this.K(), blockposition.getZ());
 
             if (!this.h(blockposition1)) {
                 return false;
@@ -501,7 +676,7 @@
 
                 Chunk chunk = this.getChunkAtWorldCoords(blockposition);
 
-                return chunk.a(blockposition, this.L);
+                return chunk.a(blockposition, this.J);
             }
         } else {
             return 15;
@@ -522,7 +697,7 @@
                 k = 0;
             }
         } else {
-            k = this.getSeaLevel() + 1;
+            k = this.K() + 1;
         }
 
         return k;
@@ -539,7 +714,7 @@
                 return chunk.w();
             }
         } else {
-            return this.getSeaLevel() + 1;
+            return this.K() + 1;
         }
     }
 
@@ -582,6 +757,17 @@
     }
 
     public IBlockData getType(BlockPosition blockposition) {
+        // CraftBukkit start - tree generation
+        if (captureTreeGeneration) {
+            Iterator<BlockState> it = capturedBlockStates.iterator();
+            while (it.hasNext()) {
+                BlockState previous = it.next();
+                if (previous.getX() == blockposition.getX() && previous.getY() == blockposition.getY() && previous.getZ() == blockposition.getZ()) {
+                    return CraftMagicNumbers.getBlock(previous.getTypeId()).fromLegacyData(previous.getRawData());
+                }
+            }
+        }
+        // CraftBukkit end
         if (this.E(blockposition)) {
             return Blocks.AIR.getBlockData();
         } else {
@@ -591,8 +777,8 @@
         }
     }
 
-    public boolean D() {
-        return this.L < 4;
+    public boolean B() {
+        return this.J < 4;
     }
 
     @Nullable
@@ -619,7 +805,7 @@
                 IBlockData iblockdata = this.getType(blockposition);
                 Block block = iblockdata.getBlock();
 
-                if ((!flag1 || iblockdata.d(this, blockposition) != Block.k) && block.a(iblockdata, flag)) {
+                if ((!flag1 || iblockdata.c(this, blockposition) != Block.k) && block.a(iblockdata, flag)) {
                     MovingObjectPosition movingobjectposition = iblockdata.a(this, blockposition, vec3d, vec3d1);
 
                     if (movingobjectposition != null) {
@@ -721,7 +907,7 @@
                     IBlockData iblockdata1 = this.getType(blockposition);
                     Block block1 = iblockdata1.getBlock();
 
-                    if (!flag1 || iblockdata1.getMaterial() == Material.PORTAL || iblockdata1.d(this, blockposition) != Block.k) {
+                    if (!flag1 || iblockdata1.getMaterial() == Material.PORTAL || iblockdata1.c(this, blockposition) != Block.k) {
                         if (block1.a(iblockdata1, flag)) {
                             MovingObjectPosition movingobjectposition2 = iblockdata1.a(this, blockposition, vec3d, vec3d1);
 
@@ -747,6 +933,7 @@
         this.a(entityhuman, (double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D, soundeffect, soundcategory, f, f1);
     }
 
+    public void playSoundEffect(@Nullable EntityHuman source, double x, double y, double z, SoundEffect sound, SoundCategory category, float volume, float pitch) { this.a(source, x, y, z, sound, category, volume, pitch); } // SportBukkit - alias for following method
     public void a(@Nullable EntityHuman entityhuman, double d0, double d1, double d2, SoundEffect soundeffect, SoundCategory soundcategory, float f, float f1) {
         for (int i = 0; i < this.u.size(); ++i) {
             ((IWorldAccess) this.u.get(i)).a(entityhuman, soundeffect, soundcategory, d0, d1, d2, f, f1);
@@ -787,6 +974,25 @@
     }
 
     public boolean addEntity(Entity entity) {
+        // CraftBukkit start - Used for entities other than creatures
+        return addEntity(entity, SpawnReason.DEFAULT);
+    }
+
+    public boolean addEntity(Entity entity, SpawnReason spawnReason) { // Changed signature, added SpawnReason
+        if (entity == null) return false;
+
+        // Workaround for https://bugs.mojang.com/browse/MC-72248
+        // If an EntityFallingBlock spawns inside a block of the same type, the client will ALWAYS remove the block,
+        // whereas the server will only remove it if ticksLived is 0. This creates invisible blocks on the client.
+        // The imperfect workaround is to not spawn the falling block at all if it will cause such a desync.
+        if(entity instanceof EntityFallingBlock && ((EntityFallingBlock) entity).getBlock().getBlock() == this.getType(new BlockPosition(entity)).getBlock()) {
+            EntityFallingBlock fallingBlock = (EntityFallingBlock) entity;
+            if(fallingBlock.ticksLived != 0 && fallingBlock.getBlock().getBlock() == this.getType(new BlockPosition(fallingBlock)).getBlock()) {
+                return false;
+            }
+        }
+
+        // CraftBukkit end
         int i = MathHelper.floor(entity.locX / 16.0D);
         int j = MathHelper.floor(entity.locZ / 16.0D);
         boolean flag = entity.attachedToPlayer;
@@ -795,6 +1001,35 @@
             flag = true;
         }
 
+        // CraftBukkit start
+        org.bukkit.event.Cancellable event = null;
+        if (entity instanceof EntityLiving && !(entity instanceof EntityPlayer)) {
+            boolean isAnimal = entity instanceof EntityAnimal || entity instanceof EntityWaterAnimal || entity instanceof EntityGolem;
+            boolean isMonster = entity instanceof EntityMonster || entity instanceof EntityGhast || entity instanceof EntitySlime;
+            boolean isNpc = entity instanceof NPC;
+
+            if (spawnReason != SpawnReason.CUSTOM) {
+                if (isAnimal && !allowAnimals || isMonster && !allowMonsters || isNpc && !getServer().getServer().getSpawnNPCs()) {
+                    entity.dead = true;
+                    return false;
+                }
+            }
+
+            event = CraftEventFactory.callCreatureSpawnEvent((EntityLiving) entity, spawnReason);
+        } else if (entity instanceof EntityItem) {
+            event = CraftEventFactory.callItemSpawnEvent((EntityItem) entity);
+        } else if (entity.getBukkitEntity() instanceof org.bukkit.entity.Projectile) {
+            // Not all projectiles extend EntityProjectile, so check for Bukkit interface instead
+            event = CraftEventFactory.callProjectileLaunchEvent(entity);
+        }
+
+        if (event != null && (event.isCancelled() || entity.dead)) {
+            entity.dead = true;
+            return false;
+        }
+        // CraftBukkit end
+
+
         if (!flag && !this.isChunkLoaded(i, j, false)) {
             return false;
         } else {
@@ -817,6 +1052,7 @@
             ((IWorldAccess) this.u.get(i)).a(entity);
         }
 
+        entity.valid = true; // CraftBukkit
     }
 
     protected void c(Entity entity) {
@@ -824,11 +1060,22 @@
             ((IWorldAccess) this.u.get(i)).b(entity);
         }
 
+        // SportBukkit start - clean up players from maps
+        if(entity instanceof EntityHuman) {
+            for(PersistentBase map : this.worldMaps.a.values()) {
+                if(map instanceof WorldMap) {
+                    ((WorldMap) map).remove((EntityHuman) entity);
+                }
+            }
+        }
+        // SportBukkit end
+
+        entity.valid = false; // CraftBukkit
     }
 
     public void kill(Entity entity) {
         if (entity.isVehicle()) {
-            entity.ejectPassengers();
+            entity.az();
         }
 
         if (entity.isPassenger()) {
@@ -859,7 +1106,15 @@
             this.getChunkAt(i, j).b(entity);
         }
 
-        this.entityList.remove(entity);
+        // CraftBukkit start - Decrement loop variable field if we've already ticked this entity
+        int index = this.entityList.indexOf(entity);
+        if (index != -1) {
+            if (index <= this.tickPosition) {
+                this.tickPosition--;
+            }
+            this.entityList.remove(index);
+        }
+        // CraftBukkit end
         this.c(entity);
     }
 
@@ -874,8 +1129,14 @@
         int l = MathHelper.f(axisalignedbb.e) + 1;
         int i1 = MathHelper.floor(axisalignedbb.c) - 1;
         int j1 = MathHelper.f(axisalignedbb.f) + 1;
+        // CraftBukkit start - filter out large ranges
+        if((j - i) * (l - k) * (j1 - i1) > 32 * 32 * 32) {
+            MinecraftServer.LOGGER.warn("Filtered out large getCubes call %s,%s %s,%s %s,%s", i, j, k, l, i1, j1);
+            return false;
+        }
+        // CraftBukkit end
         WorldBorder worldborder = this.getWorldBorder();
-        boolean flag1 = entity != null && entity.bx();
+        boolean flag1 = entity != null && entity.br();
         boolean flag2 = entity != null && this.g(entity);
         IBlockData iblockdata = Blocks.STONE.getBlockData();
         BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
@@ -937,7 +1198,7 @@
                 Entity entity1 = (Entity) list.get(i);
 
                 if (!entity.x(entity1)) {
-                    AxisAlignedBB axisalignedbb1 = entity1.al();
+                    AxisAlignedBB axisalignedbb1 = entity1.ag();
 
                     if (axisalignedbb1 != null && axisalignedbb1.c(axisalignedbb)) {
                         arraylist.add(axisalignedbb1);
@@ -955,12 +1216,12 @@
     }
 
     public boolean g(Entity entity) {
-        double d0 = this.P.b();
-        double d1 = this.P.c();
-        double d2 = this.P.d();
-        double d3 = this.P.e();
+        double d0 = this.N.b();
+        double d1 = this.N.c();
+        double d2 = this.N.d();
+        double d3 = this.N.e();
 
-        if (entity.bx()) {
+        if (entity.br()) {
             ++d0;
             ++d1;
             --d2;
@@ -976,7 +1237,7 @@
     }
 
     public boolean a(AxisAlignedBB axisalignedbb) {
-        return this.a((Entity) null, axisalignedbb, true, Lists.newArrayList());
+        return this.a((Entity) null, axisalignedbb, true, Lists.<AxisAlignedBB>newArrayList()); // CraftBukkit - decompile error
     }
 
     public int a(float f) {
@@ -995,7 +1256,7 @@
         return this.worldProvider.a(this.worldData.getDayTime(), f);
     }
 
-    public float G() {
+    public float E() {
         return WorldProvider.a[this.worldProvider.a(this.worldData.getDayTime())];
     }
 
@@ -1046,10 +1307,15 @@
 
         for (i = 0; i < this.j.size(); ++i) {
             entity = (Entity) this.j.get(i);
+            // CraftBukkit start - Fixed an NPE
+            if (entity == null) {
+                continue;
+            }
+            // CraftBukkit end
 
             try {
                 ++entity.ticksLived;
-                entity.B_();
+                entity.A_();
             } catch (Throwable throwable) {
                 CrashReport crashreport = CrashReport.a(throwable, "Ticking entity");
                 CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Entity being ticked");
@@ -1060,7 +1326,11 @@
                     entity.appendEntityCrashDetails(crashreportsystemdetails);
                 }
 
-                throw new ReportedException(crashreport);
+                // SportBukkit start - recover from crash exceptions
+                //throw new ReportedException(crashreport);
+                entity.die();
+                CraftLogging.crashReport(crashreport);
+                // SportBukkit end
             }
 
             if (entity.dead) {
@@ -1094,9 +1364,11 @@
         CrashReportSystemDetails crashreportsystemdetails1;
         CrashReport crashreport1;
 
-        for (i = 0; i < this.entityList.size(); ++i) {
-            entity = (Entity) this.entityList.get(i);
-            Entity entity1 = entity.bH();
+        // CraftBukkit start - Use field for loop variable
+        for (this.tickPosition = 0; this.tickPosition < this.entityList.size(); ++this.tickPosition) {
+            entity = (Entity) this.entityList.get(this.tickPosition);
+            // CraftBukkit end
+            Entity entity1 = entity.bB();
 
             if (entity1 != null) {
                 if (!entity1.dead && entity1.w(entity)) {
@@ -1114,7 +1386,11 @@
                     crashreport1 = CrashReport.a(throwable1, "Ticking entity");
                     crashreportsystemdetails1 = crashreport1.a("Entity being ticked");
                     entity.appendEntityCrashDetails(crashreportsystemdetails1);
-                    throw new ReportedException(crashreport1);
+                    // SportBukkit start - recover from crash exceptions
+                    //throw new ReportedException(crashreport1);
+                    entity.die();
+                    CraftLogging.crashReport(crashreport1);
+                    // SportBukkit end
                 }
             }
 
@@ -1128,7 +1404,7 @@
                     this.getChunkAt(j, l).b(entity);
                 }
 
-                this.entityList.remove(i--);
+                this.entityList.remove(this.tickPosition--); // CraftBukkit - Use field for loop variable
                 this.c(entity);
             }
 
@@ -1136,7 +1412,14 @@
         }
 
         this.methodProfiler.c("blockEntities");
-        this.O = true;
+        this.M = true;
+        // CraftBukkit start - From below, clean up tile entities before ticking them
+        if (!this.tileEntityListUnload.isEmpty()) {
+            this.tileEntityListTick.removeAll(this.tileEntityListUnload);
+            this.tileEntityList.removeAll(this.tileEntityListUnload);
+            this.tileEntityListUnload.clear();
+        }
+        // CraftBukkit end
         Iterator iterator = this.tileEntityListTick.iterator();
 
         while (iterator.hasNext()) {
@@ -1145,16 +1428,20 @@
             if (!tileentity.y() && tileentity.u()) {
                 BlockPosition blockposition = tileentity.getPosition();
 
-                if (this.isLoaded(blockposition) && this.P.a(blockposition)) {
+                if (this.isLoaded(blockposition) && this.N.a(blockposition)) {
                     try {
-                        this.methodProfiler.a(tileentity.getClass().getSimpleName());
-                        ((ITickable) tileentity).e();
+                        this.methodProfiler.a(""/*tileentity.getClass().getSimpleName()*/); // CraftBukkit: SPIGOT-1900
+                        ((ITickable) tileentity).F_();
                         this.methodProfiler.b();
                     } catch (Throwable throwable2) {
                         crashreport1 = CrashReport.a(throwable2, "Ticking block entity");
                         crashreportsystemdetails1 = crashreport1.a("Block entity being ticked");
                         tileentity.a(crashreportsystemdetails1);
-                        throw new ReportedException(crashreport1);
+                        // SportBukkit start - recover from crash exceptions
+                        //throw new ReportedException(crashreport1);
+                        tileentity.remove(); // flag for removal, code below actually removes it
+                        CraftLogging.crashReport(crashreport1);
+                        // SportBukkit end
                     }
                 }
             }
@@ -1168,12 +1455,14 @@
             }
         }
 
-        this.O = false;
+        this.M = false;
+        /* CraftBukkit start - Moved up
         if (!this.tileEntityListUnload.isEmpty()) {
             this.tileEntityListTick.removeAll(this.tileEntityListUnload);
             this.tileEntityList.removeAll(this.tileEntityListUnload);
             this.tileEntityListUnload.clear();
         }
+        // CraftBukkit end */
 
         this.methodProfiler.c("pendingBlockEntities");
         if (!this.b.isEmpty()) {
@@ -1181,9 +1470,11 @@
                 TileEntity tileentity1 = (TileEntity) this.b.get(i1);
 
                 if (!tileentity1.y()) {
+                    /* CraftBukkit start - Order matters, moved down
                     if (!this.tileEntityList.contains(tileentity1)) {
                         this.a(tileentity1);
                     }
+                    // CraftBukkit end */
 
                     if (this.isLoaded(tileentity1.getPosition())) {
                         Chunk chunk = this.getChunkAtWorldCoords(tileentity1.getPosition());
@@ -1191,6 +1482,12 @@
 
                         chunk.a(tileentity1.getPosition(), tileentity1);
                         this.notify(tileentity1.getPosition(), iblockdata, iblockdata, 3);
+                        // CraftBukkit start
+                        // From above, don't screw this up - SPIGOT-1746
+                        if (!this.tileEntityList.contains(tileentity1)) {
+                            this.a(tileentity1);
+                        }
+                        // CraftBukkit end
                     }
                 }
             }
@@ -1222,7 +1519,7 @@
     }
 
     public void b(Collection<TileEntity> collection) {
-        if (this.O) {
+        if (this.M) {
             this.b.addAll(collection);
         } else {
             Iterator iterator = collection.iterator();
@@ -1241,85 +1538,81 @@
     }
 
     public void entityJoinedWorld(Entity entity, boolean flag) {
-        int i;
-        int j;
-
-        if (!(entity instanceof EntityHuman)) {
-            i = MathHelper.floor(entity.locX);
-            j = MathHelper.floor(entity.locZ);
-            boolean flag1 = true;
-
-            if (flag && !this.isAreaLoaded(i - 32, 0, j - 32, i + 32, 0, j + 32, true)) {
-                return;
+        int i = MathHelper.floor(entity.locX);
+        int j = MathHelper.floor(entity.locZ);
+        boolean flag1 = true;
+
+        // CraftBukkit start - Use neighbor cache instead of looking up
+        Chunk startingChunk = this.getChunkIfLoaded(i >> 4, j >> 4);
+        if (!flag || (startingChunk != null && startingChunk.areNeighborsLoaded(2)) /* this.isAreaLoaded(i - b0, 0, j - b0, i + b0, 0, j + b0) */) {
+            // CraftBukkit end
+            entity.M = entity.locX;
+            entity.N = entity.locY;
+            entity.O = entity.locZ;
+            entity.lastYaw = entity.yaw;
+            entity.lastPitch = entity.pitch;
+            if (flag && entity.aa) {
+                ++entity.ticksLived;
+                if (entity.isPassenger()) {
+                    entity.aw();
+                } else {
+                    entity.A_();
+                }
             }
-        }
 
-        entity.M = entity.locX;
-        entity.N = entity.locY;
-        entity.O = entity.locZ;
-        entity.lastYaw = entity.yaw;
-        entity.lastPitch = entity.pitch;
-        if (flag && entity.aa) {
-            ++entity.ticksLived;
-            if (entity.isPassenger()) {
-                entity.aC();
-            } else {
-                entity.B_();
+            this.methodProfiler.a("chunkCheck");
+            if (Double.isNaN(entity.locX) || Double.isInfinite(entity.locX)) {
+                entity.locX = entity.M;
             }
-        }
-
-        this.methodProfiler.a("chunkCheck");
-        if (Double.isNaN(entity.locX) || Double.isInfinite(entity.locX)) {
-            entity.locX = entity.M;
-        }
 
-        if (Double.isNaN(entity.locY) || Double.isInfinite(entity.locY)) {
-            entity.locY = entity.N;
-        }
+            if (Double.isNaN(entity.locY) || Double.isInfinite(entity.locY)) {
+                entity.locY = entity.N;
+            }
 
-        if (Double.isNaN(entity.locZ) || Double.isInfinite(entity.locZ)) {
-            entity.locZ = entity.O;
-        }
+            if (Double.isNaN(entity.locZ) || Double.isInfinite(entity.locZ)) {
+                entity.locZ = entity.O;
+            }
 
-        if (Double.isNaN((double) entity.pitch) || Double.isInfinite((double) entity.pitch)) {
-            entity.pitch = entity.lastPitch;
-        }
+            if (Double.isNaN((double) entity.pitch) || Double.isInfinite((double) entity.pitch)) {
+                entity.pitch = entity.lastPitch;
+            }
 
-        if (Double.isNaN((double) entity.yaw) || Double.isInfinite((double) entity.yaw)) {
-            entity.yaw = entity.lastYaw;
-        }
+            if (Double.isNaN((double) entity.yaw) || Double.isInfinite((double) entity.yaw)) {
+                entity.yaw = entity.lastYaw;
+            }
 
-        i = MathHelper.floor(entity.locX / 16.0D);
-        j = MathHelper.floor(entity.locY / 16.0D);
-        int k = MathHelper.floor(entity.locZ / 16.0D);
+            int k = MathHelper.floor(entity.locX / 16.0D);
+            int l = MathHelper.floor(entity.locY / 16.0D);
+            int i1 = MathHelper.floor(entity.locZ / 16.0D);
 
-        if (!entity.aa || entity.ab != i || entity.ac != j || entity.ad != k) {
-            if (entity.aa && this.isChunkLoaded(entity.ab, entity.ad, true)) {
-                this.getChunkAt(entity.ab, entity.ad).a(entity, entity.ac);
-            }
+            if (!entity.aa || entity.ab != k || entity.ac != l || entity.ad != i1) {
+                if (entity.aa && this.isChunkLoaded(entity.ab, entity.ad, true)) {
+                    this.getChunkAt(entity.ab, entity.ad).a(entity, entity.ac);
+                }
 
-            if (!entity.bB() && !this.isChunkLoaded(i, k, true)) {
-                entity.aa = false;
-            } else {
-                this.getChunkAt(i, k).a(entity);
+                if (!entity.bv() && !this.isChunkLoaded(k, i1, true)) {
+                    entity.aa = false;
+                } else {
+                    this.getChunkAt(k, i1).a(entity);
+                }
             }
-        }
 
-        this.methodProfiler.b();
-        if (flag && entity.aa) {
-            Iterator iterator = entity.bD().iterator();
+            this.methodProfiler.b();
+            if (flag && entity.aa) {
+                Iterator iterator = entity.bx().iterator();
 
-            while (iterator.hasNext()) {
-                Entity entity1 = (Entity) iterator.next();
+                while (iterator.hasNext()) {
+                    Entity entity1 = (Entity) iterator.next();
 
-                if (!entity1.dead && entity1.bH() == entity) {
-                    this.h(entity1);
-                } else {
-                    entity1.stopRiding();
+                    if (!entity1.dead && entity1.bB() == entity) {
+                        this.h(entity1);
+                    } else {
+                        entity1.stopRiding();
+                    }
                 }
             }
-        }
 
+        }
     }
 
     public boolean b(AxisAlignedBB axisalignedbb) {
@@ -1451,7 +1744,7 @@
                         Block block = iblockdata.getBlock();
 
                         if (iblockdata.getMaterial() == material) {
-                            double d0 = (double) ((float) (l1 + 1) - BlockFluids.b(((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue()));
+                            double d0 = (double) ((float) (l1 + 1) - BlockFluids.e(((Integer) iblockdata.get(BlockFluids.LEVEL)).intValue()));
 
                             if ((double) l >= d0) {
                                 flag = true;
@@ -1463,7 +1756,7 @@
             }
 
             blockposition_pooledblockposition.t();
-            if (vec3d.b() > 0.0D && entity.bm()) {
+            if (vec3d.b() > 0.0D && entity.bg()) {
                 vec3d = vec3d.a();
                 double d1 = 0.014D;
 
@@ -1500,6 +1793,41 @@
         return false;
     }
 
+    // SportBukkit start
+    public @Nullable BlockPosition getLargestBlockIntersection(AxisAlignedBB aabb, Material material) {
+        int xMin = MathHelper.floor(aabb.a);
+        int xMax = MathHelper.f(aabb.d); // this is ceil(), make sure it matches the method above!
+        int yMin = MathHelper.floor(aabb.b);
+        int yMax = MathHelper.f(aabb.e);
+        int zMin = MathHelper.floor(aabb.c);
+        int zMax = MathHelper.f(aabb.f);
+
+        final BlockPosition.MutableBlockPosition pos = new BlockPosition.MutableBlockPosition(0, 0, 0);
+        double maxVolume = 0;
+        int xBlock = 0, yBlock = 0, zBlock = 0;
+
+        for (int x = xMin; x < xMax; ++x) {
+            for (int y = yMin; y < yMax; ++y) {
+                for (int z = zMin; z < zMax; ++z) {
+                    final IBlockData type = this.getType(pos.c(x, y, z));
+                    if (material.equals(type.getBlock().material)) {
+                        final double volume = (Math.min(aabb.d, x + 1) - Math.max(aabb.a, x)) *
+                                              (Math.min(aabb.e, y + 1) - Math.max(aabb.b, y)) *
+                                              (Math.min(aabb.f, z + 1) - Math.max(aabb.c, z));
+                        if(volume > maxVolume) {
+                            maxVolume = volume;
+                            xBlock = x; yBlock = y; zBlock = z;
+                            if(maxVolume >= 1) return new BlockPosition(x, y, z);
+                        }
+                    }
+                }
+            }
+        }
+
+        return maxVolume > 0 ? new BlockPosition(xBlock, yBlock, zBlock) : null;
+    }
+    // SportBukkit end
+
     public Explosion explode(@Nullable Entity entity, double d0, double d1, double d2, float f, boolean flag) {
         return this.createExplosion(entity, d0, d1, d2, f, false, flag);
     }
@@ -1548,22 +1876,34 @@
     public boolean douseFire(@Nullable EntityHuman entityhuman, BlockPosition blockposition, EnumDirection enumdirection) {
         blockposition = blockposition.shift(enumdirection);
         if (this.getType(blockposition).getBlock() == Blocks.FIRE) {
-            this.a(entityhuman, 1009, blockposition, 0);
-            this.setAir(blockposition);
+            // CraftBukkit start
+            if (entityhuman instanceof EntityPlayer) {
+                if (((EntityPlayer) entityhuman).playerInteractManager.breakBlock(blockposition)) {
+                    this.a(entityhuman, 1009, blockposition, 0);
+                }
+            }
+            // CraftBukkit end
             return true;
         } else {
             return false;
         }
     }
 
+    public Map<BlockPosition, TileEntity> capturedTileEntities = Maps.newHashMap();
     @Nullable
     public TileEntity getTileEntity(BlockPosition blockposition) {
         if (this.E(blockposition)) {
             return null;
         } else {
+            // CraftBukkit start
+            if (capturedTileEntities.containsKey(blockposition)) {
+                return capturedTileEntities.get(blockposition);
+            }
+            // CraftBukkit end
+
             TileEntity tileentity = null;
 
-            if (this.O) {
+            if (this.M) {
                 tileentity = this.F(blockposition);
             }
 
@@ -1595,7 +1935,15 @@
     public void setTileEntity(BlockPosition blockposition, @Nullable TileEntity tileentity) {
         if (!this.E(blockposition)) {
             if (tileentity != null && !tileentity.y()) {
-                if (this.O) {
+            // CraftBukkit start
+            if (captureBlockStates) {
+                tileentity.a(this);
+                tileentity.setPosition(blockposition);
+                capturedTileEntities.put(blockposition, tileentity);
+                return;
+            }
+            // CraftBukkit end
+                if (this.M) {
                     tileentity.setPosition(blockposition);
                     Iterator iterator = this.b.iterator();
 
@@ -1621,7 +1969,7 @@
     public void s(BlockPosition blockposition) {
         TileEntity tileentity = this.getTileEntity(blockposition);
 
-        if (tileentity != null && this.O) {
+        if (tileentity != null && this.M) {
             tileentity.z();
             this.b.remove(tileentity);
         } else {
@@ -1641,7 +1989,7 @@
     }
 
     public boolean t(BlockPosition blockposition) {
-        AxisAlignedBB axisalignedbb = this.getType(blockposition).d(this, blockposition);
+        AxisAlignedBB axisalignedbb = this.getType(blockposition).c(this, blockposition);
 
         return axisalignedbb != Block.k && axisalignedbb.a() >= 1.0D;
     }
@@ -1655,18 +2003,18 @@
             if (chunk != null && !chunk.isEmpty()) {
                 IBlockData iblockdata = this.getType(blockposition);
 
-                return iblockdata.getMaterial().k() && iblockdata.g();
+                return iblockdata.getMaterial().k() && iblockdata.h();
             } else {
                 return flag;
             }
         }
     }
 
-    public void J() {
+    public void H() {
         int i = this.a(1.0F);
 
-        if (i != this.L) {
-            this.L = i;
+        if (i != this.J) {
+            this.J = i;
         }
 
     }
@@ -1680,7 +2028,7 @@
         this.t();
     }
 
-    protected void K() {
+    protected void I() {
         if (this.worldData.hasStorm()) {
             this.o = 1.0F;
             if (this.worldData.isThundering()) {
@@ -1754,6 +2102,14 @@
                 }
 
                 this.o = MathHelper.a(this.o, 0.0F, 1.0F);
+
+                // CraftBukkit start
+                for (int idx = 0; idx < this.players.size(); ++idx) {
+                    if (((EntityPlayer) this.players.get(idx)).world == this) {
+                        ((EntityPlayer) this.players.get(idx)).tickWeather();
+                    }
+                }
+                // CraftBukkit end
             }
         }
     }
@@ -1860,38 +2216,35 @@
                 return i;
             } else {
                 BlockPosition.PooledBlockPosition blockposition_pooledblockposition = BlockPosition.PooledBlockPosition.s();
+                EnumDirection[] aenumdirection = EnumDirection.values();
+                int k = aenumdirection.length;
 
-                try {
-                    EnumDirection[] aenumdirection = EnumDirection.values();
-                    int k = aenumdirection.length;
-
-                    for (int l = 0; l < k; ++l) {
-                        EnumDirection enumdirection = aenumdirection[l];
-
-                        blockposition_pooledblockposition.j(blockposition).d(enumdirection);
-                        int i1 = this.getBrightness(enumskyblock, blockposition_pooledblockposition) - j;
-
-                        if (i1 > i) {
-                            i = i1;
-                        }
+                for (int l = 0; l < k; ++l) {
+                    EnumDirection enumdirection = aenumdirection[l];
 
-                        if (i >= 14) {
-                            int j1 = i;
+                    blockposition_pooledblockposition.j(blockposition).d(enumdirection);
+                    int i1 = this.getBrightness(enumskyblock, blockposition_pooledblockposition) - j;
 
-                            return j1;
-                        }
+                    if (i1 > i) {
+                        i = i1;
                     }
 
-                    return i;
-                } finally {
-                    blockposition_pooledblockposition.t();
+                    if (i >= 14) {
+                        return i;
+                    }
                 }
+
+                blockposition_pooledblockposition.t();
+                return i;
             }
         }
     }
 
     public boolean c(EnumSkyBlock enumskyblock, BlockPosition blockposition) {
-        if (!this.areChunksLoaded(blockposition, 17, false)) {
+        // CraftBukkit start - Use neighbor cache instead of looking up
+        Chunk chunk = this.getChunkIfLoaded(blockposition.getX() >> 4, blockposition.getZ() >> 4);
+        if (chunk == null || !chunk.areNeighborsLoaded(1) /*!this.areChunksLoaded(blockposition, 17, false)*/) {
+            // CraftBukkit end
             return false;
         } else {
             int i = 0;
@@ -1913,12 +2266,12 @@
             int k3;
 
             if (l > k) {
-                this.J[j++] = 133152;
+                this.H[j++] = 133152;
             } else if (l < k) {
-                this.J[j++] = 133152 | k << 18;
+                this.H[j++] = 133152 | k << 18;
 
                 while (i < j) {
-                    l1 = this.J[i++];
+                    l1 = this.H[i++];
                     i2 = (l1 & 63) - 32 + i1;
                     j2 = (l1 >> 6 & 63) - 32 + j1;
                     k2 = (l1 >> 12 & 63) - 32 + k1;
@@ -1947,8 +2300,8 @@
                                     int j5 = Math.max(1, this.getType(blockposition_pooledblockposition).c());
 
                                     l2 = this.getBrightness(enumskyblock, blockposition_pooledblockposition);
-                                    if (l2 == l3 - j5 && j < this.J.length) {
-                                        this.J[j++] = k4 - i1 + 32 | l4 - j1 + 32 << 6 | i5 - k1 + 32 << 12 | l3 - j5 << 18;
+                                    if (l2 == l3 - j5 && j < this.H.length) {
+                                        this.H[j++] = k4 - i1 + 32 | l4 - j1 + 32 << 6 | i5 - k1 + 32 << 12 | l3 - j5 << 18;
                                     }
                                 }
 
@@ -1965,7 +2318,7 @@
             this.methodProfiler.a("checkedPosition < toCheckCount");
 
             while (i < j) {
-                l1 = this.J[i++];
+                l1 = this.H[i++];
                 i2 = (l1 & 63) - 32 + i1;
                 j2 = (l1 >> 6 & 63) - 32 + j1;
                 k2 = (l1 >> 12 & 63) - 32 + k1;
@@ -1979,31 +2332,31 @@
                         i3 = Math.abs(i2 - i1);
                         j3 = Math.abs(j2 - j1);
                         k3 = Math.abs(k2 - k1);
-                        boolean flag = j < this.J.length - 6;
+                        boolean flag = j < this.H.length - 6;
 
                         if (i3 + j3 + k3 < 17 && flag) {
                             if (this.getBrightness(enumskyblock, blockposition2.west()) < l2) {
-                                this.J[j++] = i2 - 1 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
+                                this.H[j++] = i2 - 1 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
                             }
 
                             if (this.getBrightness(enumskyblock, blockposition2.east()) < l2) {
-                                this.J[j++] = i2 + 1 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
+                                this.H[j++] = i2 + 1 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
                             }
 
                             if (this.getBrightness(enumskyblock, blockposition2.down()) < l2) {
-                                this.J[j++] = i2 - i1 + 32 + (j2 - 1 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
+                                this.H[j++] = i2 - i1 + 32 + (j2 - 1 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
                             }
 
                             if (this.getBrightness(enumskyblock, blockposition2.up()) < l2) {
-                                this.J[j++] = i2 - i1 + 32 + (j2 + 1 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
+                                this.H[j++] = i2 - i1 + 32 + (j2 + 1 - j1 + 32 << 6) + (k2 - k1 + 32 << 12);
                             }
 
                             if (this.getBrightness(enumskyblock, blockposition2.north()) < l2) {
-                                this.J[j++] = i2 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 - 1 - k1 + 32 << 12);
+                                this.H[j++] = i2 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 - 1 - k1 + 32 << 12);
                             }
 
                             if (this.getBrightness(enumskyblock, blockposition2.south()) < l2) {
-                                this.J[j++] = i2 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 + 1 - k1 + 32 << 12);
+                                this.H[j++] = i2 - i1 + 32 + (j2 - j1 + 32 << 6) + (k2 + 1 - k1 + 32 << 12);
                             }
                         }
                     }
@@ -2058,7 +2411,7 @@
         while (iterator.hasNext()) {
             Entity entity = (Entity) iterator.next();
 
-            if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply(entity)) {
+            if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply((T) entity)) {
                 arraylist.add(entity);
             }
         }
@@ -2073,7 +2426,7 @@
         while (iterator.hasNext()) {
             Entity entity = (Entity) iterator.next();
 
-            if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply(entity)) {
+            if (oclass.isAssignableFrom(entity.getClass()) && predicate.apply((T) entity)) { // CraftBukkit - fix decompile error
                 arraylist.add(entity);
             }
         }
@@ -2122,7 +2475,7 @@
             }
         }
 
-        return entity;
+        return (T) entity; // CraftBukkit fix decompile error
     }
 
     @Nullable
@@ -2132,7 +2485,7 @@
 
     public void b(BlockPosition blockposition, TileEntity tileentity) {
         if (this.isLoaded(blockposition)) {
-            this.getChunkAtWorldCoords(blockposition).markDirty();
+            this.getChunkAtWorldCoords(blockposition).e();
         }
 
     }
@@ -2143,8 +2496,17 @@
 
         while (iterator.hasNext()) {
             Entity entity = (Entity) iterator.next();
-
-            if ((!(entity instanceof EntityInsentient) || !((EntityInsentient) entity).isPersistent()) && oclass.isAssignableFrom(entity.getClass())) {
+            // CraftBukkit start - Split out persistent check, don't apply it to special persistent mobs
+            if (entity instanceof EntityInsentient) {
+                EntityInsentient entityinsentient = (EntityInsentient) entity;
+                if (entityinsentient.isTypeNotPersistent() && entityinsentient.isPersistent()) {
+                    continue;
+                }
+            }
+            
+            if (oclass.isAssignableFrom(entity.getClass())) {
+            // if ((!(entity instanceof EntityInsentient) || !((EntityInsentient) entity).isPersistent()) && oclass.isAssignableFrom(entity.getClass())) {
+                // CraftBukkit end
                 ++i;
             }
         }
@@ -2153,12 +2515,18 @@
     }
 
     public void a(Collection<Entity> collection) {
-        this.entityList.addAll(collection);
+        // CraftBukkit start
+        // this.entityList.addAll(collection);
         Iterator iterator = collection.iterator();
 
         while (iterator.hasNext()) {
             Entity entity = (Entity) iterator.next();
 
+            if (entity == null) {
+                continue;
+            }
+            this.entityList.add(entity);
+            // CraftBukkit end
             this.b(entity);
         }
 
@@ -2170,12 +2538,18 @@
 
     public boolean a(Block block, BlockPosition blockposition, boolean flag, EnumDirection enumdirection, @Nullable Entity entity) {
         IBlockData iblockdata = this.getType(blockposition);
-        AxisAlignedBB axisalignedbb = flag ? null : block.getBlockData().d(this, blockposition);
+        AxisAlignedBB axisalignedbb = flag ? null : block.getBlockData().c(this, blockposition);
+
+        // CraftBukkit start - store default return
+        boolean defaultReturn = axisalignedbb != Block.k && !this.a(axisalignedbb.a(blockposition), entity) ? false : (iblockdata.getMaterial() == Material.ORIENTABLE && block == Blocks.ANVIL ? true : iblockdata.getMaterial().isReplaceable() && block.canPlace(this, blockposition, enumdirection));
+        BlockCanBuildEvent event = new BlockCanBuildEvent(this.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftMagicNumbers.getId(block), defaultReturn);
+        this.getServer().getPluginManager().callEvent(event);
 
-        return axisalignedbb != Block.k && !this.a(axisalignedbb.a(blockposition), entity) ? false : (iblockdata.getMaterial() == Material.ORIENTABLE && block == Blocks.ANVIL ? true : iblockdata.getMaterial().isReplaceable() && block.canPlace(this, blockposition, enumdirection));
+        return event.isBuildable();
+        // CraftBukkit end
     }
 
-    public int getSeaLevel() {
+    public int K() {
         return this.a;
     }
 
@@ -2187,7 +2561,7 @@
         return this.getType(blockposition).b(this, blockposition, enumdirection);
     }
 
-    public WorldType N() {
+    public WorldType L() {
         return this.worldData.getType();
     }
 
@@ -2230,7 +2604,7 @@
     public int getBlockFacePower(BlockPosition blockposition, EnumDirection enumdirection) {
         IBlockData iblockdata = this.getType(blockposition);
 
-        return iblockdata.l() ? this.getBlockPower(blockposition) : iblockdata.a((IBlockAccess) this, blockposition, enumdirection);
+        return iblockdata.m() ? this.getBlockPower(blockposition) : iblockdata.a((IBlockAccess) this, blockposition, enumdirection);
     }
 
     public boolean isBlockIndirectlyPowered(BlockPosition blockposition) {
@@ -2275,6 +2649,16 @@
         return this.a(d0, d1, d2, d3, predicate);
     }
 
+    // SportBukkit start - add filter parameter
+    public @Nullable EntityHuman findNearbyPlayer(Entity entity, double range, Predicate<? super EntityHuman> filter) {
+        return a(entity.locX, entity.locY, entity.locZ, range, com.google.common.base.Predicates.and((Predicate) filter, IEntitySelector.e));
+    }
+
+    public @Nullable EntityHuman findNearbyMortalPlayer(Entity entity, double range, Predicate<? super EntityHuman> filter) {
+        return a(entity.locX, entity.locY, entity.locZ, range, com.google.common.base.Predicates.and((Predicate) filter, IEntitySelector.d));
+    }
+    // SportBukkit end
+
     @Nullable
     public EntityHuman a(double d0, double d1, double d2, double d3, Predicate<Entity> predicate) {
         double d4 = -1.0D;
@@ -2282,6 +2666,11 @@
 
         for (int i = 0; i < this.players.size(); ++i) {
             EntityHuman entityhuman1 = (EntityHuman) this.players.get(i);
+            // CraftBukkit start - Fixed an NPE
+            if (entityhuman1 == null || !entityhuman1.isAlive()) { // SportBukkit allow for more complex logic by using the "is alive" method
+                continue;
+            }
+            // CraftBukkit end
 
             if (predicate.apply(entityhuman1)) {
                 double d5 = entityhuman1.d(d0, d1, d2);
@@ -2297,9 +2686,17 @@
     }
 
     public boolean isPlayerNearby(double d0, double d1, double d2, double d3) {
+        // SportBukkit start - add filter parameter
+        return isPlayerNearby(d0, d1, d2, d3, com.google.common.base.Predicates.alwaysTrue());
+    }
+
+    public boolean isPlayerNearby(double d0, double d1, double d2, double d3, Predicate<EntityHuman> filter) {
+        // SportBukkit end
         for (int i = 0; i < this.players.size(); ++i) {
             EntityHuman entityhuman = (EntityHuman) this.players.get(i);
 
+            if(!filter.apply(entityhuman)) continue; // SportBukkit - check filter
+
             if (IEntitySelector.e.apply(entityhuman)) {
                 double d4 = entityhuman.d(d0, d1, d2);
 
@@ -2339,7 +2736,7 @@
                 }
 
                 if (entityhuman1.isInvisible()) {
-                    float f = entityhuman1.cU();
+                    float f = entityhuman1.cO();
 
                     if (f < 0.1F) {
                         f = 0.1F;
@@ -2349,7 +2746,7 @@
                 }
 
                 if (function != null) {
-                    d7 *= ((Double) MoreObjects.firstNonNull(function.apply(entityhuman1), Double.valueOf(1.0D))).doubleValue();
+                    d7 *= ((Double) Objects.firstNonNull(function.apply(entityhuman1), Double.valueOf(1.0D))).doubleValue();
                 }
 
                 if ((d4 < 0.0D || Math.abs(entityhuman1.locY - d1) < d4 * d4) && (d3 < 0.0D || d6 < d7 * d7) && (d5 == -1.0D || d6 < d5)) {
@@ -2450,6 +2847,16 @@
 
     public void everyoneSleeping() {}
 
+    // CraftBukkit start
+    // Calls the method that checks to see if players are sleeping
+    // Called by CraftPlayer.setPermanentSleeping()
+    public void checkSleepStatus() {
+        if (!this.isClientSide) {
+            this.everyoneSleeping();
+        }
+    }
+    // CraftBukkit end
+
     public float h(float f) {
         return (this.p + (this.q - this.p) * f) * this.j(f);
     }
@@ -2458,16 +2865,16 @@
         return this.n + (this.o - this.n) * f;
     }
 
-    public boolean X() {
+    public boolean V() {
         return (double) this.h(1.0F) > 0.9D;
     }
 
-    public boolean isRaining() {
+    public boolean W() {
         return (double) this.j(1.0F) > 0.2D;
     }
 
     public boolean isRainingAt(BlockPosition blockposition) {
-        if (!this.isRaining()) {
+        if (!this.W()) {
             return false;
         } else if (!this.h(blockposition)) {
             return false;
@@ -2487,7 +2894,7 @@
     }
 
     @Nullable
-    public PersistentCollection Z() {
+    public PersistentCollection X() {
         return this.worldMaps;
     }
 
@@ -2537,7 +2944,7 @@
         return 256;
     }
 
-    public int ab() {
+    public int Z() {
         return this.worldProvider.n() ? 128 : 256;
     }
 
@@ -2589,12 +2996,12 @@
 
     }
 
-    public Calendar ae() {
+    public Calendar ac() {
         if (this.getTime() % 600L == 0L) {
-            this.N.setTimeInMillis(MinecraftServer.aw());
+            this.L.setTimeInMillis(MinecraftServer.aw());
         }
 
-        return this.N;
+        return this.L;
     }
 
     public Scoreboard getScoreboard() {
@@ -2607,16 +3014,23 @@
         while (iterator.hasNext()) {
             EnumDirection enumdirection = (EnumDirection) iterator.next();
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
+            // SportBukkit start - extract method
+            updateComparator(blockposition1, block, enumdirection, blockposition);
+        }
+    }
 
+    public void updateComparator(BlockPosition blockposition1, Block block, EnumDirection enumdirection, BlockPosition blockposition) {
+        {
+            // SportBukkit end
             if (this.isLoaded(blockposition1)) {
                 IBlockData iblockdata = this.getType(blockposition1);
 
-                if (Blocks.UNPOWERED_COMPARATOR.D(iblockdata)) {
+                if (Blocks.UNPOWERED_COMPARATOR.E(iblockdata)) {
                     iblockdata.doPhysics(this, blockposition1, block, blockposition);
-                } else if (iblockdata.l()) {
+                } else if (iblockdata.m()) {
                     blockposition1 = blockposition1.shift(enumdirection);
                     iblockdata = this.getType(blockposition1);
-                    if (Blocks.UNPOWERED_COMPARATOR.D(iblockdata)) {
+                    if (Blocks.UNPOWERED_COMPARATOR.E(iblockdata)) {
                         iblockdata.doPhysics(this, blockposition1, block, blockposition);
                     }
                 }
@@ -2630,7 +3044,7 @@
         float f = 0.0F;
 
         if (this.isLoaded(blockposition)) {
-            f = this.G();
+            f = this.E();
             i = this.getChunkAtWorldCoords(blockposition).x();
         }
 
@@ -2641,24 +3055,24 @@
         return this.getWorldData().getDifficulty();
     }
 
-    public int ah() {
-        return this.L;
+    public int af() {
+        return this.J;
     }
 
     public void c(int i) {
-        this.L = i;
+        this.J = i;
     }
 
     public void d(int i) {
-        this.M = i;
+        this.K = i;
     }
 
-    public PersistentVillage ak() {
+    public PersistentVillage ai() {
         return this.villages;
     }
 
     public WorldBorder getWorldBorder() {
-        return this.P;
+        return this.N;
     }
 
     public boolean e(int i, int j) {
@@ -2667,14 +3081,14 @@
         int l = j * 16 + 8 - blockposition.getZ();
         boolean flag = true;
 
-        return k >= -128 && k <= 128 && l >= -128 && l <= 128;
+        return k >= -128 && k <= 128 && l >= -128 && l <= 128 && this.keepSpawnInMemory; // CraftBukkit - Added 'this.keepSpawnInMemory'
     }
 
     public void a(Packet<?> packet) {
         throw new UnsupportedOperationException("Can\'t send packets to server unless you\'re on the client.");
     }
 
-    public LootTableRegistry getLootTableRegistry() {
+    public LootTableRegistry ak() {
         return this.B;
     }
 
