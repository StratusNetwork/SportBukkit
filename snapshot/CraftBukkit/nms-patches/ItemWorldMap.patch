--- a/net/minecraft/server/ItemWorldMap.java
+++ b/net/minecraft/server/ItemWorldMap.java
@@ -5,6 +5,11 @@
 import com.google.common.collect.Multisets;
 import javax.annotation.Nullable;
 
+// CraftBukkit start
+import org.bukkit.Bukkit;
+import org.bukkit.event.server.MapInitializeEvent;
+// CraftBukkit end
+
 public class ItemWorldMap extends ItemWorldMapBase {
 
     protected ItemWorldMap() {
@@ -12,17 +17,19 @@
     }
 
     public static ItemStack a(World world, double d0, double d1, byte b0, boolean flag, boolean flag1) {
-        ItemStack itemstack = new ItemStack(Items.FILLED_MAP, 1, world.b("map"));
+        World worldMain = world.getServer().getServer().worlds.get(0); // CraftBukkit - store reference to primary world
+        ItemStack itemstack = new ItemStack(Items.FILLED_MAP, 1, worldMain.b("map")); // CraftBukkit - use primary world for maps
         String s = "map_" + itemstack.getData();
         WorldMap worldmap = new WorldMap(s);
 
-        world.a(s, (PersistentBase) worldmap);
+        worldMain.a(s, (PersistentBase) worldmap); // CraftBukkit
         worldmap.scale = b0;
         worldmap.a(d0, d1, worldmap.scale);
-        worldmap.map = (byte) world.worldProvider.getDimensionManager().getDimensionID();
+        worldmap.map = (byte) ((WorldServer) world).dimension; // CraftBukkit - use bukkit dimension
         worldmap.track = flag;
         worldmap.unlimitedTracking = flag1;
         worldmap.c();
+        org.bukkit.craftbukkit.event.CraftEventFactory.callEvent(new org.bukkit.event.server.MapInitializeEvent(worldmap.mapView)); // CraftBukkit
         return itemstack;
     }
 
@@ -34,19 +41,39 @@
         if (worldmap == null && !world.isClientSide) {
             itemstack.setData(world.b("map"));
             s = "map_" + itemstack.getData();
+            // Sportbukkit start
+            worldmap = getNewMap(s, world);
+        }
+        return worldmap;
+    }
+
+    public WorldMap getNewMap(World world, int id) {
+        return getNewMap("map_" + id, world);
+    }
+
+    private WorldMap getNewMap(String s, World world) {
+        WorldMap worldmap;
+        {
+            // Sportbukkit end
             worldmap = new WorldMap(s);
             worldmap.scale = 3;
             worldmap.a((double) world.getWorldData().b(), (double) world.getWorldData().d(), worldmap.scale);
-            worldmap.map = (byte) world.worldProvider.getDimensionManager().getDimensionID();
+            worldmap.map = (byte) ((WorldServer) world).dimension; // CraftBukkit - fixes Bukkit multiworld maps
             worldmap.c();
             world.a(s, (PersistentBase) worldmap);
+
+            // CraftBukkit start
+            MapInitializeEvent event = new MapInitializeEvent(worldmap.mapView);
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            // CraftBukkit end
         }
 
         return worldmap;
     }
 
     public void a(World world, Entity entity, WorldMap worldmap) {
-        if (world.worldProvider.getDimensionManager().getDimensionID() == worldmap.map && entity instanceof EntityHuman) {
+        // CraftBukkit - world.worldProvider -> ((WorldServer) world)
+        if (((WorldServer) world).dimension == worldmap.map && entity instanceof EntityHuman) {
             int i = 1 << worldmap.scale;
             int j = worldmap.centerX;
             int k = worldmap.centerZ;
@@ -89,9 +116,9 @@
 
                                     l3 = l3 * l3 * 31287121 + l3 * 11;
                                     if ((l3 >> 20 & 1) == 0) {
-                                        hashmultiset.add(Blocks.DIRT.getBlockData().set(BlockDirt.VARIANT, BlockDirt.EnumDirtVariant.DIRT).a((IBlockAccess) world, BlockPosition.ZERO), 10);
+                                        hashmultiset.add(Blocks.DIRT.getBlockData().set(BlockDirt.VARIANT, BlockDirt.EnumDirtVariant.DIRT).g(), 10);
                                     } else {
-                                        hashmultiset.add(Blocks.STONE.getBlockData().set(BlockStone.VARIANT, BlockStone.EnumStoneVariant.STONE).a((IBlockAccess) world, BlockPosition.ZERO), 100);
+                                        hashmultiset.add(Blocks.STONE.getBlockData().set(BlockStone.VARIANT, BlockStone.EnumStoneVariant.STONE).g(), 100);
                                     }
 
                                     d1 = 100.0D;
@@ -106,9 +133,8 @@
                                             if (k4 > 1) {
                                                 do {
                                                     --k4;
-                                                    iblockdata = chunk.a(i4 + i3, k4, j4 + j3);
-                                                    blockposition_mutableblockposition.c((chunk.locX << 4) + i4 + i3, k4, (chunk.locZ << 4) + j4 + j3);
-                                                } while (iblockdata.a((IBlockAccess) world, blockposition_mutableblockposition) == MaterialMapColor.c && k4 > 0);
+                                                    iblockdata = chunk.getBlockData(blockposition_mutableblockposition.c(i4 + i3, k4, j4 + j3));
+                                                } while (iblockdata.g() == MaterialMapColor.b && k4 > 0);
 
                                                 if (k4 > 0 && iblockdata.getMaterial().isLiquid()) {
                                                     int l4 = k4 - 1;
@@ -125,7 +151,7 @@
                                             }
 
                                             d1 += (double) k4 / (double) (i * i);
-                                            hashmultiset.add(iblockdata.a((IBlockAccess) world, blockposition_mutableblockposition));
+                                            hashmultiset.add(iblockdata.g());
                                         }
                                     }
                                 }
@@ -142,9 +168,9 @@
                                     b0 = 0;
                                 }
 
-                                MaterialMapColor materialmapcolor = (MaterialMapColor) Iterables.getFirst(Multisets.copyHighestCountFirst(hashmultiset), MaterialMapColor.c);
+                                MaterialMapColor materialmapcolor = (MaterialMapColor) Iterables.getFirst(Multisets.copyHighestCountFirst(hashmultiset), MaterialMapColor.b);
 
-                                if (materialmapcolor == MaterialMapColor.o) {
+                                if (materialmapcolor == MaterialMapColor.n) {
                                     d2 = (double) k3 * 0.1D + (double) (k1 + l1 & 1) * 0.2D;
                                     b0 = 1;
                                     if (d2 < 0.5D) {
@@ -159,7 +185,7 @@
                                 d0 = d1;
                                 if (l1 >= 0 && i2 * i2 + j2 * j2 < j1 * j1 && (!flag1 || (k1 + l1 & 1) != 0)) {
                                     byte b1 = worldmap.colors[k1 + l1 * 128];
-                                    byte b2 = (byte) (materialmapcolor.ad * 4 + b0);
+                                    byte b2 = (byte) (materialmapcolor.M * 4 + b0);
 
                                     if (b1 != b2) {
                                         worldmap.colors[k1 + l1 * 128] = b2;
@@ -192,7 +218,7 @@
                             int j1 = l * i;
                             int k1 = i1 * i;
                             BiomeBase biomebase = abiomebase[j1 + k1 * 128 * i];
-                            MaterialMapColor materialmapcolor = MaterialMapColor.c;
+                            MaterialMapColor materialmapcolor = MaterialMapColor.b;
                             int l1 = 3;
                             int i2 = 8;
 
@@ -230,7 +256,7 @@
                                 }
 
                                 if (biomebase.j() < 0.0F) {
-                                    materialmapcolor = MaterialMapColor.r;
+                                    materialmapcolor = MaterialMapColor.q;
                                     if (i2 > 7 && i1 % 2 == 0) {
                                         l1 = (l + (int) (MathHelper.sin((float) i1 + 0.0F) * 7.0F)) / 8 % 5;
                                         if (l1 == 3) {
@@ -239,7 +265,7 @@
                                             l1 = 0;
                                         }
                                     } else if (i2 > 7) {
-                                        materialmapcolor = MaterialMapColor.c;
+                                        materialmapcolor = MaterialMapColor.b;
                                     } else if (i2 > 5) {
                                         l1 = 1;
                                     } else if (i2 > 3) {
@@ -248,7 +274,7 @@
                                         l1 = 0;
                                     }
                                 } else if (i2 > 0) {
-                                    materialmapcolor = MaterialMapColor.C;
+                                    materialmapcolor = MaterialMapColor.B;
                                     if (i2 > 3) {
                                         l1 = 1;
                                     } else {
@@ -257,8 +283,8 @@
                                 }
                             }
 
-                            if (materialmapcolor != MaterialMapColor.c) {
-                                worldmap.colors[l + i1 * 128] = (byte) (materialmapcolor.ad * 4 + l1);
+                            if (materialmapcolor != MaterialMapColor.b) {
+                                worldmap.colors[l + i1 * 128] = (byte) (materialmapcolor.M * 4 + l1);
                                 worldmap.flagDirty(l, i1);
                             }
                         }
@@ -319,6 +345,10 @@
             worldmap1.map = worldmap.map;
             worldmap1.c();
             world.a("map_" + itemstack.getData(), (PersistentBase) worldmap1);
+            // CraftBukkit start
+            MapInitializeEvent event = new MapInitializeEvent(worldmap1.mapView);
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            // CraftBukkit end
         }
 
     }
@@ -326,6 +356,7 @@
     protected static void b(ItemStack itemstack, World world) {
         WorldMap worldmap = Items.FILLED_MAP.getSavedMap(itemstack, world);
 
+        world = world.getServer().getServer().worlds.get(0); // CraftBukkit - use primary world for maps
         itemstack.setData(world.b("map"));
         WorldMap worldmap1 = new WorldMap("map_" + itemstack.getData());
 
@@ -337,6 +368,10 @@
             worldmap1.map = worldmap.map;
             worldmap1.c();
             world.a("map_" + itemstack.getData(), (PersistentBase) worldmap1);
+            // CraftBukkit start
+            MapInitializeEvent event = new MapInitializeEvent(worldmap1.mapView);
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            // CraftBukkit end
         }
 
     }
