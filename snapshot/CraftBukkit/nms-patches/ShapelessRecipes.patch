--- a/net/minecraft/server/ShapelessRecipes.java
+++ b/net/minecraft/server/ShapelessRecipes.java
@@ -1,23 +1,38 @@
 package net.minecraft.server;
 
 import com.google.common.collect.Lists;
-import com.google.gson.JsonArray;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonParseException;
 import java.util.ArrayList;
 import java.util.Iterator;
+import java.util.List;
+
+// CraftBukkit start
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.craftbukkit.inventory.CraftShapelessRecipe;
+// CraftBukkit end
 
 public class ShapelessRecipes implements IRecipe {
 
     private final ItemStack result;
-    private final NonNullList<RecipeItemStack> ingredients;
-    private final String c;
+    private final List<ItemStack> ingredients;
 
-    public ShapelessRecipes(String s, ItemStack itemstack, NonNullList<RecipeItemStack> nonnulllist) {
-        this.c = s;
+    public ShapelessRecipes(ItemStack itemstack, List<ItemStack> list) {
         this.result = itemstack;
-        this.ingredients = nonnulllist;
+        this.ingredients = list;
+    }
+
+    // CraftBukkit start
+    @SuppressWarnings("unchecked")
+    public org.bukkit.inventory.ShapelessRecipe toBukkitRecipe() {
+        CraftItemStack result = CraftItemStack.asCraftMirror(this.result);
+        CraftShapelessRecipe recipe = new CraftShapelessRecipe(result, this);
+        for (ItemStack stack : (List<ItemStack>) this.ingredients) {
+            if (stack != null) {
+                recipe.addIngredient(org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(stack.getItem()), stack.getData());
+            }
+        }
+        return recipe;
     }
+    // CraftBukkit end
 
     public ItemStack b() {
         return this.result;
@@ -29,8 +44,8 @@
         for (int i = 0; i < nonnulllist.size(); ++i) {
             ItemStack itemstack = inventorycrafting.getItem(i);
 
-            if (itemstack.getItem().r()) {
-                nonnulllist.set(i, new ItemStack(itemstack.getItem().q()));
+            if (itemstack.getItem().s()) {
+                nonnulllist.set(i, new ItemStack(itemstack.getItem().r()));
             }
         }
 
@@ -49,11 +64,11 @@
                     Iterator iterator = arraylist.iterator();
 
                     while (iterator.hasNext()) {
-                        RecipeItemStack recipeitemstack = (RecipeItemStack) iterator.next();
+                        ItemStack itemstack1 = (ItemStack) iterator.next();
 
-                        if (recipeitemstack.a(itemstack)) {
+                        if (itemstack.getItem() == itemstack1.getItem() && (itemstack1.getData() == 32767 || itemstack.getData() == itemstack1.getData())) {
                             flag = true;
-                            arraylist.remove(recipeitemstack);
+                            arraylist.remove(itemstack1);
                             break;
                         }
                     }
@@ -72,32 +87,7 @@
         return this.result.cloneItemStack();
     }
 
-    public static ShapelessRecipes a(JsonObject jsonobject) {
-        String s = ChatDeserializer.a(jsonobject, "group", "");
-        NonNullList nonnulllist = a(ChatDeserializer.u(jsonobject, "ingredients"));
-
-        if (nonnulllist.isEmpty()) {
-            throw new JsonParseException("No ingredients for shapeless recipe");
-        } else if (nonnulllist.size() > 9) {
-            throw new JsonParseException("Too many ingredients for shapeless recipe");
-        } else {
-            ItemStack itemstack = ShapedRecipes.a(ChatDeserializer.t(jsonobject, "result"), true);
-
-            return new ShapelessRecipes(s, itemstack, nonnulllist);
-        }
-    }
-
-    private static NonNullList<RecipeItemStack> a(JsonArray jsonarray) {
-        NonNullList nonnulllist = NonNullList.a();
-
-        for (int i = 0; i < jsonarray.size(); ++i) {
-            RecipeItemStack recipeitemstack = ShapedRecipes.a(jsonarray.get(i));
-
-            if (recipeitemstack != RecipeItemStack.a) {
-                nonnulllist.add(recipeitemstack);
-            }
-        }
-
-        return nonnulllist;
+    public int a() {
+        return this.ingredients.size();
     }
 }
