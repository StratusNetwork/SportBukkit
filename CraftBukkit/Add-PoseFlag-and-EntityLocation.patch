From: Jedediah Smith <jedediah@silencegreys.com>
Date: Fri, 1 Jul 2016 03:36:25 -0400
Subject: [PATCH] Add PoseFlag and EntityLocation


diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -17,13 +17,11 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
-import org.bukkit.Bukkit;
-import org.bukkit.Location;
-import org.bukkit.Server;
-import org.bukkit.TravelAgent;
+import org.bukkit.*;
 import org.bukkit.block.BlockFace;
 import org.bukkit.entity.Hanging;
 import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Player;
 import org.bukkit.entity.Vehicle;
 import org.bukkit.event.entity.*;
 import org.bukkit.event.hanging.HangingBreakByEntityEvent;
@@ -1901,6 +1899,12 @@ public abstract class Entity implements ICommandListener {
                         getBukkitEntity()
                 );
                 Bukkit.getPluginManager().callEvent(event);
+                if(getBukkitEntity() instanceof Player) {
+                    final Player player = (Player) getBukkitEntity();
+                    final EntityLocation newLocation = player.getEntityLocation();
+                    newLocation.copyLocation(entity.getBukkitEntity().getLocation());
+                    CraftEventFactory.callPlayerPoseFlagEvent(player, PoseFlag.RIDING, true, newLocation, event);
+                }
                 CraftEntity craftn = (CraftEntity) getBukkitEntity().getVehicle();
                 Entity n = craftn == null ? null : craftn.getHandle();
                 if (event.isCancelled() || n != orig) {
@@ -1941,6 +1945,9 @@ public abstract class Entity implements ICommandListener {
                         (LivingEntity) getBukkitEntity()
                 );
                 Bukkit.getPluginManager().callEvent(event);
+                if(getBukkitEntity() instanceof Player) {
+                    CraftEventFactory.callPlayerPoseFlagEvent((Player) getBukkitEntity(), PoseFlag.RIDING, false, event);
+                }
                 CraftEntity craftn = (CraftEntity) getBukkitEntity().getVehicle();
                 Entity n = craftn == null ? null : craftn.getHandle();
                 if (event.isCancelled() || n != orig) {
diff --git a/src/main/java/net/minecraft/server/EntityHuman.java b/src/main/java/net/minecraft/server/EntityHuman.java
--- a/src/main/java/net/minecraft/server/EntityHuman.java
+++ b/src/main/java/net/minecraft/server/EntityHuman.java
@@ -10,8 +10,10 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 
 // CraftBukkit start
+import org.bukkit.PoseFlag;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.entity.CraftItem;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.entity.Player;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
@@ -1256,6 +1258,7 @@ public abstract class EntityHuman extends EntityLiving {
 
             PlayerBedEnterEvent event = new PlayerBedEnterEvent(player, bed);
             this.world.getServer().getPluginManager().callEvent(event);
+            CraftEventFactory.callPlayerPoseFlagEvent(player, PoseFlag.SLEEPING, true, event);
 
             if (event.isCancelled()) {
                 return EnumBedResult.OTHER_PROBLEM;
@@ -1337,6 +1340,7 @@ public abstract class EntityHuman extends EntityLiving {
 
             PlayerBedLeaveEvent event = new PlayerBedLeaveEvent(player, bed);
             this.world.getServer().getPluginManager().callEvent(event);
+            CraftEventFactory.callPlayerPoseFlagEvent(player, PoseFlag.SLEEPING, false, null);
         }
         // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -18,7 +18,10 @@ import org.apache.logging.log4j.Logger;
 // CraftBukkit start
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;
+
+import org.bukkit.EntityLocation;
 import org.bukkit.Location;
+import org.bukkit.PoseFlag;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftInventoryView;
@@ -136,6 +139,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
     private boolean justTeleported = false;
     private boolean hasMoved; // Spigot
 
+    private Set<PoseFlag> lastPose = java.util.EnumSet.noneOf(PoseFlag.class); // SportBukkit
+
     public CraftPlayer getPlayer() {
         return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
     }
@@ -414,8 +419,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     hasMoved = true;
                 }
                 // Spigot End
-                Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
-                Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+                EntityLocation from = new EntityLocation(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch, player.getVelocity(), lastPose); // Get the Player's previous Event location.
+                EntityLocation to = player.getEntityLocation(); // Start off the To location as the Players current location.
 
                 // If the packet contains movement information then we update the To location with the correct XYZ.
                 to.setX(packetplayinvehiclemove.getX());
@@ -437,6 +442,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                     this.lastPosZ = to.getZ();
                     this.lastYaw = to.getYaw();
                     this.lastPitch = to.getPitch();
+                    this.lastPose = to.poseFlags();
 
                     // Skip the first time we do this
                     if (true) { // Spigot - don't skip any move events
@@ -664,8 +670,8 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                             this.player.setLocation(prevX, prevY, prevZ, prevYaw, prevPitch);
 
                             Player player = this.getPlayer();
-                            Location from = new Location(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch); // Get the Players previous Event location.
-                            Location to = player.getLocation().clone(); // Start off the To location as the Players current location.
+                            EntityLocation from = new EntityLocation(player.getWorld(), lastPosX, lastPosY, lastPosZ, lastYaw, lastPitch, player.getVelocity(), lastPose); // Get the Players previous Event location.
+                            EntityLocation to = player.getEntityLocation(); // Start off the To location as the Players current location.
 
                             // If the packet contains movement information then we update the To location with the correct XYZ.
                             if (packetplayinflying.hasPos) {
@@ -696,6 +702,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                                 this.lastPosZ = to.getZ();
                                 this.lastYaw = to.getYaw();
                                 this.lastPitch = to.getPitch();
+                                this.lastPose = to.poseFlags();
 
                                 // Skip the first time we do this
                                 if (from.getX() != Double.MAX_VALUE) {
@@ -1559,6 +1566,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             case STOP_SNEAKING:
                 PlayerToggleSneakEvent event = new PlayerToggleSneakEvent(this.getPlayer(), packetplayinentityaction.b() == PacketPlayInEntityAction.EnumPlayerAction.START_SNEAKING);
                 this.server.getPluginManager().callEvent(event);
+                CraftEventFactory.callPlayerPoseFlagEvent(this.getPlayer(), PoseFlag.SNEAKING, event.isSneaking(), event);
 
                 if (event.isCancelled()) {
                     return;
@@ -1568,6 +1576,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
             case STOP_SPRINTING:
                 PlayerToggleSprintEvent e2 = new PlayerToggleSprintEvent(this.getPlayer(), packetplayinentityaction.b() == PacketPlayInEntityAction.EnumPlayerAction.START_SPRINTING);
                 this.server.getPluginManager().callEvent(e2);
+                CraftEventFactory.callPlayerPoseFlagEvent(this.getPlayer(), PoseFlag.SPRINTING, e2.isSprinting(), e2);
 
                 if (e2.isCancelled()) {
                     return;
@@ -2351,6 +2360,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
         if (this.player.abilities.canFly && this.player.abilities.isFlying != packetplayinabilities.isFlying()) {
             PlayerToggleFlightEvent event = new PlayerToggleFlightEvent(this.server.getPlayer(this.player), packetplayinabilities.isFlying());
             this.server.getPluginManager().callEvent(event);
+            CraftEventFactory.callPlayerPoseFlagEvent(this.getPlayer(), PoseFlag.FLYING, event.isFlying(), event);
             if (!event.isCancelled()) {
                 this.player.abilities.isFlying = packetplayinabilities.isFlying(); // Actually set the player's flying status
             } else {
diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -23,6 +23,7 @@ import org.apache.logging.log4j.Logger;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Iterables;
 
+import org.bukkit.PoseFlag;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.chunkio.ChunkIOExecutor;
@@ -31,6 +32,7 @@ import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.TravelAgent;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerChangedWorldEvent;
@@ -731,6 +733,7 @@ public abstract class PlayerList {
             this.savePlayerFile(entityplayer);
         }
         // CraftBukkit end
+        CraftEventFactory.callPlayerPoseFlagEvent(entityplayer1.getBukkitEntity(), PoseFlag.DEAD, false, null); // SportBukkit
         return entityplayer1;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -10,9 +10,7 @@ import java.util.*;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.server.*;
 
-import org.bukkit.EntityEffect;
-import org.bukkit.Location;
-import org.bukkit.Server;
+import org.bukkit.*;
 import org.bukkit.World;
 import org.bukkit.command.CommandSender;
 import org.bukkit.craftbukkit.CraftServer;
@@ -221,7 +219,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     public Location getLocation() {
-        return new Location(getWorld(), entity.locX, entity.locY, entity.locZ, entity.yaw, entity.pitch);
+        return getEntityLocation();
+    }
+
+    @Override
+    public EntityLocation getEntityLocation() {
+        return new EntityLocation(getWorld(), entity.locX, entity.locY, entity.locZ, entity.yaw, entity.pitch, getVelocity(), getPoseFlags());
     }
 
     public Location getLocation(Location loc) {
@@ -232,11 +235,26 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             loc.setZ(entity.locZ);
             loc.setYaw(entity.yaw);
             loc.setPitch(entity.pitch);
+
+            if(loc instanceof EntityLocation) {
+                final Set<PoseFlag> flags = ((EntityLocation) loc).poseFlags();
+                flags.clear();
+                flags.addAll(getPoseFlags());
+            }
         }
 
         return loc;
     }
 
+    @Override
+    public EnumSet<PoseFlag> getPoseFlags() {
+        final EnumSet<PoseFlag> flags = EnumSet.noneOf(PoseFlag.class);
+        if(isOnGround()) flags.add(PoseFlag.GROUNDED);
+        if(isDead()) flags.add(PoseFlag.DEAD);
+        if(isInsideVehicle()) flags.add(PoseFlag.RIDING);
+        return flags;
+    }
+
     public Vector getVelocity() {
         return new Vector(entity.motX, entity.motY, entity.motZ);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -3,12 +3,14 @@ package org.bukkit.craftbukkit.entity;
 import com.google.common.base.Preconditions;
 
 import java.util.Collection;
+import java.util.EnumSet;
 import java.util.Set;
 
 import net.minecraft.server.*;
 
 import org.bukkit.GameMode;
 import org.bukkit.Location;
+import org.bukkit.PoseFlag;
 import org.bukkit.inventory.MainHand;
 import org.bukkit.inventory.Merchant;
 import org.bukkit.Material;
@@ -533,6 +535,14 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
+    public EnumSet<PoseFlag> getPoseFlags() {
+        final EnumSet<PoseFlag> flags = super.getPoseFlags();
+        if(isSleeping()) flags.add(PoseFlag.SLEEPING);
+        if(isBlocking()) flags.add(PoseFlag.BLOCKING);
+        return flags;
+    }
+
+    @Override
     public int getCooldown(Material material) {
         Preconditions.checkArgument(material != null, "material");
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -1,11 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashSet;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 
 import net.minecraft.server.DamageSource;
 import net.minecraft.server.EntityArmorStand;
@@ -38,6 +33,7 @@ import net.minecraft.server.MobEffectList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
 import org.bukkit.Material;
+import org.bukkit.PoseFlag;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeInstance;
 import org.bukkit.block.Block;
@@ -608,4 +604,12 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     public void setArrowsStuck(int arrows) {
         getHandle().setArrowCount(arrows);
     }
+
+    @Override
+    public EnumSet<PoseFlag> getPoseFlags() {
+        final EnumSet<PoseFlag> flags = super.getPoseFlags();
+        if(isGliding()) flags.add(PoseFlag.GLIDING);
+        if(isLeashed()) flags.add(PoseFlag.LEASHED);
+        return flags;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -2039,4 +2039,14 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public float getRemainingItemCooldown(Material item) {
         return getHandle().getCooldownTracker().a(CraftMagicNumbers.getItem(item), 0F);
     }
+
+    @Override
+    public EnumSet<PoseFlag> getPoseFlags() {
+        final EnumSet<PoseFlag> flags = super.getPoseFlags();
+        if(isSneaking()) flags.add(PoseFlag.SNEAKING);
+        if(isSprinting()) flags.add(PoseFlag.SPRINTING);
+        if(isDigging()) flags.add(PoseFlag.DIGGING);
+        if(isFlying()) flags.add(PoseFlag.FLYING);
+        return flags;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -13,9 +13,10 @@ import com.google.common.base.Functions;
 
 import net.minecraft.server.*;
 
-import org.bukkit.Bukkit;
+import net.minecraft.server.Statistic;
+import net.minecraft.server.World;
+import org.bukkit.*;
 import org.bukkit.Material;
-import org.bukkit.Server;
 import org.bukkit.Statistic.Type;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
@@ -270,6 +271,8 @@ public class CraftEventFactory {
         BlockDamageEvent event = new BlockDamageEvent(player, blockClicked, itemInHand, instaBreak);
         craftServer.getPluginManager().callEvent(event);
 
+        callPlayerPoseFlagEvent(player, PoseFlag.DIGGING, true, event);
+
         return event;
     }
 
@@ -278,6 +281,8 @@ public class CraftEventFactory {
         BlockUndamageEvent event = new BlockUndamageEvent(player, player.getWorld().getBlockAt(x, y, z));
         player.getServer().getPluginManager().callEvent(event);
 
+        callPlayerPoseFlagEvent(player, PoseFlag.DIGGING, false, null);
+
         return event;
     }
 
@@ -420,6 +425,8 @@ public class CraftEventFactory {
         org.bukkit.World world = entity.getWorld();
         Bukkit.getServer().getPluginManager().callEvent(event);
 
+        callPlayerPoseFlagEvent(entity, PoseFlag.DEAD, true, null);
+
         victim.keepLevel = event.getKeepLevel();
         victim.newLevel = event.getNewLevel();
         victim.newTotalExp = event.getNewTotalExp();
@@ -950,12 +957,18 @@ public class CraftEventFactory {
     public static PlayerUnleashEntityEvent callPlayerUnleashEntityEvent(EntityInsentient entity, EntityHuman player) {
         PlayerUnleashEntityEvent event = new PlayerUnleashEntityEvent(entity.getBukkitEntity(), (Player) player.getBukkitEntity());
         entity.world.getServer().getPluginManager().callEvent(event);
+        if(entity.getBukkitEntity() instanceof Player) {
+            callPlayerPoseFlagEvent((Player) entity.getBukkitEntity(), PoseFlag.LEASHED, false, event);
+        }
         return event;
     }
 
     public static PlayerLeashEntityEvent callPlayerLeashEntityEvent(EntityInsentient entity, Entity leashHolder, EntityHuman player) {
         PlayerLeashEntityEvent event = new PlayerLeashEntityEvent(entity.getBukkitEntity(), leashHolder.getBukkitEntity(), (Player) player.getBukkitEntity());
         entity.world.getServer().getPluginManager().callEvent(event);
+        if(entity.getBukkitEntity() instanceof Player) {
+            callPlayerPoseFlagEvent((Player) entity.getBukkitEntity(), PoseFlag.LEASHED, true, event);
+        }
         return event;
     }
 
@@ -1025,6 +1038,9 @@ public class CraftEventFactory {
     public static EntityToggleGlideEvent callToggleGlideEvent(EntityLiving entity, boolean gliding) {
         EntityToggleGlideEvent event = new EntityToggleGlideEvent((LivingEntity) entity.getBukkitEntity(), gliding);
         entity.world.getServer().getPluginManager().callEvent(event);
+        if(entity.getBukkitEntity() instanceof Player) {
+            callPlayerPoseFlagEvent((Player) entity.getBukkitEntity(), PoseFlag.GLIDING, gliding, event);
+        }
         return event;
     }
 
@@ -1133,4 +1149,33 @@ public class CraftEventFactory {
         world.getServer().getPluginManager().callEvent(event);
         return event;
     }
+
+    public static PlayerMoveEvent callPlayerPoseFlagEvent(Player player, PoseFlag flag, boolean newState, Cancellable priorEvent) {
+        return callPlayerPoseFlagEvent(player, flag, newState, player.getEntityLocation(), priorEvent);
+    }
+
+    public static PlayerMoveEvent callPlayerPoseFlagEvent(Player player, PoseFlag flag, boolean newState, EntityLocation to, Cancellable priorEvent) {
+        final EntityLocation from = player.getEntityLocation();
+
+        if(newState) {
+            from.poseFlags().remove(flag);
+            to.poseFlags().add(flag);
+        } else {
+            from.poseFlags().add(flag);
+            to.poseFlags().remove(flag);
+        }
+
+        final PlayerMoveEvent moveEvent = new PlayerMoveEvent(player, from, to);
+        if(priorEvent != null) {
+            moveEvent.setCancelled(priorEvent.isCancelled());
+        }
+
+        player.getServer().getPluginManager().callEvent(moveEvent);
+
+        if(priorEvent != null) {
+            priorEvent.setCancelled(moveEvent.isCancelled());
+        }
+
+        return moveEvent;
+    }
 }
